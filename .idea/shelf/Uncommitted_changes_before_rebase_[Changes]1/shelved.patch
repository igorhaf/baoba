Index: react-frontend/src/MxGraphComponent.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useRef, useEffect, useState } from 'react';\r\nimport { setText } from './redux/actions/textActions';\r\nimport { useDispatch } from 'react-redux';\r\nimport mxgraph from 'mxgraph';\r\nimport './MxGraphComponent.css';\r\nimport ifIcon from './assets/images/icons/if.svg';\r\nimport scheduleIcon from './assets/images/icons/schedule.svg';\r\nimport sleepIcon from './assets/images/icons/sleep.svg';\r\nimport startIcon from './assets/images/icons/start.svg';\r\nimport stopIcon from './assets/images/icons/stop.svg';\r\nimport switchIcon from './assets/images/icons/switch.svg';\r\nimport webhookIcon from './assets/images/icons/webhook.svg';\r\nimport exceptionIcon from './assets/images/icons/exception.svg';\r\nimport queryIcon from './assets/images/icons/query.svg';\r\nimport gmailReceiveIcon from './assets/images/icons/gmail-receive.svg';\r\nimport gmailSendIcon from './assets/images/icons/gmail-send.svg';\r\nimport trelloAddCardIcon from './assets/images/icons/trello-add-card.svg';\r\nimport trelloRemoveCardIcon from './assets/images/icons/trello-remove-card.svg';\r\nimport linkIcon from './assets/images/icons/link.svg';\r\nimport apiIcon from './assets/images/icons/api.svg';\r\nimport bashIcon from './assets/images/icons/bash.svg';\r\nimport javascriptIcon from './assets/images/icons/javascript.svg';\r\nimport { addFragment } from './redux/actions/fragmentActions';\r\nimport { addForm, removeForm } from './redux/actions/formActions';\r\n\r\nconst {\r\n  mxGraph, mxRubberband, mxKeyHandler, mxClient, mxUtils, mxEvent, mxConstants\r\n} = mxgraph();\r\n\r\nconst MxGraphComponent = () => {\r\n  const graphContainer = useRef(null);\r\n  const [graph, setGraph] = useState(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const getIconURLFromClassName = (className) => {\r\n    const icons = {\r\n      'start': startIcon,\r\n      'if': ifIcon,\r\n      'schedule': scheduleIcon,\r\n      'sleep': sleepIcon,\r\n      'stop': stopIcon,\r\n      'switch': switchIcon,\r\n      'webhook': webhookIcon,\r\n      'exception': exceptionIcon,\r\n      'query': queryIcon,\r\n      'gmail-receive': gmailReceiveIcon,\r\n      'gmail-send': gmailSendIcon,\r\n      'trello-add-card': trelloAddCardIcon,\r\n      'trello-remove-card': trelloRemoveCardIcon,\r\n      'link': linkIcon,\r\n      'api': apiIcon,\r\n      'javascript': javascriptIcon,\r\n      'bash': bashIcon\r\n    };\r\n    return icons[className] || '';\r\n  };\r\n\r\n  const initGraph = (container) => {\r\n    const newGraph = new mxGraph(container);\r\n    setGraph(newGraph);\r\n    mxUtils.alert = (message) => {\r\n      dispatch(setText(\"Emitindo evento de erro: \" + message));\r\n    };\r\n\r\n    newGraph.setCellsEditable(true);\r\n    newGraph.setConnectable(true);\r\n    newGraph.setMultigraph(false);\r\n    newGraph.setAllowDanglingEdges(false);\r\n    newGraph.getModel().addListener(mxEvent.AFTER_ADD, () => {\r\n      newGraph.refresh();\r\n    });\r\n      newGraph.setPanning(true);\r\n      newGraph.panningHandler.useLeftButtonForPanning = true;\r\n      newGraph.panningHandler.border = 0;\r\n      newGraph.gridSize = 10;\r\n      newGraph.scrollbars = false;\r\n      newGraph.pageVisible = false;\r\n      newGraph.setEnabled(true);\r\n      newGraph.setCellsDeletable(true);\r\n      newGraph.stylesheet.getDefaultEdgeStyle().rounded = 1;\r\n      newGraph.stylesheet.getDefaultEdgeStyle().jettySize = 30;\r\n      newGraph.setCellsResizable(false);\r\n    const style = newGraph.getStylesheet().getDefaultVertexStyle();\r\n    style[mxConstants.STYLE_EXIT_X] = 1.0;\r\n    style[mxConstants.STYLE_EXIT_Y] = 0.5;\r\n    style[mxConstants.STYLE_EXIT_PERIMETER] = 0;\r\n    style[mxConstants.STYLE_ENTRY_X] = 0;\r\n    style[mxConstants.STYLE_ENTRY_Y] = 0.5;\r\n    style[mxConstants.STYLE_ENTRY_PERIMETER] = 0;\r\n    style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_TOP;\r\n    style[mxConstants.STYLE_VERTICAL_LABEL_POSITION] = 'bottom';\r\n    style[mxConstants.STYLE_SPACING_BOTTOM] = 32; // Mova o label 32 pixels para cima\r\n    style[mxConstants.STYLE_FONTCOLOR] = '#dee0e4';  // Branco\r\n\r\n\r\n\r\n    newGraph.getModel().beginUpdate();\r\n    try {\r\n      newGraph.getStylesheet().putDefaultVertexStyle(style);\r\n    } finally {\r\n      newGraph.getModel().endUpdate();\r\n    }\r\n      new mxRubberband(newGraph);\r\n\r\n      const keyHandler = new mxKeyHandler(newGraph);\r\n      keyHandler.bindKey(46, (evt) => {\r\n\r\n          console.log(newGraph.isEnabled());\r\n          if (newGraph.isEnabled()) {\r\n\r\n              //newGraph.container.focus();\r\n              newGraph.removeCells()\r\n          }\r\n      });\r\n\r\n    return newGraph;\r\n  };\r\n\r\n  const drop = (event) => {\r\n        event.preventDefault();\r\n        const data = event.dataTransfer.getData('nodeData');\r\n        const { iconClass, name } = JSON.parse(data);\r\n\r\n        const parent = graph.getDefaultParent();\r\n\r\n\r\n      graph.getModel().beginUpdate();\r\n        try {\r\n          const regex = /static\\/media\\/([^.]+)\\./;\r\n            const iconURL = getIconURLFromClassName(iconClass);\r\n            const shapeMatch = iconURL.match(regex);\r\n            const type = shapeMatch ? shapeMatch[1] : null;\r\n\r\n            if (type === 'start') {\r\n              // Verifica se já existe um vértice do tipo 'start'\r\n              const existingVertices = graph.getChildVertices(parent);\r\n              const startVertexExists = existingVertices.some(vertex => {\r\n                const style = vertex.getStyle();\r\n                const match = style && style.match(regex);\r\n                return match && match[1] === 'start';\r\n              });\r\n\r\n              if (startVertexExists) {\r\n                // Se um vértice 'start' já existe, não adiciona outro e emite um evento de erro\r\n                dispatch(setText('Dois vertices do tipo start, não podem coexistir no maesmo frame.'));\r\n                return; // Interrompe a execução do método\r\n              }\r\n            }\r\n\r\n            const x = event.clientX;\r\n            const y = event.clientY;\r\n\r\n            // Convertendo as coordenadas do mouse para coordenadas do gráfico\r\n            const point = graph.getPointForEvent(event);\r\n            if (x !== undefined && y !== undefined) {\r\n              graph.insertVertex(parent, null, name, point.x - 24, point.y - 24, 48, 48, `shape=image;image=${iconURL}`);\r\n            }\r\n        } finally {\r\n            graph.getModel().endUpdate();\r\n        }\r\n\r\n    };\r\n\r\n  const addClickEventListener = (graph) => {\r\n    graph.addListener(mxEvent.CLICK, (sender, evt) => {\r\n        graph.addListener(mxEvent.CLICK, (sender, evt) => {\r\n            const cell = evt.getProperty('cell');\r\n            if (cell && cell.value) {\r\n              let regex = /static\\/media\\/([^.]+)\\./;\r\n              let nodeType = cell.style.match(regex);\r\n              if (nodeType && nodeType.length > 1) {\r\n                console.log(nodeType[1])\r\n                if(nodeType[1] === 'sleep'){\r\n                  dispatch(addForm('SleepForm'))\r\n                }\r\n                if(nodeType[1] === 'schedule'){\r\n                  dispatch(addForm('ScheduleForm'))\r\n                }\r\n                if(nodeType[1] === 'if'){\r\n                  dispatch(addForm('IfForm'))\r\n                }\r\n\r\n\r\n                //onNodeSelected(cell.value);\r\n                //onNodeType(nodeType[1]);\r\n              }\r\n            }\r\n        });\r\n    });\r\n  };\r\n  const addConsoleEventListener = (graph) => {\r\n    mxUtils.alert = function(message) {\r\n      dispatch(setText(\"Alert from mxGraph:\"+ message));\r\n      console.log(\"Alert from mxGraph:\", message);\r\n    };\r\n\r\n    graph.addListener(mxEvent.CELL_CONNECTED, async (sender, evt) => {\r\n      const edge = evt.getProperty('edge');\r\n\r\n      const source = graph.getModel().getTerminal(edge, true);\r\n      const target = graph.getModel().getTerminal(edge, false);\r\n\r\n      if (!edge || !source || !target) {\r\n        return; // Se não for uma aresta válida ou não tiver terminais, ignora\r\n      }\r\n\r\n      const regex = /static\\/media\\/([^.]+)\\./;\r\n      const sourceMatch = source.getStyle().match(regex);\r\n      const targetMatch = target.getStyle().match(regex);\r\n      const sourceType = sourceMatch ? sourceMatch[1] : null;\r\n      const targetType = targetMatch ? targetMatch[1] : null;\r\n      if (sourceType !== 'if'){\r\n        if (sourceType !== 'switch'){\r\n          const edges = graph.getModel().getEdges(source);\r\n          const outgoingEdges = edges.filter(e => e.source === source && e.target !== source);\r\n            if (outgoingEdges.length > 1) {\r\n              // Se \"start\" já tem uma aresta saindo e está tentando fazer outra, remova a nova aresta.\r\n              graph.getModel().beginUpdate();\r\n              try {\r\n                dispatch(setText('O \"'+sourceType+'\" não pode ter mais de uma conexão saindo.'));\r\n                target.removeEdge(edge, true);\r\n              } finally {\r\n                graph.getModel().endUpdate();\r\n              }\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n      if (targetType === 'start') {\r\n        graph.getModel().beginUpdate();\r\n        try {\r\n          dispatch(setText(\"Start não pode ser o alvo de uma conexão.\"));\r\n          target.removeEdge(edge, true);\r\n        } finally {\r\n          graph.getModel().endUpdate();\r\n        }\r\n        return;\r\n      }\r\n\r\n        if (sourceType === 'stop') {\r\n            graph.getModel().beginUpdate();\r\n            try {\r\n                dispatch(setText(\"Stop não pode ser fonte de uma conexão.\"));\r\n                target.removeEdge(edge, true);\r\n            } finally {\r\n                graph.getModel().endUpdate();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (sourceType === 'link') {\r\n          graph.getModel().beginUpdate();\r\n          try {\r\n              dispatch(setText(\"Link não pode ser fonte de uma conexão.\"));\r\n              target.removeEdge(edge, true);\r\n          } finally {\r\n              graph.getModel().endUpdate();\r\n          }\r\n          return;\r\n      }\r\n\r\n        if (sourceType === 'exception') {\r\n            graph.getModel().beginUpdate();\r\n            try {\r\n                dispatch(setText(\"Exception não pode ser fonte de uma conexão.\"));\r\n                target.removeEdge(edge, true);\r\n            } finally {\r\n                graph.getModel().endUpdate();\r\n            }\r\n            return;\r\n        }\r\n\r\n\r\n      // Verifica se já existe uma aresta na direção oposta\r\n      let existingConnections = graph.getModel().getEdgesBetween(target, source);\r\n\r\n      for (let i = 0; i < existingConnections.length; i++) {\r\n        let src = graph.getModel().getTerminal(existingConnections[i], true);\r\n        let trg = graph.getModel().getTerminal(existingConnections[i], false);\r\n\r\n        if (src.id === target.id && trg.id === source.id) {\r\n          // Se uma conexão inversa já existe\r\n          graph.getModel().beginUpdate();\r\n          try {\r\n            dispatch(setText(\"Uma conexão inversa já existe!\"));\r\n            target.removeEdge(edge, true);\r\n\r\n            break;\r\n\r\n          } finally {\r\n            graph.getModel().endUpdate();\r\n          }\r\n        }\r\n      }\r\n\r\n      if (sourceType !== 'start') {\r\n        let currentSource = source; // Começa com a fonte atual\r\n        let foundStart = false; // Flag para indicar se encontrou um 'start'\r\n\r\n        // Loop para subir a cadeia de ancestrais\r\n        while (!foundStart && currentSource) {\r\n          let edges = graph.getModel().getIncomingEdges(currentSource);\r\n          if (edges.length > 0) {\r\n            // Assume que cada vértice tem apenas uma aresta entrante\r\n            let nextSource = graph.getModel().getTerminal(edges[0], true);\r\n            if (nextSource) {\r\n              let style = nextSource.getStyle();\r\n              if (style) {\r\n                let match = style.match(regex);\r\n                if (match && match[1] === 'start') {\r\n                  foundStart = true; // Encontrou um ancestral do tipo 'start'\r\n                } else {\r\n                  currentSource = nextSource; // Atualiza a fonte atual e continua o loop\r\n                }\r\n              } else {\r\n                break; // Sai do loop se o estilo não for definido\r\n              }\r\n            } else {\r\n              break; // Sai do loop se não houver mais fontes\r\n            }\r\n          } else {\r\n            break; // Sai do loop se não houver arestas entrantes\r\n          }\r\n        }\r\n\r\n        if (!followsStartFlow(target, graph) || !followsStartFlow(source, graph)) {\r\n\r\n          target.removeEdge(edge, true);\r\n          mxUtils.alert('A conexão deve seguir o fluxo a partir de \"start\".');\r\n          dispatch(setText(\"A conexão deve seguir o fluxo a partir de start\"));\r\n          evt.consume();\r\n        }\r\n      }\r\n        //!todo: animation\r\n        //const edges = edges;\r\n        //console.log(edges)\r\n        //var state = graph.view.getState(edge);\r\n        //console.log(state)\r\n\r\n        //state.shape.node.getElementsByTagName('path')[0].removeAttribute('visibility');\r\n        //state.shape.node.getElementsByTagName('path')[0].setAttribute('stroke-width', '6');\r\n        //state.shape.node.getElementsByTagName('path')[0].setAttribute('stroke', 'lightGray');\r\n        //state.shape.node.getElementsByTagName('path')[1].setAttribute('class', 'flow');\r\n\r\n    });\r\n    mxUtils.alert = function(message) {\r\n      dispatch(setText(\"Emitindo evento de erro:\"+ message));\r\n    };\r\n\r\n    /*if (!followsStartFlow(target) || !followsStartFlow(source)) {\r\n      target.removeEdge(edge, true);\r\n      mxUtils.alert('A conexão deve seguir o fluxo a partir de \"start\".');\r\n      evt.consume();\r\n    }*/\r\n\r\n  };\r\n  const followsStartFlow = (vertex, graph) => {\r\n\r\n    if (!vertex) return false;\r\n    // Verifica se o vértice é do tipo 'start' através do seu estilo\r\n    const style = vertex.getStyle();\r\n    const regex = /static\\/media\\/start\\.[^.]+\\./;\r\n    if (style && regex.test(style)) {\r\n      return true; // O vértice atual é 'start'\r\n    }\r\n\r\n    // Rastreia o caminho de entrada até encontrar um 'start'\r\n    let incomingEdges = graph.getModel().getIncomingEdges(vertex);\r\n    for (let i = 0; i < incomingEdges.length; i++) {\r\n      let source = graph.getModel().getTerminal(incomingEdges[i], true);\r\n      if (source && followsStartFlow(source, graph)) {\r\n        return true; // Caminho válido encontrado\r\n      }\r\n    }\r\n\r\n    // Não encontrou um caminho válido até 'start'\r\n    return false;\r\n  };\r\n  useEffect(() => {\r\n    if (!mxClient.isBrowserSupported()) {\r\n      mxUtils.error('Browser não suportado!', 200, false);\r\n      return;\r\n    }\r\n\r\n    const newGraph = initGraph(graphContainer.current);\r\n    addClickEventListener(newGraph);\r\n    addConsoleEventListener(newGraph);\r\n\r\n    const initialWidth = graphContainer.current.offsetWidth;\r\n    const initialHeight = graphContainer.current.offsetHeight;\r\n    newGraph.addListener(mxEvent.SIZE, (sender, evt) => {\r\n      graphContainer.current.style.width = `${initialWidth}px`;\r\n      graphContainer.current.style.height = `${initialHeight}px`;\r\n    });\r\n\r\n    const sendGraphDataToAPI = async () => {\r\n      // ... implementação de envio de dados para a API\r\n    };\r\n\r\n    newGraph.getModel().addListener(mxEvent.CHANGE, sendGraphDataToAPI);\r\n\r\n    return () => {\r\n      newGraph.destroy();\r\n    };\r\n  // eslint-disable-next-line\r\n  }, [graphContainer]); // As dependências corretas devem ser listadas aqui\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div ref={graphContainer} className=\"graph-container\" onDrop={drop} onDragOver={(e) => e.preventDefault()}></div>\r\n  );\r\n};\r\n\r\nexport default MxGraphComponent;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/react-frontend/src/MxGraphComponent.jsx b/react-frontend/src/MxGraphComponent.jsx
--- a/react-frontend/src/MxGraphComponent.jsx	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/react-frontend/src/MxGraphComponent.jsx	(date 1713650372292)
@@ -22,6 +22,7 @@
 import javascriptIcon from './assets/images/icons/javascript.svg';
 import { addFragment } from './redux/actions/fragmentActions';
 import { addForm, removeForm } from './redux/actions/formActions';
+import {getLastGraph, sendGraphApi} from './api/graphService';
 
 const {
   mxGraph, mxRubberband, mxKeyHandler, mxClient, mxUtils, mxEvent, mxConstants
@@ -32,6 +33,7 @@
   const [graph, setGraph] = useState(null);
   const dispatch = useDispatch();
 
+  const [getLastGraph, sendGraphApi] = useState(null);
   const getIconURLFromClassName = (className) => {
     const icons = {
       'start': startIcon,
@@ -378,6 +380,15 @@
     return false;
   };
   useEffect(() => {
+    getLastGraph()
+        .then(data => {
+          getLastGraph(data);
+        })
+  }, []);
+  useEffect(() => {
+
+
+
     if (!mxClient.isBrowserSupported()) {
       mxUtils.error('Browser não suportado!', 200, false);
       return;
Index: backend/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst cors = require('cors');\r\nconst app = express();\r\nconst port = 8080;\r\nconst mongoose = require('mongoose');\r\nconst tabsRoutes = require('./routes/tabsRoutes');\r\n\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\nconst { Sequelize } = require('sequelize');\r\nconst config = require('./config/config.json');\r\nconst user = 'nexabuild';\r\nconst password = 'nexabuild';\r\nconst database = 'admin'; // ou qualquer outro banco de dados que você deseja usar\r\nconst host = 'localhost:27017'; // ou o hostname correto do seu serviço mongo no docker\r\n\r\nmongoose.connect(`mongodb://${user}:${password}@${host}/${database}?authSource=admin`, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n}).then(() => console.log('MongoDB connected...'))\r\n    .catch(err => console.log(err));\r\n\r\nconst userRoutes = require('./routes/api');\r\nconst objectifRoutes = require('./routes/objectifRoutes');\r\napp.use('/api/api', userRoutes);\r\napp.use('/ifroutes', objectifRoutes);\r\napp.use('/tabs', tabsRoutes);\r\napp.get('/', (req, res) => res.send('Olá, Mundo!'));\r\n\r\nconst sequelize = new Sequelize(config.development);\r\n\r\napp.listen(port, () => {\r\n    console.log(`Aplicação Express rodando na porta ${port}`);\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/app.js b/backend/app.js
--- a/backend/app.js	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/app.js	(date 1713645827290)
@@ -21,11 +21,11 @@
 }).then(() => console.log('MongoDB connected...'))
     .catch(err => console.log(err));
 
-const userRoutes = require('./routes/api');
+const graphRoutes = require('./routes/graphsRoutes');
 const objectifRoutes = require('./routes/objectifRoutes');
-app.use('/api/api', userRoutes);
-app.use('/ifroutes', objectifRoutes);
-app.use('/tabs', tabsRoutes);
+app.use('/api/graphs', graphRoutes);
+app.use('/api/ifroutes', objectifRoutes);
+app.use('/api/tabs', tabsRoutes);
 app.get('/', (req, res) => res.send('Olá, Mundo!'));
 
 const sequelize = new Sequelize(config.development);
Index: backend/node_modules/sequelize/lib/sequelize.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 3,\r\n  \"sources\": [\"../src/sequelize.js\"],\r\n  \"sourcesContent\": [\"'use strict';\\n\\nconst url = require('url');\\nconst path = require('path');\\nconst pgConnectionString = require('pg-connection-string');\\nconst retry = require('retry-as-promised').default;\\nconst _ = require('lodash');\\n\\nconst Utils = require('./utils');\\nconst Model = require('./model');\\nconst DataTypes = require('./data-types');\\nconst Deferrable = require('./deferrable');\\nconst ModelManager = require('./model-manager');\\nconst Transaction = require('./transaction');\\nconst QueryTypes = require('./query-types');\\nconst TableHints = require('./table-hints');\\nconst IndexHints = require('./index-hints');\\nconst sequelizeErrors = require('./errors');\\nconst Hooks = require('./hooks');\\nconst Association = require('./associations/index');\\nconst Validator = require('./utils/validator-extras').validator;\\nconst Op = require('./operators');\\nconst deprecations = require('./utils/deprecations');\\nconst { QueryInterface } = require('./dialects/abstract/query-interface');\\nconst { BelongsTo } = require('./associations/belongs-to');\\nconst HasOne = require('./associations/has-one');\\nconst { BelongsToMany } = require('./associations/belongs-to-many');\\nconst { HasMany } = require('./associations/has-many');\\nconst { withSqliteForeignKeysOff } = require('./dialects/sqlite/sqlite-utils');\\nconst { injectReplacements } = require('./utils/sql');\\n\\n/**\\n * This is the main class, the entry point to sequelize.\\n */\\nclass Sequelize {\\n  /**\\n   * Instantiate sequelize with name of database, username and password.\\n   *\\n   * @example\\n   * // without password / with blank password\\n   * const sequelize = new Sequelize('database', 'username', null, {\\n   *   dialect: 'mysql'\\n   * })\\n   *\\n   * // with password and options\\n   * const sequelize = new Sequelize('my_database', 'john', 'doe', {\\n   *   dialect: 'postgres'\\n   * })\\n   *\\n   * // with database, username, and password in the options object\\n   * const sequelize = new Sequelize({ database, username, password, dialect: 'mssql' });\\n   *\\n   * // with uri\\n   * const sequelize = new Sequelize('mysql://localhost:3306/database', {})\\n   *\\n   * // option examples\\n   * const sequelize = new Sequelize('database', 'username', 'password', {\\n   *   // the sql dialect of the database\\n   *   // currently supported: 'mysql', 'sqlite', 'postgres', 'mssql'\\n   *   dialect: 'mysql',\\n   *\\n   *   // custom host; default: localhost\\n   *   host: 'my.server.tld',\\n   *   // for postgres, you can also specify an absolute path to a directory\\n   *   // containing a UNIX socket to connect over\\n   *   // host: '/sockets/psql_sockets'.\\n   *\\n   *   // custom port; default: dialect default\\n   *   port: 12345,\\n   *\\n   *   // custom protocol; default: 'tcp'\\n   *   // postgres only, useful for Heroku\\n   *   protocol: null,\\n   *\\n   *   // disable logging or provide a custom logging function; default: console.log\\n   *   logging: false,\\n   *\\n   *   // you can also pass any dialect options to the underlying dialect library\\n   *   // - default is empty\\n   *   // - currently supported: 'mysql', 'postgres', 'mssql'\\n   *   dialectOptions: {\\n   *     socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',\\n   *     supportBigNumbers: true,\\n   *     bigNumberStrings: true\\n   *   },\\n   *\\n   *   // the storage engine for sqlite\\n   *   // - default ':memory:'\\n   *   storage: 'path/to/database.sqlite',\\n   *\\n   *   // disable inserting undefined values as NULL\\n   *   // - default: false\\n   *   omitNull: true,\\n   *\\n   *   // a flag for using a native library or not.\\n   *   // in the case of 'pg' -- set this to true will allow SSL support\\n   *   // - default: false\\n   *   native: true,\\n   *\\n   *   // A flag that defines if connection should be over ssl or not\\n   *   // - default: undefined\\n   *   ssl: true,\\n   *\\n   *   // Specify options, which are used when sequelize.define is called.\\n   *   // The following example:\\n   *   //   define: { timestamps: false }\\n   *   // is basically the same as:\\n   *   //   Model.init(attributes, { timestamps: false });\\n   *   //   sequelize.define(name, attributes, { timestamps: false });\\n   *   // so defining the timestamps for each model will be not necessary\\n   *   define: {\\n   *     underscored: false,\\n   *     freezeTableName: false,\\n   *     charset: 'utf8',\\n   *     dialectOptions: {\\n   *       collate: 'utf8_general_ci'\\n   *     },\\n   *     timestamps: true\\n   *   },\\n   *\\n   *   // similar for sync: you can define this to always force sync for models\\n   *   sync: { force: true },\\n   *\\n   *   // pool configuration used to pool database connections\\n   *   pool: {\\n   *     max: 5,\\n   *     idle: 30000,\\n   *     acquire: 60000,\\n   *   },\\n   *\\n   *   // isolation level of each transaction\\n   *   // defaults to dialect default\\n   *   isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ\\n   * })\\n   *\\n   * @param {string}   [database] The name of the database\\n   * @param {string}   [username=null] The username which is used to authenticate against the database.\\n   * @param {string}   [password=null] The password which is used to authenticate against the database. Supports SQLCipher encryption for SQLite.\\n   * @param {object}   [options={}] An object with options.\\n   * @param {string}   [options.host='localhost'] The host of the relational database.\\n   * @param {number}   [options.port] The port of the relational database.\\n   * @param {string}   [options.username=null] The username which is used to authenticate against the database.\\n   * @param {string}   [options.password=null] The password which is used to authenticate against the database.\\n   * @param {string}   [options.database=null] The name of the database.\\n   * @param {string}   [options.dialect] The dialect of the database you are connecting to. One of mysql, postgres, sqlite, db2, mariadb and mssql.\\n   * @param {string}   [options.dialectModule=null] If specified, use this dialect library. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'require(\\\"pg.js\\\")' here\\n   * @param {string}   [options.dialectModulePath=null] If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify '/path/to/pg.js' here\\n   * @param {object}   [options.dialectOptions] An object of additional options, which are passed directly to the connection library\\n   * @param {string}   [options.storage] Only used by sqlite. Defaults to ':memory:'\\n   * @param {string}   [options.protocol='tcp'] The protocol of the relational database.\\n   * @param {object}   [options.define={}] Default options for model definitions. See {@link Model.init}.\\n   * @param {object}   [options.query={}] Default options for sequelize.query\\n   * @param {string}   [options.schema=null] A schema to use\\n   * @param {object}   [options.set={}] Default options for sequelize.set\\n   * @param {object}   [options.sync={}] Default options for sequelize.sync\\n   * @param {string}   [options.timezone='+00:00'] The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.\\n   * @param {string|boolean} [options.clientMinMessages='warning'] (Deprecated) The PostgreSQL `client_min_messages` session parameter. Set to `false` to not override the database's default.\\n   * @param {boolean}  [options.standardConformingStrings=true] The PostgreSQL `standard_conforming_strings` session parameter. Set to `false` to not set the option. WARNING: Setting this to false may expose vulnerabilities and is not recommended!\\n   * @param {Function} [options.logging=console.log] A function that gets executed every time Sequelize would log something. Function may receive multiple parameters but only first one is printed by `console.log`. To print all values use `(...msg) => console.log(msg)`\\n   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\\n   * @param {boolean}  [options.omitNull=false] A flag that defines if null values should be passed as values to CREATE/UPDATE SQL queries or not.\\n   * @param {boolean}  [options.native=false] A flag that defines if native library shall be used or not. Currently only has an effect for postgres\\n   * @param {boolean}  [options.ssl=undefined] A flag that defines if connection should be over ssl or not\\n   * @param {boolean}  [options.replication=false] Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: `host`, `port`, `username`, `password`, `database`\\n   * @param {object}   [options.pool] sequelize connection pool configuration\\n   * @param {number}   [options.pool.max=5] Maximum number of connection in pool\\n   * @param {number}   [options.pool.min=0] Minimum number of connection in pool\\n   * @param {number}   [options.pool.idle=10000] The maximum time, in milliseconds, that a connection can be idle before being released.\\n   * @param {number}   [options.pool.acquire=60000] The maximum time, in milliseconds, that pool will try to get connection before throwing error\\n   * @param {number}   [options.pool.evict=1000] The time interval, in milliseconds, after which sequelize-pool will remove idle connections.\\n   * @param {Function} [options.pool.validate] A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected\\n   * @param {number}   [options.pool.maxUses=Infinity] The number of times a connection can be used before discarding it for a replacement, [`used for eventual cluster rebalancing`](https://github.com/sequelize/sequelize-pool).\\n   * @param {boolean}  [options.quoteIdentifiers=true] Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of them.  WARNING: Setting this to false may expose vulnerabilities and is not recommended!\\n   * @param {string}   [options.transactionType='DEFERRED'] Set the default transaction type. See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\\n   * @param {string}   [options.isolationLevel] Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options.\\n   * @param {object}   [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\\n   * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.\\n   * @param {number}   [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.\\n   * @param {boolean}  [options.typeValidation=false] Run built-in type validators on insert and update, and select with where clause, e.g. validate that arguments passed to integer fields are integer-like.\\n   * @param {object}   [options.operatorsAliases] String based operator alias. Pass object to limit set of aliased operators.\\n   * @param {object}   [options.hooks] An object of global hook functions that are called before and after certain lifecycle events. Global hooks will run after any model-specific hooks defined for the same event (See `Sequelize.Model.init()` for a list).  Additionally, `beforeConnect()`, `afterConnect()`, `beforeDisconnect()`, and `afterDisconnect()` hooks may be defined here.\\n   * @param {boolean}  [options.minifyAliases=false] A flag that defines if aliases should be minified (mostly useful to avoid Postgres alias character limit of 64)\\n   * @param {boolean}  [options.logQueryParameters=false] A flag that defines if show bind parameters in log.\\n   */\\n  constructor(database, username, password, options) {\\n    let config;\\n\\n    if (arguments.length === 1 && typeof database === 'object') {\\n      // new Sequelize({ ... options })\\n      options = database;\\n      config = _.pick(options, 'host', 'port', 'database', 'username', 'password');\\n    } else if (arguments.length === 1 && typeof database === 'string' || arguments.length === 2 && typeof username === 'object') {\\n      // new Sequelize(URI, { ... options })\\n\\n      config = {};\\n      options = username || {};\\n\\n      const urlParts = url.parse(arguments[0], true);\\n\\n      options.dialect = urlParts.protocol.replace(/:$/, '');\\n      options.host = urlParts.hostname;\\n\\n      if (options.dialect === 'sqlite' && urlParts.pathname && !urlParts.pathname.startsWith('/:memory')) {\\n        const storagePath = path.join(options.host, urlParts.pathname);\\n        options.storage = path.resolve(options.storage || storagePath);\\n      }\\n\\n      if (urlParts.pathname) {\\n        config.database = urlParts.pathname.replace(/^\\\\//, '');\\n      }\\n\\n      if (urlParts.port) {\\n        options.port = urlParts.port;\\n      }\\n\\n      if (urlParts.auth) {\\n        const authParts = urlParts.auth.split(':');\\n\\n        config.username = authParts[0];\\n\\n        if (authParts.length > 1)\\n          config.password = authParts.slice(1).join(':');\\n      }\\n\\n      if (urlParts.query) {\\n        // Allow host query argument to override the url host.\\n        // Enables specifying domain socket hosts which cannot be specified via the typical\\n        // host part of a url.\\n        if (urlParts.query.host) {\\n          options.host = urlParts.query.host;\\n        }\\n\\n        if (options.dialectOptions) {\\n          Object.assign(options.dialectOptions, urlParts.query);\\n        } else {\\n          options.dialectOptions = urlParts.query;\\n          if (urlParts.query.options) {\\n            try {\\n              const o = JSON.parse(urlParts.query.options);\\n              options.dialectOptions.options = o;\\n            } catch (e) {\\n              // Nothing to do, string is not a valid JSON\\n              // an thus does not need any further processing\\n            }\\n          }\\n        }\\n      }\\n\\n      // For postgres, we can use this helper to load certs directly from the\\n      // connection string.\\n      if (['postgres', 'postgresql'].includes(options.dialect)) {\\n        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));\\n      }\\n    } else {\\n      // new Sequelize(database, username, password, { ... options })\\n      options = options || {};\\n      config = { database, username, password };\\n    }\\n\\n    Sequelize.runHooks('beforeInit', config, options);\\n\\n    this.options = {\\n      dialect: null,\\n      dialectModule: null,\\n      dialectModulePath: null,\\n      host: 'localhost',\\n      protocol: 'tcp',\\n      define: {},\\n      query: {},\\n      sync: {},\\n      timezone: '+00:00',\\n      standardConformingStrings: true,\\n      // eslint-disable-next-line no-console\\n      logging: console.log,\\n      omitNull: false,\\n      native: false,\\n      replication: false,\\n      ssl: undefined,\\n      pool: {},\\n      quoteIdentifiers: true,\\n      hooks: {},\\n      retry: {\\n        max: 5,\\n        match: [\\n          'SQLITE_BUSY: database is locked'\\n        ]\\n      },\\n      transactionType: Transaction.TYPES.DEFERRED,\\n      isolationLevel: null,\\n      databaseVersion: 0,\\n      typeValidation: false,\\n      benchmark: false,\\n      minifyAliases: false,\\n      logQueryParameters: false,\\n      attributeBehavior: 'throw',\\n      ...options\\n    };\\n\\n    if (!this.options.dialect) {\\n      throw new Error('Dialect needs to be explicitly supplied as of v4.0.0');\\n    }\\n\\n    if (this.options.dialect === 'postgresql') {\\n      this.options.dialect = 'postgres';\\n    }\\n\\n    if (this.options.dialect === 'sqlite' && this.options.timezone !== '+00:00') {\\n      throw new Error('Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.');\\n    }\\n\\n    if (this.options.logging === true) {\\n      deprecations.noTrueLogging();\\n      // eslint-disable-next-line no-console\\n      this.options.logging = console.log;\\n    }\\n\\n    this._setupHooks(options.hooks);\\n\\n    this.config = {\\n      database: config.database || this.options.database,\\n      username: config.username || this.options.username,\\n      password: config.password || this.options.password || null,\\n      host: config.host || this.options.host,\\n      port: config.port || this.options.port,\\n      pool: this.options.pool,\\n      protocol: this.options.protocol,\\n      native: this.options.native,\\n      ssl: this.options.ssl,\\n      replication: this.options.replication,\\n      dialectModule: this.options.dialectModule,\\n      dialectModulePath: this.options.dialectModulePath,\\n      keepDefaultTimezone: this.options.keepDefaultTimezone,\\n      dialectOptions: this.options.dialectOptions\\n    };\\n\\n    let Dialect;\\n    // Requiring the dialect in a switch-case to keep the\\n    // require calls static. (Browserify fix)\\n    switch (this.getDialect()) {\\n      case 'mariadb':\\n        Dialect = require('./dialects/mariadb');\\n        break;\\n      case 'mssql':\\n        Dialect = require('./dialects/mssql');\\n        break;\\n      case 'mysql':\\n        Dialect = require('./dialects/mysql');\\n        break;\\n      case 'oracle':\\n        Dialect = require('./dialects/oracle');\\n        break;\\n      case 'postgres':\\n        Dialect = require('./dialects/postgres');\\n        break;\\n      case 'sqlite':\\n        Dialect = require('./dialects/sqlite');\\n        break;\\n      case 'db2':\\n        Dialect = require('./dialects/db2');\\n        break;\\n      case 'snowflake':\\n        Dialect = require('./dialects/snowflake');\\n        break;\\n      default:\\n        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite.`);\\n    }\\n\\n    this.dialect = new Dialect(this);\\n    this.dialect.queryGenerator.typeValidation = options.typeValidation;\\n\\n    if (_.isPlainObject(this.options.operatorsAliases)) {\\n      deprecations.noStringOperators();\\n      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);\\n    } else if (typeof this.options.operatorsAliases === 'boolean') {\\n      deprecations.noBoolOperatorAliases();\\n    }\\n\\n    this.queryInterface = this.dialect.queryInterface;\\n\\n    /**\\n     * Models are stored here under the name given to `sequelize.define`\\n     */\\n    this.models = {};\\n    this.modelManager = new ModelManager(this);\\n    this.connectionManager = this.dialect.connectionManager;\\n\\n    Sequelize.runHooks('afterInit', this);\\n  }\\n\\n  /**\\n   * Refresh data types and parsers.\\n   *\\n   * @private\\n   */\\n  refreshTypes() {\\n    this.connectionManager.refreshTypeParser(DataTypes);\\n  }\\n\\n  /**\\n   * Returns the specified dialect.\\n   *\\n   * @returns {string} The specified dialect.\\n   */\\n  getDialect() {\\n    return this.options.dialect;\\n  }\\n\\n  /**\\n   * Returns the database name.\\n   *\\n   * @returns {string} The database name.\\n   */\\n  getDatabaseName() {\\n    return this.config.database;\\n  }\\n\\n  /**\\n   * Returns an instance of QueryInterface.\\n   *\\n   * @returns {QueryInterface} An instance (singleton) of QueryInterface.\\n   */\\n  getQueryInterface() {\\n    return this.queryInterface;\\n  }\\n\\n  /**\\n   * Define a new model, representing a table in the database.\\n   *\\n   * The table columns are defined by the object that is given as the second argument. Each key of the object represents a column\\n   *\\n   * @param {string} modelName The name of the model. The model will be stored in `sequelize.models` under this name\\n   * @param {object} attributes An object, where each attribute is a column of the table. See {@link Model.init}\\n   * @param {object} [options] These options are merged with the default define options provided to the Sequelize constructor and passed to Model.init()\\n   *\\n   * @see\\n   * {@link Model.init} for a more comprehensive specification of the `options` and `attributes` objects.\\n   * @see\\n   * <a href=\\\"/master/manual/model-basics.html\\\">Model Basics</a> guide\\n   *\\n   * @returns {Model} Newly defined model\\n   *\\n   * @example\\n   * sequelize.define('modelName', {\\n   *   columnA: {\\n   *       type: Sequelize.BOOLEAN,\\n   *       validate: {\\n   *         is: [\\\"[a-z]\\\",'i'],        // will only allow letters\\n   *         max: 23,                  // only allow values <= 23\\n   *         isIn: {\\n   *           args: [['en', 'zh']],\\n   *           msg: \\\"Must be English or Chinese\\\"\\n   *         }\\n   *       },\\n   *       field: 'column_a'\\n   *   },\\n   *   columnB: Sequelize.STRING,\\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\\n   * });\\n   *\\n   * sequelize.models.modelName // The model will now be available in models under the name given to define\\n   */\\n  define(modelName, attributes, options = {}) {\\n    options.modelName = modelName;\\n    options.sequelize = this;\\n\\n    const model = class extends Model {};\\n\\n    model.init(attributes, options);\\n\\n    return model;\\n  }\\n\\n  /**\\n   * Fetch a Model which is already defined\\n   *\\n   * @param {string} modelName The name of a model defined with Sequelize.define\\n   *\\n   * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)\\n   * @returns {Model} Specified model\\n   */\\n  model(modelName) {\\n    if (!this.isDefined(modelName)) {\\n      throw new Error(`${modelName} has not been defined`);\\n    }\\n\\n    return this.modelManager.getModel(modelName);\\n  }\\n\\n  /**\\n   * Checks whether a model with the given name is defined\\n   *\\n   * @param {string} modelName The name of a model defined with Sequelize.define\\n   *\\n   * @returns {boolean} Returns true if model is already defined, otherwise false\\n   */\\n  isDefined(modelName) {\\n    return !!this.modelManager.models.find(model => model.name === modelName);\\n  }\\n\\n  /**\\n   * Execute a query on the DB, optionally bypassing all the Sequelize goodness.\\n   *\\n   * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.\\n   *\\n   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:\\n   *\\n   * ```js\\n   * const [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring\\n   *\\n   * const results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring\\n   * ```\\n   *\\n   * @param {string}          sql\\n   * @param {object}          [options={}] Query options.\\n   * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result\\n   * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under\\n   * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.\\n   * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified\\n   * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row\\n   * @param {object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.\\n   * @param {object|Array}    [options.bind] Either an object of named bind parameter in the format `_param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.\\n   * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.\\n   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.\\n   * @param {Model}           [options.instance] A sequelize model instance whose Model is to be used to build the query result\\n   * @param {typeof Model}    [options.model] A sequelize model used to build the returned model instances\\n   * @param {object}          [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\\n   * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.\\n   * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.\\n   * @param {string}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\\n   * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)\\n   * @param {boolean}         [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.\\n   * @param {object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.\\n   * @param {boolean}         [options.rawErrors=false] Set to `true` to cause errors coming from the underlying connection/database library to be propagated unmodified and unformatted. Else, the default behavior (=false) is to reinterpret errors as sequelize.errors.BaseError objects.\\n   *\\n   * @returns {Promise}\\n   *\\n   * @see {@link Model.build} for more information about instance option.\\n   */\\n\\n  async query(sql, options) {\\n    options = { ...this.options.query, ...options };\\n\\n    if (options.instance && !options.model) {\\n      options.model = options.instance.constructor;\\n    }\\n\\n    if (!options.instance && !options.model) {\\n      options.raw = true;\\n    }\\n\\n    // map raw fields to model attributes\\n    if (options.mapToModel) {\\n      options.fieldMap = _.get(options, 'model.fieldAttributeMap', {});\\n    }\\n\\n    options = _.defaults(options, {\\n      // eslint-disable-next-line no-console\\n      logging: Object.prototype.hasOwnProperty.call(this.options, 'logging') ? this.options.logging : console.log,\\n      searchPath: Object.prototype.hasOwnProperty.call(this.options, 'searchPath') ? this.options.searchPath : 'DEFAULT'\\n    });\\n\\n    if (!options.type) {\\n      if (options.model || options.nest || options.plain) {\\n        options.type = QueryTypes.SELECT;\\n      } else {\\n        options.type = QueryTypes.RAW;\\n      }\\n    }\\n\\n    //if dialect doesn't support search_path or dialect option\\n    //to prepend searchPath is not true delete the searchPath option\\n    if (\\n      !this.dialect.supports.searchPath ||\\n      !this.options.dialectOptions ||\\n      !this.options.dialectOptions.prependSearchPath ||\\n      options.supportsSearchPath === false\\n    ) {\\n      delete options.searchPath;\\n    } else if (!options.searchPath) {\\n      //if user wants to always prepend searchPath (dialectOptions.preprendSearchPath = true)\\n      //then set to DEFAULT if none is provided\\n      options.searchPath = 'DEFAULT';\\n    }\\n\\n    if (typeof sql === 'object') {\\n      if (sql.values !== undefined) {\\n        if (options.replacements !== undefined) {\\n          throw new Error('Both `sql.values` and `options.replacements` cannot be set at the same time');\\n        }\\n        options.replacements = sql.values;\\n      }\\n\\n      if (sql.bind !== undefined) {\\n        if (options.bind !== undefined) {\\n          throw new Error('Both `sql.bind` and `options.bind` cannot be set at the same time');\\n        }\\n        options.bind = sql.bind;\\n      }\\n\\n      if (sql.query !== undefined) {\\n        sql = sql.query;\\n      }\\n    }\\n\\n    sql = sql.trim();\\n\\n    if (options.replacements && options.bind) {\\n      throw new Error('Both `replacements` and `bind` cannot be set at the same time');\\n    }\\n\\n    if (options.replacements) {\\n      sql = injectReplacements(sql, this.dialect, options.replacements);\\n    }\\n\\n    let bindParameters;\\n\\n    if (options.bind) {\\n      [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);\\n    }\\n\\n    const checkTransaction = () => {\\n      if (options.transaction && options.transaction.finished && !options.completesTransaction) {\\n        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);\\n        error.sql = sql;\\n        throw error;\\n      }\\n    };\\n\\n    const retryOptions = { ...this.options.retry, ...options.retry };\\n\\n    return retry(async () => {\\n      if (options.transaction === undefined && Sequelize._cls) {\\n        options.transaction = Sequelize._cls.get('transaction');\\n      }\\n\\n      checkTransaction();\\n\\n      const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));\\n\\n      if (this.options.dialect === 'db2' && options.alter) {\\n        if (options.alter.drop === false) {\\n          connection.dropTable = false;\\n        }\\n      }\\n      const query = new this.dialect.Query(connection, this, options);\\n\\n      try {\\n        await this.runHooks('beforeQuery', options, query);\\n        checkTransaction();\\n        return await query.run(sql, bindParameters);\\n      } finally {\\n        await this.runHooks('afterQuery', options, query);\\n        if (!options.transaction) {\\n          this.connectionManager.releaseConnection(connection);\\n        }\\n      }\\n    }, retryOptions);\\n  }\\n\\n  /**\\n   * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\\n   * Only works for MySQL or MariaDB.\\n   *\\n   * @param {object}        variables Object with multiple variables.\\n   * @param {object}        [options] query options.\\n   * @param {Transaction}   [options.transaction] The transaction that the query should be executed under\\n   *\\n   * @memberof Sequelize\\n   *\\n   * @returns {Promise}\\n   */\\n  async set(variables, options) {\\n\\n    // Prepare options\\n    options = { ...this.options.set, ...typeof options === 'object' && options };\\n\\n    if (!['mysql', 'mariadb'].includes(this.options.dialect)) {\\n      throw new Error('sequelize.set is only supported for mysql or mariadb');\\n    }\\n    if (!options.transaction || !(options.transaction instanceof Transaction) ) {\\n      throw new TypeError('options.transaction is required');\\n    }\\n\\n    // Override some options, since this isn't a SELECT\\n    options.raw = true;\\n    options.plain = true;\\n    options.type = 'SET';\\n\\n    // Generate SQL Query\\n    const query =\\n      `SET ${\\n        _.map(variables, (v, k) => `@${k} := ${typeof v === 'string' ? `\\\"${v}\\\"` : v}`).join(', ')}`;\\n\\n    return await this.query(query, options);\\n  }\\n\\n  /**\\n   * Escape value.\\n   *\\n   * @param {string} value string value to escape\\n   *\\n   * @returns {string}\\n   */\\n  escape(value) {\\n    return this.dialect.queryGenerator.escape(value);\\n  }\\n\\n  /**\\n   * Create a new database schema.\\n   *\\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\\n   * not a database table. In mysql and sqlite, this command will do nothing.\\n   *\\n   * @see\\n   * {@link Model.schema}\\n   *\\n   * @param {string} schema Name of the schema\\n   * @param {object} [options={}] query options\\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\\n   *\\n   * @returns {Promise}\\n   */\\n  async createSchema(schema, options) {\\n    return await this.getQueryInterface().createSchema(schema, options);\\n  }\\n\\n  /**\\n   * Show all defined schemas\\n   *\\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\\n   * not a database table. In mysql and sqlite, this will show all tables.\\n   *\\n   * @param {object} [options={}] query options\\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\\n   *\\n   * @returns {Promise}\\n   */\\n  async showAllSchemas(options) {\\n    return await this.getQueryInterface().showAllSchemas(options);\\n  }\\n\\n  /**\\n   * Drop a single schema\\n   *\\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\\n   * not a database table. In mysql and sqlite, this drop a table matching the schema name\\n   *\\n   * @param {string} schema Name of the schema\\n   * @param {object} [options={}] query options\\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\\n   *\\n   * @returns {Promise}\\n   */\\n  async dropSchema(schema, options) {\\n    return await this.getQueryInterface().dropSchema(schema, options);\\n  }\\n\\n  /**\\n   * Drop all schemas.\\n   *\\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\\n   * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.\\n   *\\n   * @param {object} [options={}] query options\\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\\n   *\\n   * @returns {Promise}\\n   */\\n  async dropAllSchemas(options) {\\n    return await this.getQueryInterface().dropAllSchemas(options);\\n  }\\n\\n  /**\\n   * Sync all defined models to the DB.\\n   *\\n   * @param {object} [options={}] sync options\\n   * @param {boolean} [options.force=false] If force is true, each Model will run `DROP TABLE IF EXISTS`, before it tries to create its own table\\n   * @param {RegExp} [options.match] Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code\\n   * @param {boolean|Function} [options.logging=console.log] A function that logs sql queries, or false for no logging\\n   * @param {string} [options.schema='public'] The schema that the tables should be created in. This can be overridden for each table in sequelize.define\\n   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\\n   * @param {boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforeBulkSync, afterBulkSync hooks will be called\\n   * @param {boolean|object} [options.alter=false] Alters tables to fit models. Provide an object for additional configuration. Not recommended for production use. If not further configured deletes data in columns that were removed or had their type changed in the model.\\n   * @param {boolean} [options.alter.drop=true] Prevents any drop statements while altering a table when set to `false`\\n   *\\n   * @returns {Promise}\\n   */\\n  async sync(options) {\\n    options = {\\n      ...this.options,\\n      ...this.options.sync,\\n      ...options,\\n      hooks: options ? options.hooks !== false : true\\n    };\\n\\n    if (options.match) {\\n      if (!options.match.test(this.config.database)) {\\n        throw new Error(`Database \\\"${this.config.database}\\\" does not match sync match parameter \\\"${options.match}\\\"`);\\n      }\\n    }\\n\\n    if (options.hooks) {\\n      await this.runHooks('beforeBulkSync', options);\\n    }\\n\\n    if (options.force) {\\n      await this.drop(options);\\n    }\\n\\n    // no models defined, just authenticate\\n    if (this.modelManager.models.length === 0) {\\n      await this.authenticate(options);\\n    } else {\\n      const models = this.modelManager.getModelsTopoSortedByForeignKey();\\n      if (models == null) {\\n        return this._syncModelsWithCyclicReferences(options);\\n      }\\n\\n      // reverse to start with the one model that does not depend on anything\\n      models.reverse();\\n\\n      // Topologically sort by foreign key constraints to give us an appropriate\\n      // creation order\\n      for (const model of models) {\\n        await model.sync(options);\\n      }\\n    }\\n\\n    if (options.hooks) {\\n      await this.runHooks('afterBulkSync', options);\\n    }\\n\\n    return this;\\n  }\\n\\n  /**\\n   * Used instead of sync() when two models reference each-other, so their foreign keys cannot be created immediately.\\n   *\\n   * @param {object} options - sync options\\n   * @private\\n   */\\n  async _syncModelsWithCyclicReferences(options) {\\n    if (this.dialect.name === 'sqlite') {\\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\\n      await withSqliteForeignKeysOff(this, options, async () => {\\n        for (const model of this.modelManager.models) {\\n          await model.sync(options);\\n        }\\n      });\\n\\n      return;\\n    }\\n\\n    // create all tables, but don't create foreign key constraints\\n    for (const model of this.modelManager.models) {\\n      await model.sync({ ...options, withoutForeignKeyConstraints: true });\\n    }\\n\\n    // add foreign key constraints\\n    for (const model of this.modelManager.models) {\\n      await model.sync({ ...options, force: false, alter: true });\\n    }\\n  }\\n\\n  /**\\n   * Truncate all tables defined through the sequelize models.\\n   * This is done by calling `Model.truncate()` on each model.\\n   *\\n   * @param {object} [options] The options passed to Model.destroy in addition to truncate\\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\\n   * @returns {Promise}\\n   *\\n   * @see\\n   * {@link Model.truncate} for more information\\n   */\\n  async truncate(options) {\\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\\n    const models = sortedModels || this.modelManager.models;\\n    const hasCyclicDependencies = sortedModels == null;\\n\\n    // we have cyclic dependencies, cascade must be enabled.\\n    if (hasCyclicDependencies && (!options || !options.cascade)) {\\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \\\"cascade\\\" option to be able to delete rows from models that have cyclic references.');\\n    }\\n\\n    // TODO [>=7]: throw if options.cascade is specified but unsupported in the given dialect.\\n    if (hasCyclicDependencies && this.dialect.name === 'sqlite') {\\n      // Workaround: SQLite does not support options.cascade, but we can disable its foreign key constraints while we\\n      // truncate all tables.\\n      return withSqliteForeignKeysOff(this, options, async () => {\\n        await Promise.all(models.map(model => model.truncate(options)));\\n      });\\n    }\\n\\n    if (options && options.cascade) {\\n      for (const model of models) await model.truncate(options);\\n    } else {\\n      await Promise.all(models.map(model => model.truncate(options)));\\n    }\\n  }\\n\\n  /**\\n   * Drop all tables defined through this sequelize instance.\\n   * This is done by calling Model.drop on each model.\\n   *\\n   * @see\\n   * {@link Model.drop} for options\\n   *\\n   * @param {object} [options] The options passed to each call to Model.drop\\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\\n   *\\n   * @returns {Promise}\\n   */\\n  async drop(options) {\\n    // if 'cascade' is specified, we don't have to worry about cyclic dependencies.\\n    if (options && options.cascade) {\\n      for (const model of this.modelManager.models) {\\n        await model.drop(options);\\n      }\\n    }\\n\\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\\n\\n    // no cyclic dependency between models, we can delete them in an order that will not cause an error.\\n    if (sortedModels) {\\n      for (const model of sortedModels) {\\n        await model.drop(options);\\n      }\\n    }\\n\\n    if (this.dialect.name === 'sqlite') {\\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\\n      await withSqliteForeignKeysOff(this, options, async () => {\\n        for (const model of this.modelManager.models) {\\n          await model.drop(options);\\n        }\\n      });\\n\\n      return;\\n    }\\n\\n    // has cyclic dependency: we first remove each foreign key, then delete each model.\\n    for (const model of this.modelManager.models) {\\n      const tableName = model.getTableName();\\n      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);\\n\\n      await Promise.all(foreignKeys.map(foreignKey => {\\n        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);\\n      }));\\n    }\\n\\n    for (const model of this.modelManager.models) {\\n      await model.drop(options);\\n    }\\n  }\\n\\n  /**\\n   * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.\\n   *\\n   * @param {object} [options={}] query options\\n   *\\n   * @returns {Promise}\\n   */\\n  async authenticate(options) {\\n    options = {\\n      raw: true,\\n      plain: true,\\n      type: QueryTypes.SELECT,\\n      ...options\\n    };\\n\\n    await this.query(this.dialect.queryGenerator.authTestQuery(), options);\\n\\n    return;\\n  }\\n\\n  async databaseVersion(options) {\\n    return await this.getQueryInterface().databaseVersion(options);\\n  }\\n\\n  /**\\n   * Get the fn for random based on the dialect\\n   *\\n   * @returns {Sequelize.fn}\\n   */\\n  random() {\\n    if (['postgres', 'sqlite', 'snowflake'].includes(this.getDialect())) {\\n      return this.fn('RANDOM');\\n    }\\n    return this.fn('RAND');\\n  }\\n\\n  /**\\n   * Creates an object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\\n   * If you want to refer to columns in your function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and not a strings.\\n   *\\n   * @see\\n   * {@link Model.findAll}\\n   * @see\\n   * {@link Sequelize.define}\\n   * @see\\n   * {@link Sequelize.col}\\n   *\\n   * @param {string} fn The function you want to call\\n   * @param {any} args All further arguments will be passed as arguments to the function\\n   *\\n   * @since v2.0.0-dev3\\n   * @memberof Sequelize\\n   * @returns {Sequelize.fn}\\n   *\\n   * @example <caption>Convert a user's username to upper case</caption>\\n   * instance.update({\\n   *   username: sequelize.fn('upper', sequelize.col('username'))\\n   * });\\n   */\\n  static fn(fn, ...args) {\\n    return new Utils.Fn(fn, args);\\n  }\\n\\n  /**\\n   * Creates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.\\n   *\\n   * @see\\n   * {@link Sequelize#fn}\\n   *\\n   * @param {string} col The name of the column\\n   * @since v2.0.0-dev3\\n   * @memberof Sequelize\\n   *\\n   * @returns {Sequelize.col}\\n   */\\n  static col(col) {\\n    return new Utils.Col(col);\\n  }\\n\\n  /**\\n   * Creates an object representing a call to the cast function.\\n   *\\n   * @param {any} val The value to cast\\n   * @param {string} type The type to cast it to\\n   * @since v2.0.0-dev3\\n   * @memberof Sequelize\\n   *\\n   * @returns {Sequelize.cast}\\n   */\\n  static cast(val, type) {\\n    return new Utils.Cast(val, type);\\n  }\\n\\n  /**\\n   * Creates an object representing a literal, i.e. something that will not be escaped.\\n   *\\n   * @param {any} val literal value\\n   * @since v2.0.0-dev3\\n   * @memberof Sequelize\\n   *\\n   * @returns {Sequelize.literal}\\n   */\\n  static literal(val) {\\n    return new Utils.Literal(val);\\n  }\\n\\n  /**\\n   * An AND query\\n   *\\n   * @see\\n   * {@link Model.findAll}\\n   *\\n   * @param {...string|object} args Each argument will be joined by AND\\n   * @since v2.0.0-dev3\\n   * @memberof Sequelize\\n   *\\n   * @returns {Sequelize.and}\\n   */\\n  static and(...args) {\\n    return { [Op.and]: args };\\n  }\\n\\n  /**\\n   * An OR query\\n   *\\n   * @see\\n   * {@link Model.findAll}\\n   *\\n   * @param {...string|object} args Each argument will be joined by OR\\n   * @since v2.0.0-dev3\\n   * @memberof Sequelize\\n   *\\n   * @returns {Sequelize.or}\\n   */\\n  static or(...args) {\\n    return { [Op.or]: args };\\n  }\\n\\n  /**\\n   * Creates an object representing nested where conditions for postgres/sqlite/mysql json data-type.\\n   *\\n   * @see\\n   * {@link Model.findAll}\\n   *\\n   * @param {string|object} conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres/sqlite/mysql json syntax.\\n   * @param {string|number|boolean} [value] An optional value to compare against. Produces a string of the form \\\"<json path> = '<value>'\\\".\\n   * @memberof Sequelize\\n   *\\n   * @returns {Sequelize.json}\\n   */\\n  static json(conditionsOrPath, value) {\\n    return new Utils.Json(conditionsOrPath, value);\\n  }\\n\\n  /**\\n   * A way of specifying attr = condition.\\n   *\\n   * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id` or `Model.rawAttributes.name`). The\\n   * attribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)\\n   *\\n   * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your string to be escaped, use `sequelize.literal`.\\n   *\\n   * @see\\n   * {@link Model.findAll}\\n   *\\n   * @param {object} attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the POJO syntax\\n   * @param {symbol} [comparator='Op.eq'] operator\\n   * @param {string|object} logic The condition. Can be both a simply type, or a further condition (`or`, `and`, `.literal` etc.)\\n   * @since v2.0.0-dev3\\n   */\\n  static where(attr, comparator, logic) {\\n    return new Utils.Where(attr, comparator, logic);\\n  }\\n\\n  /**\\n   * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction @see {@link Transaction}\\n   *\\n   * If you have [CLS](https://github.com/Jeff-Lewis/cls-hooked) enabled, the transaction will automatically be passed to any query that runs within the callback\\n   *\\n   * @example\\n   *\\n   * try {\\n   *   const transaction = await sequelize.transaction();\\n   *   const user = await User.findOne(..., { transaction });\\n   *   await user.update(..., { transaction });\\n   *   await transaction.commit();\\n   * } catch {\\n   *   await transaction.rollback()\\n   * }\\n   *\\n   * @example <caption>A syntax for automatically committing or rolling back based on the promise chain resolution is also supported</caption>\\n   *\\n   * try {\\n   *   await sequelize.transaction(transaction => { // Note that we pass a callback rather than awaiting the call with no arguments\\n   *     const user = await User.findOne(..., {transaction});\\n   *     await user.update(..., {transaction});\\n   *   });\\n   *   // Committed\\n   * } catch(err) {\\n   *   // Rolled back\\n   *   console.error(err);\\n   * }\\n   * @example <caption>To enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:</caption>\\n   *\\n   * const cls = require('cls-hooked');\\n   * const namespace = cls.createNamespace('....');\\n   * const Sequelize = require('sequelize');\\n   * Sequelize.useCLS(namespace);\\n   *\\n   * // Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace\\n   *\\n   * @param {object}   [options] Transaction options\\n   * @param {string}   [options.type='DEFERRED'] See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\\n   * @param {string}   [options.isolationLevel] See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options\\n   * @param {string}   [options.deferrable] Sets the constraints to be deferred or immediately checked. See `Sequelize.Deferrable`. PostgreSQL Only\\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\\n   * @param {Function} [autoCallback] The callback is called with the transaction object, and should return a promise. If the promise is resolved, the transaction commits; if the promise rejects, the transaction rolls back\\n   *\\n   * @returns {Promise}\\n   */\\n  async transaction(options, autoCallback) {\\n    if (typeof options === 'function') {\\n      autoCallback = options;\\n      options = undefined;\\n    }\\n\\n    const transaction = new Transaction(this, options);\\n\\n    if (!autoCallback) {\\n      await transaction.prepareEnvironment(/* cls */ false);\\n      return transaction;\\n    }\\n\\n    // autoCallback provided\\n    return Sequelize._clsRun(async () => {\\n      await transaction.prepareEnvironment(/* cls */ true);\\n\\n      let result;\\n      try {\\n        result = await autoCallback(transaction);\\n      } catch (err) {\\n        try {\\n          await transaction.rollback();\\n        } catch (ignore) {\\n          // ignore, because 'rollback' will already print the error before killing the connection\\n        }\\n\\n        throw err;\\n      }\\n\\n      await transaction.commit();\\n      return result;\\n    });\\n  }\\n\\n  /**\\n   * Use CLS (Continuation Local Storage) with Sequelize. With Continuation\\n   * Local Storage, all queries within the transaction callback will\\n   * automatically receive the transaction object.\\n   *\\n   * CLS namespace provided is stored as `Sequelize._cls`\\n   *\\n   * @param {object} ns CLS namespace\\n   * @returns {object} Sequelize constructor\\n   */\\n  static useCLS(ns) {\\n    // check `ns` is valid CLS namespace\\n    if (!ns || typeof ns !== 'object' || typeof ns.bind !== 'function' || typeof ns.run !== 'function') throw new Error('Must provide CLS namespace');\\n\\n    // save namespace as `Sequelize._cls`\\n    Sequelize._cls = ns;\\n\\n    // return Sequelize for chaining\\n    return this;\\n  }\\n\\n  /**\\n   * Run function in CLS context.\\n   * If no CLS context in use, just runs the function normally\\n   *\\n   * @private\\n   * @param {Function} fn Function to run\\n   * @returns {*} Return value of function\\n   */\\n  static _clsRun(fn) {\\n    const ns = Sequelize._cls;\\n    if (!ns) return fn();\\n\\n    let res;\\n    ns.run(context => res = fn(context));\\n    return res;\\n  }\\n\\n  log(...args) {\\n    let options;\\n\\n    const last = _.last(args);\\n\\n    if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, 'logging')) {\\n      options = last;\\n\\n      // remove options from set of logged arguments if options.logging is equal to console.log\\n      // eslint-disable-next-line no-console\\n      if (options.logging === console.log) {\\n        args.splice(args.length - 1, 1);\\n      }\\n    } else {\\n      options = this.options;\\n    }\\n\\n    if (options.logging) {\\n      if (options.logging === true) {\\n        deprecations.noTrueLogging();\\n        // eslint-disable-next-line no-console\\n        options.logging = console.log;\\n      }\\n\\n      // second argument is sql-timings, when benchmarking option enabled\\n      // eslint-disable-next-line no-console\\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {\\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\\n      }\\n\\n      options.logging(...args);\\n    }\\n  }\\n\\n  /**\\n   * Close all connections used by this sequelize instance, and free all references so the instance can be garbage collected.\\n   *\\n   * Normally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want\\n   * to garbage collect some of them.\\n   *\\n   * @returns {Promise}\\n   */\\n  close() {\\n    return this.connectionManager.close();\\n  }\\n\\n  normalizeDataType(Type) {\\n    let type = typeof Type === 'function' ? new Type() : Type;\\n    const dialectTypes = this.dialect.DataTypes || {};\\n\\n    if (dialectTypes[type.key]) {\\n      type = dialectTypes[type.key].extend(type);\\n    }\\n\\n    if (type instanceof DataTypes.ARRAY) {\\n      if (!type.type) {\\n        throw new Error('ARRAY is missing type definition for its values.');\\n      }\\n      if (dialectTypes[type.type.key]) {\\n        type.type = dialectTypes[type.type.key].extend(type.type);\\n      }\\n    }\\n\\n    return type;\\n  }\\n\\n  normalizeAttribute(attribute) {\\n    if (!_.isPlainObject(attribute)) {\\n      attribute = { type: attribute };\\n    }\\n\\n    if (!attribute.type) return attribute;\\n\\n    attribute.type = this.normalizeDataType(attribute.type);\\n\\n    if (Object.prototype.hasOwnProperty.call(attribute, 'defaultValue')) {\\n      if (typeof attribute.defaultValue === 'function' &&\\n        [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)\\n      ) {\\n        attribute.defaultValue = new attribute.defaultValue();\\n      }\\n    }\\n\\n    if (attribute.type instanceof DataTypes.ENUM) {\\n      // The ENUM is a special case where the type is an object containing the values\\n      if (attribute.values) {\\n        attribute.type.values = attribute.type.options.values = attribute.values;\\n      } else {\\n        attribute.values = attribute.type.values;\\n      }\\n\\n      if (!attribute.values.length) {\\n        throw new Error('Values for ENUM have not been defined.');\\n      }\\n    }\\n\\n    return attribute;\\n  }\\n}\\n\\n// Aliases\\nSequelize.prototype.fn = Sequelize.fn;\\nSequelize.prototype.col = Sequelize.col;\\nSequelize.prototype.cast = Sequelize.cast;\\nSequelize.prototype.literal = Sequelize.literal;\\nSequelize.prototype.and = Sequelize.and;\\nSequelize.prototype.or = Sequelize.or;\\nSequelize.prototype.json = Sequelize.json;\\nSequelize.prototype.where = Sequelize.where;\\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\\n\\n/**\\n * Sequelize version number.\\n */\\n// To avoid any errors on startup when this field is unused, only resolve it as needed.\\n// this is to prevent any potential issues on startup with unusual environments (eg, bundled code)\\n// where relative paths may fail that are unnecessary.\\nObject.defineProperty(Sequelize, 'version', {\\n  enumerable: true,\\n  get() {\\n    return require('../package.json').version;\\n  }\\n});\\n\\nSequelize.options = { hooks: {} };\\n\\n/**\\n * @private\\n */\\nSequelize.Utils = Utils;\\n\\n/**\\n * Operators symbols to be used for querying data\\n *\\n * @see  {@link Operators}\\n */\\nSequelize.Op = Op;\\n\\n/**\\n * Available table hints to be used for querying data in mssql for table hints\\n *\\n * @see {@link TableHints}\\n */\\nSequelize.TableHints = TableHints;\\n\\n/**\\n * Available index hints to be used for querying data in mysql for index hints\\n *\\n * @see {@link IndexHints}\\n */\\nSequelize.IndexHints = IndexHints;\\n\\n/**\\n * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction\\n *\\n * @see {@link Transaction}\\n * @see {@link Sequelize.transaction}\\n */\\nSequelize.Transaction = Transaction;\\n\\n/**\\n * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.\\n *\\n * @see {@link Sequelize}\\n */\\nSequelize.prototype.Sequelize = Sequelize;\\n\\n/**\\n * Available query types for use with `sequelize.query`\\n *\\n * @see {@link QueryTypes}\\n */\\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\\n\\n/**\\n * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.\\n *\\n * @see https://github.com/chriso/validator.js\\n */\\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\\n\\nSequelize.Model = Model;\\n\\nSequelize.QueryInterface = QueryInterface;\\nSequelize.BelongsTo = BelongsTo;\\nSequelize.HasOne = HasOne;\\nSequelize.HasMany = HasMany;\\nSequelize.BelongsToMany = BelongsToMany;\\n\\nSequelize.DataTypes = DataTypes;\\nfor (const dataType in DataTypes) {\\n  Sequelize[dataType] = DataTypes[dataType];\\n}\\n\\n/**\\n * A reference to the deferrable collection. Use this to access the different deferrable options.\\n *\\n * @see {@link Transaction.Deferrable}\\n * @see {@link Sequelize#transaction}\\n */\\nSequelize.Deferrable = Deferrable;\\n\\n/**\\n * A reference to the sequelize association class.\\n *\\n * @see {@link Association}\\n */\\nSequelize.prototype.Association = Sequelize.Association = Association;\\n\\n/**\\n * Provide alternative version of `inflection` module to be used by `Utils.pluralize` etc.\\n *\\n * @param {object} _inflection - `inflection` module\\n */\\nSequelize.useInflection = Utils.useInflection;\\n\\n/**\\n * Allow hooks to be defined on Sequelize + on sequelize instance as universal hooks to run on all models\\n * and on Sequelize/sequelize methods e.g. Sequelize(), Sequelize#define()\\n */\\nHooks.applyTo(Sequelize);\\nHooks.applyTo(Sequelize.prototype);\\n\\n/**\\n * Expose various errors available\\n */\\n\\n// expose alias to BaseError\\nSequelize.Error = sequelizeErrors.BaseError;\\n\\nfor (const error of Object.keys(sequelizeErrors)) {\\n  Sequelize[error] = sequelizeErrors[error];\\n}\\n\\nmodule.exports = Sequelize;\\nmodule.exports.Sequelize = Sequelize;\\nmodule.exports.default = Sequelize;\\n\"],\r\n  \"mappings\": \"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\",\r\n  \"names\": []\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/lib/sequelize.js.map b/backend/node_modules/sequelize/lib/sequelize.js.map
--- a/backend/node_modules/sequelize/lib/sequelize.js.map	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/lib/sequelize.js.map	(date 1713648521695)
@@ -1,7 +1,7 @@
 {
   "version": 3,
   "sources": ["../src/sequelize.js"],
-  "sourcesContent": ["'use strict';\n\nconst url = require('url');\nconst path = require('path');\nconst pgConnectionString = require('pg-connection-string');\nconst retry = require('retry-as-promised').default;\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\nconst Model = require('./model');\nconst DataTypes = require('./data-types');\nconst Deferrable = require('./deferrable');\nconst ModelManager = require('./model-manager');\nconst Transaction = require('./transaction');\nconst QueryTypes = require('./query-types');\nconst TableHints = require('./table-hints');\nconst IndexHints = require('./index-hints');\nconst sequelizeErrors = require('./errors');\nconst Hooks = require('./hooks');\nconst Association = require('./associations/index');\nconst Validator = require('./utils/validator-extras').validator;\nconst Op = require('./operators');\nconst deprecations = require('./utils/deprecations');\nconst { QueryInterface } = require('./dialects/abstract/query-interface');\nconst { BelongsTo } = require('./associations/belongs-to');\nconst HasOne = require('./associations/has-one');\nconst { BelongsToMany } = require('./associations/belongs-to-many');\nconst { HasMany } = require('./associations/has-many');\nconst { withSqliteForeignKeysOff } = require('./dialects/sqlite/sqlite-utils');\nconst { injectReplacements } = require('./utils/sql');\n\n/**\n * This is the main class, the entry point to sequelize.\n */\nclass Sequelize {\n  /**\n   * Instantiate sequelize with name of database, username and password.\n   *\n   * @example\n   * // without password / with blank password\n   * const sequelize = new Sequelize('database', 'username', null, {\n   *   dialect: 'mysql'\n   * })\n   *\n   * // with password and options\n   * const sequelize = new Sequelize('my_database', 'john', 'doe', {\n   *   dialect: 'postgres'\n   * })\n   *\n   * // with database, username, and password in the options object\n   * const sequelize = new Sequelize({ database, username, password, dialect: 'mssql' });\n   *\n   * // with uri\n   * const sequelize = new Sequelize('mysql://localhost:3306/database', {})\n   *\n   * // option examples\n   * const sequelize = new Sequelize('database', 'username', 'password', {\n   *   // the sql dialect of the database\n   *   // currently supported: 'mysql', 'sqlite', 'postgres', 'mssql'\n   *   dialect: 'mysql',\n   *\n   *   // custom host; default: localhost\n   *   host: 'my.server.tld',\n   *   // for postgres, you can also specify an absolute path to a directory\n   *   // containing a UNIX socket to connect over\n   *   // host: '/sockets/psql_sockets'.\n   *\n   *   // custom port; default: dialect default\n   *   port: 12345,\n   *\n   *   // custom protocol; default: 'tcp'\n   *   // postgres only, useful for Heroku\n   *   protocol: null,\n   *\n   *   // disable logging or provide a custom logging function; default: console.log\n   *   logging: false,\n   *\n   *   // you can also pass any dialect options to the underlying dialect library\n   *   // - default is empty\n   *   // - currently supported: 'mysql', 'postgres', 'mssql'\n   *   dialectOptions: {\n   *     socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',\n   *     supportBigNumbers: true,\n   *     bigNumberStrings: true\n   *   },\n   *\n   *   // the storage engine for sqlite\n   *   // - default ':memory:'\n   *   storage: 'path/to/database.sqlite',\n   *\n   *   // disable inserting undefined values as NULL\n   *   // - default: false\n   *   omitNull: true,\n   *\n   *   // a flag for using a native library or not.\n   *   // in the case of 'pg' -- set this to true will allow SSL support\n   *   // - default: false\n   *   native: true,\n   *\n   *   // A flag that defines if connection should be over ssl or not\n   *   // - default: undefined\n   *   ssl: true,\n   *\n   *   // Specify options, which are used when sequelize.define is called.\n   *   // The following example:\n   *   //   define: { timestamps: false }\n   *   // is basically the same as:\n   *   //   Model.init(attributes, { timestamps: false });\n   *   //   sequelize.define(name, attributes, { timestamps: false });\n   *   // so defining the timestamps for each model will be not necessary\n   *   define: {\n   *     underscored: false,\n   *     freezeTableName: false,\n   *     charset: 'utf8',\n   *     dialectOptions: {\n   *       collate: 'utf8_general_ci'\n   *     },\n   *     timestamps: true\n   *   },\n   *\n   *   // similar for sync: you can define this to always force sync for models\n   *   sync: { force: true },\n   *\n   *   // pool configuration used to pool database connections\n   *   pool: {\n   *     max: 5,\n   *     idle: 30000,\n   *     acquire: 60000,\n   *   },\n   *\n   *   // isolation level of each transaction\n   *   // defaults to dialect default\n   *   isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ\n   * })\n   *\n   * @param {string}   [database] The name of the database\n   * @param {string}   [username=null] The username which is used to authenticate against the database.\n   * @param {string}   [password=null] The password which is used to authenticate against the database. Supports SQLCipher encryption for SQLite.\n   * @param {object}   [options={}] An object with options.\n   * @param {string}   [options.host='localhost'] The host of the relational database.\n   * @param {number}   [options.port] The port of the relational database.\n   * @param {string}   [options.username=null] The username which is used to authenticate against the database.\n   * @param {string}   [options.password=null] The password which is used to authenticate against the database.\n   * @param {string}   [options.database=null] The name of the database.\n   * @param {string}   [options.dialect] The dialect of the database you are connecting to. One of mysql, postgres, sqlite, db2, mariadb and mssql.\n   * @param {string}   [options.dialectModule=null] If specified, use this dialect library. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'require(\"pg.js\")' here\n   * @param {string}   [options.dialectModulePath=null] If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify '/path/to/pg.js' here\n   * @param {object}   [options.dialectOptions] An object of additional options, which are passed directly to the connection library\n   * @param {string}   [options.storage] Only used by sqlite. Defaults to ':memory:'\n   * @param {string}   [options.protocol='tcp'] The protocol of the relational database.\n   * @param {object}   [options.define={}] Default options for model definitions. See {@link Model.init}.\n   * @param {object}   [options.query={}] Default options for sequelize.query\n   * @param {string}   [options.schema=null] A schema to use\n   * @param {object}   [options.set={}] Default options for sequelize.set\n   * @param {object}   [options.sync={}] Default options for sequelize.sync\n   * @param {string}   [options.timezone='+00:00'] The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.\n   * @param {string|boolean} [options.clientMinMessages='warning'] (Deprecated) The PostgreSQL `client_min_messages` session parameter. Set to `false` to not override the database's default.\n   * @param {boolean}  [options.standardConformingStrings=true] The PostgreSQL `standard_conforming_strings` session parameter. Set to `false` to not set the option. WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   * @param {Function} [options.logging=console.log] A function that gets executed every time Sequelize would log something. Function may receive multiple parameters but only first one is printed by `console.log`. To print all values use `(...msg) => console.log(msg)`\n   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param {boolean}  [options.omitNull=false] A flag that defines if null values should be passed as values to CREATE/UPDATE SQL queries or not.\n   * @param {boolean}  [options.native=false] A flag that defines if native library shall be used or not. Currently only has an effect for postgres\n   * @param {boolean}  [options.ssl=undefined] A flag that defines if connection should be over ssl or not\n   * @param {boolean}  [options.replication=false] Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: `host`, `port`, `username`, `password`, `database`\n   * @param {object}   [options.pool] sequelize connection pool configuration\n   * @param {number}   [options.pool.max=5] Maximum number of connection in pool\n   * @param {number}   [options.pool.min=0] Minimum number of connection in pool\n   * @param {number}   [options.pool.idle=10000] The maximum time, in milliseconds, that a connection can be idle before being released.\n   * @param {number}   [options.pool.acquire=60000] The maximum time, in milliseconds, that pool will try to get connection before throwing error\n   * @param {number}   [options.pool.evict=1000] The time interval, in milliseconds, after which sequelize-pool will remove idle connections.\n   * @param {Function} [options.pool.validate] A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected\n   * @param {number}   [options.pool.maxUses=Infinity] The number of times a connection can be used before discarding it for a replacement, [`used for eventual cluster rebalancing`](https://github.com/sequelize/sequelize-pool).\n   * @param {boolean}  [options.quoteIdentifiers=true] Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of them.  WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   * @param {string}   [options.transactionType='DEFERRED'] Set the default transaction type. See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\n   * @param {string}   [options.isolationLevel] Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options.\n   * @param {object}   [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {number}   [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.\n   * @param {boolean}  [options.typeValidation=false] Run built-in type validators on insert and update, and select with where clause, e.g. validate that arguments passed to integer fields are integer-like.\n   * @param {object}   [options.operatorsAliases] String based operator alias. Pass object to limit set of aliased operators.\n   * @param {object}   [options.hooks] An object of global hook functions that are called before and after certain lifecycle events. Global hooks will run after any model-specific hooks defined for the same event (See `Sequelize.Model.init()` for a list).  Additionally, `beforeConnect()`, `afterConnect()`, `beforeDisconnect()`, and `afterDisconnect()` hooks may be defined here.\n   * @param {boolean}  [options.minifyAliases=false] A flag that defines if aliases should be minified (mostly useful to avoid Postgres alias character limit of 64)\n   * @param {boolean}  [options.logQueryParameters=false] A flag that defines if show bind parameters in log.\n   */\n  constructor(database, username, password, options) {\n    let config;\n\n    if (arguments.length === 1 && typeof database === 'object') {\n      // new Sequelize({ ... options })\n      options = database;\n      config = _.pick(options, 'host', 'port', 'database', 'username', 'password');\n    } else if (arguments.length === 1 && typeof database === 'string' || arguments.length === 2 && typeof username === 'object') {\n      // new Sequelize(URI, { ... options })\n\n      config = {};\n      options = username || {};\n\n      const urlParts = url.parse(arguments[0], true);\n\n      options.dialect = urlParts.protocol.replace(/:$/, '');\n      options.host = urlParts.hostname;\n\n      if (options.dialect === 'sqlite' && urlParts.pathname && !urlParts.pathname.startsWith('/:memory')) {\n        const storagePath = path.join(options.host, urlParts.pathname);\n        options.storage = path.resolve(options.storage || storagePath);\n      }\n\n      if (urlParts.pathname) {\n        config.database = urlParts.pathname.replace(/^\\//, '');\n      }\n\n      if (urlParts.port) {\n        options.port = urlParts.port;\n      }\n\n      if (urlParts.auth) {\n        const authParts = urlParts.auth.split(':');\n\n        config.username = authParts[0];\n\n        if (authParts.length > 1)\n          config.password = authParts.slice(1).join(':');\n      }\n\n      if (urlParts.query) {\n        // Allow host query argument to override the url host.\n        // Enables specifying domain socket hosts which cannot be specified via the typical\n        // host part of a url.\n        if (urlParts.query.host) {\n          options.host = urlParts.query.host;\n        }\n\n        if (options.dialectOptions) {\n          Object.assign(options.dialectOptions, urlParts.query);\n        } else {\n          options.dialectOptions = urlParts.query;\n          if (urlParts.query.options) {\n            try {\n              const o = JSON.parse(urlParts.query.options);\n              options.dialectOptions.options = o;\n            } catch (e) {\n              // Nothing to do, string is not a valid JSON\n              // an thus does not need any further processing\n            }\n          }\n        }\n      }\n\n      // For postgres, we can use this helper to load certs directly from the\n      // connection string.\n      if (['postgres', 'postgresql'].includes(options.dialect)) {\n        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));\n      }\n    } else {\n      // new Sequelize(database, username, password, { ... options })\n      options = options || {};\n      config = { database, username, password };\n    }\n\n    Sequelize.runHooks('beforeInit', config, options);\n\n    this.options = {\n      dialect: null,\n      dialectModule: null,\n      dialectModulePath: null,\n      host: 'localhost',\n      protocol: 'tcp',\n      define: {},\n      query: {},\n      sync: {},\n      timezone: '+00:00',\n      standardConformingStrings: true,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      omitNull: false,\n      native: false,\n      replication: false,\n      ssl: undefined,\n      pool: {},\n      quoteIdentifiers: true,\n      hooks: {},\n      retry: {\n        max: 5,\n        match: [\n          'SQLITE_BUSY: database is locked'\n        ]\n      },\n      transactionType: Transaction.TYPES.DEFERRED,\n      isolationLevel: null,\n      databaseVersion: 0,\n      typeValidation: false,\n      benchmark: false,\n      minifyAliases: false,\n      logQueryParameters: false,\n      attributeBehavior: 'throw',\n      ...options\n    };\n\n    if (!this.options.dialect) {\n      throw new Error('Dialect needs to be explicitly supplied as of v4.0.0');\n    }\n\n    if (this.options.dialect === 'postgresql') {\n      this.options.dialect = 'postgres';\n    }\n\n    if (this.options.dialect === 'sqlite' && this.options.timezone !== '+00:00') {\n      throw new Error('Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.');\n    }\n\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n\n    this._setupHooks(options.hooks);\n\n    this.config = {\n      database: config.database || this.options.database,\n      username: config.username || this.options.username,\n      password: config.password || this.options.password || null,\n      host: config.host || this.options.host,\n      port: config.port || this.options.port,\n      pool: this.options.pool,\n      protocol: this.options.protocol,\n      native: this.options.native,\n      ssl: this.options.ssl,\n      replication: this.options.replication,\n      dialectModule: this.options.dialectModule,\n      dialectModulePath: this.options.dialectModulePath,\n      keepDefaultTimezone: this.options.keepDefaultTimezone,\n      dialectOptions: this.options.dialectOptions\n    };\n\n    let Dialect;\n    // Requiring the dialect in a switch-case to keep the\n    // require calls static. (Browserify fix)\n    switch (this.getDialect()) {\n      case 'mariadb':\n        Dialect = require('./dialects/mariadb');\n        break;\n      case 'mssql':\n        Dialect = require('./dialects/mssql');\n        break;\n      case 'mysql':\n        Dialect = require('./dialects/mysql');\n        break;\n      case 'oracle':\n        Dialect = require('./dialects/oracle');\n        break;\n      case 'postgres':\n        Dialect = require('./dialects/postgres');\n        break;\n      case 'sqlite':\n        Dialect = require('./dialects/sqlite');\n        break;\n      case 'db2':\n        Dialect = require('./dialects/db2');\n        break;\n      case 'snowflake':\n        Dialect = require('./dialects/snowflake');\n        break;\n      default:\n        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite.`);\n    }\n\n    this.dialect = new Dialect(this);\n    this.dialect.queryGenerator.typeValidation = options.typeValidation;\n\n    if (_.isPlainObject(this.options.operatorsAliases)) {\n      deprecations.noStringOperators();\n      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);\n    } else if (typeof this.options.operatorsAliases === 'boolean') {\n      deprecations.noBoolOperatorAliases();\n    }\n\n    this.queryInterface = this.dialect.queryInterface;\n\n    /**\n     * Models are stored here under the name given to `sequelize.define`\n     */\n    this.models = {};\n    this.modelManager = new ModelManager(this);\n    this.connectionManager = this.dialect.connectionManager;\n\n    Sequelize.runHooks('afterInit', this);\n  }\n\n  /**\n   * Refresh data types and parsers.\n   *\n   * @private\n   */\n  refreshTypes() {\n    this.connectionManager.refreshTypeParser(DataTypes);\n  }\n\n  /**\n   * Returns the specified dialect.\n   *\n   * @returns {string} The specified dialect.\n   */\n  getDialect() {\n    return this.options.dialect;\n  }\n\n  /**\n   * Returns the database name.\n   *\n   * @returns {string} The database name.\n   */\n  getDatabaseName() {\n    return this.config.database;\n  }\n\n  /**\n   * Returns an instance of QueryInterface.\n   *\n   * @returns {QueryInterface} An instance (singleton) of QueryInterface.\n   */\n  getQueryInterface() {\n    return this.queryInterface;\n  }\n\n  /**\n   * Define a new model, representing a table in the database.\n   *\n   * The table columns are defined by the object that is given as the second argument. Each key of the object represents a column\n   *\n   * @param {string} modelName The name of the model. The model will be stored in `sequelize.models` under this name\n   * @param {object} attributes An object, where each attribute is a column of the table. See {@link Model.init}\n   * @param {object} [options] These options are merged with the default define options provided to the Sequelize constructor and passed to Model.init()\n   *\n   * @see\n   * {@link Model.init} for a more comprehensive specification of the `options` and `attributes` objects.\n   * @see\n   * <a href=\"/master/manual/model-basics.html\">Model Basics</a> guide\n   *\n   * @returns {Model} Newly defined model\n   *\n   * @example\n   * sequelize.define('modelName', {\n   *   columnA: {\n   *       type: Sequelize.BOOLEAN,\n   *       validate: {\n   *         is: [\"[a-z]\",'i'],        // will only allow letters\n   *         max: 23,                  // only allow values <= 23\n   *         isIn: {\n   *           args: [['en', 'zh']],\n   *           msg: \"Must be English or Chinese\"\n   *         }\n   *       },\n   *       field: 'column_a'\n   *   },\n   *   columnB: Sequelize.STRING,\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\n   * });\n   *\n   * sequelize.models.modelName // The model will now be available in models under the name given to define\n   */\n  define(modelName, attributes, options = {}) {\n    options.modelName = modelName;\n    options.sequelize = this;\n\n    const model = class extends Model {};\n\n    model.init(attributes, options);\n\n    return model;\n  }\n\n  /**\n   * Fetch a Model which is already defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)\n   * @returns {Model} Specified model\n   */\n  model(modelName) {\n    if (!this.isDefined(modelName)) {\n      throw new Error(`${modelName} has not been defined`);\n    }\n\n    return this.modelManager.getModel(modelName);\n  }\n\n  /**\n   * Checks whether a model with the given name is defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @returns {boolean} Returns true if model is already defined, otherwise false\n   */\n  isDefined(modelName) {\n    return !!this.modelManager.models.find(model => model.name === modelName);\n  }\n\n  /**\n   * Execute a query on the DB, optionally bypassing all the Sequelize goodness.\n   *\n   * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.\n   *\n   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:\n   *\n   * ```js\n   * const [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring\n   *\n   * const results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring\n   * ```\n   *\n   * @param {string}          sql\n   * @param {object}          [options={}] Query options.\n   * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result\n   * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under\n   * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.\n   * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified\n   * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row\n   * @param {object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.\n   * @param {object|Array}    [options.bind] Either an object of named bind parameter in the format `_param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.\n   * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.\n   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Model}           [options.instance] A sequelize model instance whose Model is to be used to build the query result\n   * @param {typeof Model}    [options.model] A sequelize model used to build the returned model instances\n   * @param {object}          [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.\n   * @param {string}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)\n   * @param {boolean}         [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.\n   * @param {object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.\n   * @param {boolean}         [options.rawErrors=false] Set to `true` to cause errors coming from the underlying connection/database library to be propagated unmodified and unformatted. Else, the default behavior (=false) is to reinterpret errors as sequelize.errors.BaseError objects.\n   *\n   * @returns {Promise}\n   *\n   * @see {@link Model.build} for more information about instance option.\n   */\n\n  async query(sql, options) {\n    options = { ...this.options.query, ...options };\n\n    if (options.instance && !options.model) {\n      options.model = options.instance.constructor;\n    }\n\n    if (!options.instance && !options.model) {\n      options.raw = true;\n    }\n\n    // map raw fields to model attributes\n    if (options.mapToModel) {\n      options.fieldMap = _.get(options, 'model.fieldAttributeMap', {});\n    }\n\n    options = _.defaults(options, {\n      // eslint-disable-next-line no-console\n      logging: Object.prototype.hasOwnProperty.call(this.options, 'logging') ? this.options.logging : console.log,\n      searchPath: Object.prototype.hasOwnProperty.call(this.options, 'searchPath') ? this.options.searchPath : 'DEFAULT'\n    });\n\n    if (!options.type) {\n      if (options.model || options.nest || options.plain) {\n        options.type = QueryTypes.SELECT;\n      } else {\n        options.type = QueryTypes.RAW;\n      }\n    }\n\n    //if dialect doesn't support search_path or dialect option\n    //to prepend searchPath is not true delete the searchPath option\n    if (\n      !this.dialect.supports.searchPath ||\n      !this.options.dialectOptions ||\n      !this.options.dialectOptions.prependSearchPath ||\n      options.supportsSearchPath === false\n    ) {\n      delete options.searchPath;\n    } else if (!options.searchPath) {\n      //if user wants to always prepend searchPath (dialectOptions.preprendSearchPath = true)\n      //then set to DEFAULT if none is provided\n      options.searchPath = 'DEFAULT';\n    }\n\n    if (typeof sql === 'object') {\n      if (sql.values !== undefined) {\n        if (options.replacements !== undefined) {\n          throw new Error('Both `sql.values` and `options.replacements` cannot be set at the same time');\n        }\n        options.replacements = sql.values;\n      }\n\n      if (sql.bind !== undefined) {\n        if (options.bind !== undefined) {\n          throw new Error('Both `sql.bind` and `options.bind` cannot be set at the same time');\n        }\n        options.bind = sql.bind;\n      }\n\n      if (sql.query !== undefined) {\n        sql = sql.query;\n      }\n    }\n\n    sql = sql.trim();\n\n    if (options.replacements && options.bind) {\n      throw new Error('Both `replacements` and `bind` cannot be set at the same time');\n    }\n\n    if (options.replacements) {\n      sql = injectReplacements(sql, this.dialect, options.replacements);\n    }\n\n    let bindParameters;\n\n    if (options.bind) {\n      [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);\n    }\n\n    const checkTransaction = () => {\n      if (options.transaction && options.transaction.finished && !options.completesTransaction) {\n        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);\n        error.sql = sql;\n        throw error;\n      }\n    };\n\n    const retryOptions = { ...this.options.retry, ...options.retry };\n\n    return retry(async () => {\n      if (options.transaction === undefined && Sequelize._cls) {\n        options.transaction = Sequelize._cls.get('transaction');\n      }\n\n      checkTransaction();\n\n      const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));\n\n      if (this.options.dialect === 'db2' && options.alter) {\n        if (options.alter.drop === false) {\n          connection.dropTable = false;\n        }\n      }\n      const query = new this.dialect.Query(connection, this, options);\n\n      try {\n        await this.runHooks('beforeQuery', options, query);\n        checkTransaction();\n        return await query.run(sql, bindParameters);\n      } finally {\n        await this.runHooks('afterQuery', options, query);\n        if (!options.transaction) {\n          this.connectionManager.releaseConnection(connection);\n        }\n      }\n    }, retryOptions);\n  }\n\n  /**\n   * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\n   * Only works for MySQL or MariaDB.\n   *\n   * @param {object}        variables Object with multiple variables.\n   * @param {object}        [options] query options.\n   * @param {Transaction}   [options.transaction] The transaction that the query should be executed under\n   *\n   * @memberof Sequelize\n   *\n   * @returns {Promise}\n   */\n  async set(variables, options) {\n\n    // Prepare options\n    options = { ...this.options.set, ...typeof options === 'object' && options };\n\n    if (!['mysql', 'mariadb'].includes(this.options.dialect)) {\n      throw new Error('sequelize.set is only supported for mysql or mariadb');\n    }\n    if (!options.transaction || !(options.transaction instanceof Transaction) ) {\n      throw new TypeError('options.transaction is required');\n    }\n\n    // Override some options, since this isn't a SELECT\n    options.raw = true;\n    options.plain = true;\n    options.type = 'SET';\n\n    // Generate SQL Query\n    const query =\n      `SET ${\n        _.map(variables, (v, k) => `@${k} := ${typeof v === 'string' ? `\"${v}\"` : v}`).join(', ')}`;\n\n    return await this.query(query, options);\n  }\n\n  /**\n   * Escape value.\n   *\n   * @param {string} value string value to escape\n   *\n   * @returns {string}\n   */\n  escape(value) {\n    return this.dialect.queryGenerator.escape(value);\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this command will do nothing.\n   *\n   * @see\n   * {@link Model.schema}\n   *\n   * @param {string} schema Name of the schema\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    return await this.getQueryInterface().createSchema(schema, options);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this will show all tables.\n   *\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async showAllSchemas(options) {\n    return await this.getQueryInterface().showAllSchemas(options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this drop a table matching the schema name\n   *\n   * @param {string} schema Name of the schema\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    return await this.getQueryInterface().dropSchema(schema, options);\n  }\n\n  /**\n   * Drop all schemas.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.\n   *\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    return await this.getQueryInterface().dropAllSchemas(options);\n  }\n\n  /**\n   * Sync all defined models to the DB.\n   *\n   * @param {object} [options={}] sync options\n   * @param {boolean} [options.force=false] If force is true, each Model will run `DROP TABLE IF EXISTS`, before it tries to create its own table\n   * @param {RegExp} [options.match] Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code\n   * @param {boolean|Function} [options.logging=console.log] A function that logs sql queries, or false for no logging\n   * @param {string} [options.schema='public'] The schema that the tables should be created in. This can be overridden for each table in sequelize.define\n   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforeBulkSync, afterBulkSync hooks will be called\n   * @param {boolean|object} [options.alter=false] Alters tables to fit models. Provide an object for additional configuration. Not recommended for production use. If not further configured deletes data in columns that were removed or had their type changed in the model.\n   * @param {boolean} [options.alter.drop=true] Prevents any drop statements while altering a table when set to `false`\n   *\n   * @returns {Promise}\n   */\n  async sync(options) {\n    options = {\n      ...this.options,\n      ...this.options.sync,\n      ...options,\n      hooks: options ? options.hooks !== false : true\n    };\n\n    if (options.match) {\n      if (!options.match.test(this.config.database)) {\n        throw new Error(`Database \"${this.config.database}\" does not match sync match parameter \"${options.match}\"`);\n      }\n    }\n\n    if (options.hooks) {\n      await this.runHooks('beforeBulkSync', options);\n    }\n\n    if (options.force) {\n      await this.drop(options);\n    }\n\n    // no models defined, just authenticate\n    if (this.modelManager.models.length === 0) {\n      await this.authenticate(options);\n    } else {\n      const models = this.modelManager.getModelsTopoSortedByForeignKey();\n      if (models == null) {\n        return this._syncModelsWithCyclicReferences(options);\n      }\n\n      // reverse to start with the one model that does not depend on anything\n      models.reverse();\n\n      // Topologically sort by foreign key constraints to give us an appropriate\n      // creation order\n      for (const model of models) {\n        await model.sync(options);\n      }\n    }\n\n    if (options.hooks) {\n      await this.runHooks('afterBulkSync', options);\n    }\n\n    return this;\n  }\n\n  /**\n   * Used instead of sync() when two models reference each-other, so their foreign keys cannot be created immediately.\n   *\n   * @param {object} options - sync options\n   * @private\n   */\n  async _syncModelsWithCyclicReferences(options) {\n    if (this.dialect.name === 'sqlite') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.sync(options);\n        }\n      });\n\n      return;\n    }\n\n    // create all tables, but don't create foreign key constraints\n    for (const model of this.modelManager.models) {\n      await model.sync({ ...options, withoutForeignKeyConstraints: true });\n    }\n\n    // add foreign key constraints\n    for (const model of this.modelManager.models) {\n      await model.sync({ ...options, force: false, alter: true });\n    }\n  }\n\n  /**\n   * Truncate all tables defined through the sequelize models.\n   * This is done by calling `Model.truncate()` on each model.\n   *\n   * @param {object} [options] The options passed to Model.destroy in addition to truncate\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   * @returns {Promise}\n   *\n   * @see\n   * {@link Model.truncate} for more information\n   */\n  async truncate(options) {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n    const hasCyclicDependencies = sortedModels == null;\n\n    // we have cyclic dependencies, cascade must be enabled.\n    if (hasCyclicDependencies && (!options || !options.cascade)) {\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \"cascade\" option to be able to delete rows from models that have cyclic references.');\n    }\n\n    // TODO [>=7]: throw if options.cascade is specified but unsupported in the given dialect.\n    if (hasCyclicDependencies && this.dialect.name === 'sqlite') {\n      // Workaround: SQLite does not support options.cascade, but we can disable its foreign key constraints while we\n      // truncate all tables.\n      return withSqliteForeignKeysOff(this, options, async () => {\n        await Promise.all(models.map(model => model.truncate(options)));\n      });\n    }\n\n    if (options && options.cascade) {\n      for (const model of models) await model.truncate(options);\n    } else {\n      await Promise.all(models.map(model => model.truncate(options)));\n    }\n  }\n\n  /**\n   * Drop all tables defined through this sequelize instance.\n   * This is done by calling Model.drop on each model.\n   *\n   * @see\n   * {@link Model.drop} for options\n   *\n   * @param {object} [options] The options passed to each call to Model.drop\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async drop(options) {\n    // if 'cascade' is specified, we don't have to worry about cyclic dependencies.\n    if (options && options.cascade) {\n      for (const model of this.modelManager.models) {\n        await model.drop(options);\n      }\n    }\n\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n\n    // no cyclic dependency between models, we can delete them in an order that will not cause an error.\n    if (sortedModels) {\n      for (const model of sortedModels) {\n        await model.drop(options);\n      }\n    }\n\n    if (this.dialect.name === 'sqlite') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.drop(options);\n        }\n      });\n\n      return;\n    }\n\n    // has cyclic dependency: we first remove each foreign key, then delete each model.\n    for (const model of this.modelManager.models) {\n      const tableName = model.getTableName();\n      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);\n\n      await Promise.all(foreignKeys.map(foreignKey => {\n        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);\n      }));\n    }\n\n    for (const model of this.modelManager.models) {\n      await model.drop(options);\n    }\n  }\n\n  /**\n   * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.\n   *\n   * @param {object} [options={}] query options\n   *\n   * @returns {Promise}\n   */\n  async authenticate(options) {\n    options = {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT,\n      ...options\n    };\n\n    await this.query(this.dialect.queryGenerator.authTestQuery(), options);\n\n    return;\n  }\n\n  async databaseVersion(options) {\n    return await this.getQueryInterface().databaseVersion(options);\n  }\n\n  /**\n   * Get the fn for random based on the dialect\n   *\n   * @returns {Sequelize.fn}\n   */\n  random() {\n    if (['postgres', 'sqlite', 'snowflake'].includes(this.getDialect())) {\n      return this.fn('RANDOM');\n    }\n    return this.fn('RAND');\n  }\n\n  /**\n   * Creates an object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\n   * If you want to refer to columns in your function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and not a strings.\n   *\n   * @see\n   * {@link Model.findAll}\n   * @see\n   * {@link Sequelize.define}\n   * @see\n   * {@link Sequelize.col}\n   *\n   * @param {string} fn The function you want to call\n   * @param {any} args All further arguments will be passed as arguments to the function\n   *\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   * @returns {Sequelize.fn}\n   *\n   * @example <caption>Convert a user's username to upper case</caption>\n   * instance.update({\n   *   username: sequelize.fn('upper', sequelize.col('username'))\n   * });\n   */\n  static fn(fn, ...args) {\n    return new Utils.Fn(fn, args);\n  }\n\n  /**\n   * Creates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.\n   *\n   * @see\n   * {@link Sequelize#fn}\n   *\n   * @param {string} col The name of the column\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.col}\n   */\n  static col(col) {\n    return new Utils.Col(col);\n  }\n\n  /**\n   * Creates an object representing a call to the cast function.\n   *\n   * @param {any} val The value to cast\n   * @param {string} type The type to cast it to\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.cast}\n   */\n  static cast(val, type) {\n    return new Utils.Cast(val, type);\n  }\n\n  /**\n   * Creates an object representing a literal, i.e. something that will not be escaped.\n   *\n   * @param {any} val literal value\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.literal}\n   */\n  static literal(val) {\n    return new Utils.Literal(val);\n  }\n\n  /**\n   * An AND query\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {...string|object} args Each argument will be joined by AND\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.and}\n   */\n  static and(...args) {\n    return { [Op.and]: args };\n  }\n\n  /**\n   * An OR query\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {...string|object} args Each argument will be joined by OR\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.or}\n   */\n  static or(...args) {\n    return { [Op.or]: args };\n  }\n\n  /**\n   * Creates an object representing nested where conditions for postgres/sqlite/mysql json data-type.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {string|object} conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres/sqlite/mysql json syntax.\n   * @param {string|number|boolean} [value] An optional value to compare against. Produces a string of the form \"<json path> = '<value>'\".\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.json}\n   */\n  static json(conditionsOrPath, value) {\n    return new Utils.Json(conditionsOrPath, value);\n  }\n\n  /**\n   * A way of specifying attr = condition.\n   *\n   * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id` or `Model.rawAttributes.name`). The\n   * attribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)\n   *\n   * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your string to be escaped, use `sequelize.literal`.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {object} attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the POJO syntax\n   * @param {symbol} [comparator='Op.eq'] operator\n   * @param {string|object} logic The condition. Can be both a simply type, or a further condition (`or`, `and`, `.literal` etc.)\n   * @since v2.0.0-dev3\n   */\n  static where(attr, comparator, logic) {\n    return new Utils.Where(attr, comparator, logic);\n  }\n\n  /**\n   * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction @see {@link Transaction}\n   *\n   * If you have [CLS](https://github.com/Jeff-Lewis/cls-hooked) enabled, the transaction will automatically be passed to any query that runs within the callback\n   *\n   * @example\n   *\n   * try {\n   *   const transaction = await sequelize.transaction();\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   *   await transaction.commit();\n   * } catch {\n   *   await transaction.rollback()\n   * }\n   *\n   * @example <caption>A syntax for automatically committing or rolling back based on the promise chain resolution is also supported</caption>\n   *\n   * try {\n   *   await sequelize.transaction(transaction => { // Note that we pass a callback rather than awaiting the call with no arguments\n   *     const user = await User.findOne(..., {transaction});\n   *     await user.update(..., {transaction});\n   *   });\n   *   // Committed\n   * } catch(err) {\n   *   // Rolled back\n   *   console.error(err);\n   * }\n   * @example <caption>To enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:</caption>\n   *\n   * const cls = require('cls-hooked');\n   * const namespace = cls.createNamespace('....');\n   * const Sequelize = require('sequelize');\n   * Sequelize.useCLS(namespace);\n   *\n   * // Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace\n   *\n   * @param {object}   [options] Transaction options\n   * @param {string}   [options.type='DEFERRED'] See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\n   * @param {string}   [options.isolationLevel] See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options\n   * @param {string}   [options.deferrable] Sets the constraints to be deferred or immediately checked. See `Sequelize.Deferrable`. PostgreSQL Only\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Function} [autoCallback] The callback is called with the transaction object, and should return a promise. If the promise is resolved, the transaction commits; if the promise rejects, the transaction rolls back\n   *\n   * @returns {Promise}\n   */\n  async transaction(options, autoCallback) {\n    if (typeof options === 'function') {\n      autoCallback = options;\n      options = undefined;\n    }\n\n    const transaction = new Transaction(this, options);\n\n    if (!autoCallback) {\n      await transaction.prepareEnvironment(/* cls */ false);\n      return transaction;\n    }\n\n    // autoCallback provided\n    return Sequelize._clsRun(async () => {\n      await transaction.prepareEnvironment(/* cls */ true);\n\n      let result;\n      try {\n        result = await autoCallback(transaction);\n      } catch (err) {\n        try {\n          await transaction.rollback();\n        } catch (ignore) {\n          // ignore, because 'rollback' will already print the error before killing the connection\n        }\n\n        throw err;\n      }\n\n      await transaction.commit();\n      return result;\n    });\n  }\n\n  /**\n   * Use CLS (Continuation Local Storage) with Sequelize. With Continuation\n   * Local Storage, all queries within the transaction callback will\n   * automatically receive the transaction object.\n   *\n   * CLS namespace provided is stored as `Sequelize._cls`\n   *\n   * @param {object} ns CLS namespace\n   * @returns {object} Sequelize constructor\n   */\n  static useCLS(ns) {\n    // check `ns` is valid CLS namespace\n    if (!ns || typeof ns !== 'object' || typeof ns.bind !== 'function' || typeof ns.run !== 'function') throw new Error('Must provide CLS namespace');\n\n    // save namespace as `Sequelize._cls`\n    Sequelize._cls = ns;\n\n    // return Sequelize for chaining\n    return this;\n  }\n\n  /**\n   * Run function in CLS context.\n   * If no CLS context in use, just runs the function normally\n   *\n   * @private\n   * @param {Function} fn Function to run\n   * @returns {*} Return value of function\n   */\n  static _clsRun(fn) {\n    const ns = Sequelize._cls;\n    if (!ns) return fn();\n\n    let res;\n    ns.run(context => res = fn(context));\n    return res;\n  }\n\n  log(...args) {\n    let options;\n\n    const last = _.last(args);\n\n    if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, 'logging')) {\n      options = last;\n\n      // remove options from set of logged arguments if options.logging is equal to console.log\n      // eslint-disable-next-line no-console\n      if (options.logging === console.log) {\n        args.splice(args.length - 1, 1);\n      }\n    } else {\n      options = this.options;\n    }\n\n    if (options.logging) {\n      if (options.logging === true) {\n        deprecations.noTrueLogging();\n        // eslint-disable-next-line no-console\n        options.logging = console.log;\n      }\n\n      // second argument is sql-timings, when benchmarking option enabled\n      // eslint-disable-next-line no-console\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\n      }\n\n      options.logging(...args);\n    }\n  }\n\n  /**\n   * Close all connections used by this sequelize instance, and free all references so the instance can be garbage collected.\n   *\n   * Normally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want\n   * to garbage collect some of them.\n   *\n   * @returns {Promise}\n   */\n  close() {\n    return this.connectionManager.close();\n  }\n\n  normalizeDataType(Type) {\n    let type = typeof Type === 'function' ? new Type() : Type;\n    const dialectTypes = this.dialect.DataTypes || {};\n\n    if (dialectTypes[type.key]) {\n      type = dialectTypes[type.key].extend(type);\n    }\n\n    if (type instanceof DataTypes.ARRAY) {\n      if (!type.type) {\n        throw new Error('ARRAY is missing type definition for its values.');\n      }\n      if (dialectTypes[type.type.key]) {\n        type.type = dialectTypes[type.type.key].extend(type.type);\n      }\n    }\n\n    return type;\n  }\n\n  normalizeAttribute(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = { type: attribute };\n    }\n\n    if (!attribute.type) return attribute;\n\n    attribute.type = this.normalizeDataType(attribute.type);\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'defaultValue')) {\n      if (typeof attribute.defaultValue === 'function' &&\n        [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)\n      ) {\n        attribute.defaultValue = new attribute.defaultValue();\n      }\n    }\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      // The ENUM is a special case where the type is an object containing the values\n      if (attribute.values) {\n        attribute.type.values = attribute.type.options.values = attribute.values;\n      } else {\n        attribute.values = attribute.type.values;\n      }\n\n      if (!attribute.values.length) {\n        throw new Error('Values for ENUM have not been defined.');\n      }\n    }\n\n    return attribute;\n  }\n}\n\n// Aliases\nSequelize.prototype.fn = Sequelize.fn;\nSequelize.prototype.col = Sequelize.col;\nSequelize.prototype.cast = Sequelize.cast;\nSequelize.prototype.literal = Sequelize.literal;\nSequelize.prototype.and = Sequelize.and;\nSequelize.prototype.or = Sequelize.or;\nSequelize.prototype.json = Sequelize.json;\nSequelize.prototype.where = Sequelize.where;\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\n\n/**\n * Sequelize version number.\n */\n// To avoid any errors on startup when this field is unused, only resolve it as needed.\n// this is to prevent any potential issues on startup with unusual environments (eg, bundled code)\n// where relative paths may fail that are unnecessary.\nObject.defineProperty(Sequelize, 'version', {\n  enumerable: true,\n  get() {\n    return require('../package.json').version;\n  }\n});\n\nSequelize.options = { hooks: {} };\n\n/**\n * @private\n */\nSequelize.Utils = Utils;\n\n/**\n * Operators symbols to be used for querying data\n *\n * @see  {@link Operators}\n */\nSequelize.Op = Op;\n\n/**\n * Available table hints to be used for querying data in mssql for table hints\n *\n * @see {@link TableHints}\n */\nSequelize.TableHints = TableHints;\n\n/**\n * Available index hints to be used for querying data in mysql for index hints\n *\n * @see {@link IndexHints}\n */\nSequelize.IndexHints = IndexHints;\n\n/**\n * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction\n *\n * @see {@link Transaction}\n * @see {@link Sequelize.transaction}\n */\nSequelize.Transaction = Transaction;\n\n/**\n * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.\n *\n * @see {@link Sequelize}\n */\nSequelize.prototype.Sequelize = Sequelize;\n\n/**\n * Available query types for use with `sequelize.query`\n *\n * @see {@link QueryTypes}\n */\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\n\n/**\n * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.\n *\n * @see https://github.com/chriso/validator.js\n */\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\n\nSequelize.Model = Model;\n\nSequelize.QueryInterface = QueryInterface;\nSequelize.BelongsTo = BelongsTo;\nSequelize.HasOne = HasOne;\nSequelize.HasMany = HasMany;\nSequelize.BelongsToMany = BelongsToMany;\n\nSequelize.DataTypes = DataTypes;\nfor (const dataType in DataTypes) {\n  Sequelize[dataType] = DataTypes[dataType];\n}\n\n/**\n * A reference to the deferrable collection. Use this to access the different deferrable options.\n *\n * @see {@link Transaction.Deferrable}\n * @see {@link Sequelize#transaction}\n */\nSequelize.Deferrable = Deferrable;\n\n/**\n * A reference to the sequelize association class.\n *\n * @see {@link Association}\n */\nSequelize.prototype.Association = Sequelize.Association = Association;\n\n/**\n * Provide alternative version of `inflection` module to be used by `Utils.pluralize` etc.\n *\n * @param {object} _inflection - `inflection` module\n */\nSequelize.useInflection = Utils.useInflection;\n\n/**\n * Allow hooks to be defined on Sequelize + on sequelize instance as universal hooks to run on all models\n * and on Sequelize/sequelize methods e.g. Sequelize(), Sequelize#define()\n */\nHooks.applyTo(Sequelize);\nHooks.applyTo(Sequelize.prototype);\n\n/**\n * Expose various errors available\n */\n\n// expose alias to BaseError\nSequelize.Error = sequelizeErrors.BaseError;\n\nfor (const error of Object.keys(sequelizeErrors)) {\n  Sequelize[error] = sequelizeErrors[error];\n}\n\nmodule.exports = Sequelize;\nmodule.exports.Sequelize = Sequelize;\nmodule.exports.default = Sequelize;\n"],
-  "mappings": "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",
+  "sourcesContent": ["'use strict';\n\nconst url = require('url');\nconst path = require('path');\nconst pgConnectionString = require('pg-connection-string');\nconst retry = require('retry-as-promised').default;\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\nconst Model = require('./model');\nconst DataTypes = require('./data-types');\nconst Deferrable = require('./deferrable');\nconst ModelManager = require('./model-manager');\nconst Transaction = require('./transaction');\nconst QueryTypes = require('./query-types');\nconst TableHints = require('./table-hints');\nconst IndexHints = require('./index-hints');\nconst sequelizeErrors = require('./errors');\nconst Hooks = require('./hooks');\nconst Association = require('./associations/index');\nconst Validator = require('./utils/validator-extras').validator;\nconst Op = require('./operators');\nconst deprecations = require('./utils/deprecations');\nconst { QueryInterface } = require('./dialects/abstract/query-interface');\nconst { BelongsTo } = require('./associations/belongs-to');\nconst HasOne = require('./associations/has-one');\nconst { BelongsToMany } = require('./associations/belongs-to-many');\nconst { HasMany } = require('./associations/has-many');\nconst { withSqliteForeignKeysOff } = require('./dialects/sqlite/sqlite-utils');\nconst { injectReplacements } = require('./utils/sql');\n\n/**\n * This is the main class, the entry point to sequelize.\n */\nclass Sequelize {\n  /**\n   * Instantiate sequelize with name of database, username and password.\n   *\n   * @example\n   * // without password / with blank password\n   * const sequelize = new Sequelize('database', 'username', null, {\n   *   dialect: 'mysql'\n   * })\n   *\n   * // with password and options\n   * const sequelize = new Sequelize('my_database', 'john', 'doe', {\n   *   dialect: 'postgres'\n   * })\n   *\n   * // with database, username, and password in the options object\n   * const sequelize = new Sequelize({ database, username, password, dialect: 'mssql' });\n   *\n   * // with uri\n   * const sequelize = new Sequelize('mysql://localhost:3306/database', {})\n   *\n   * // option examples\n   * const sequelize = new Sequelize('database', 'username', 'password', {\n   *   // the sql dialect of the database\n   *   // currently supported: 'mysql', 'sqlite', 'postgres', 'mssql'\n   *   dialect: 'mysql',\n   *\n   *   // custom host; default: localhost\n   *   host: 'my.server.tld',\n   *   // for postgres, you can also specify an absolute path to a directory\n   *   // containing a UNIX socket to connect over\n   *   // host: '/sockets/psql_sockets'.\n   *\n   *   // custom port; default: dialect default\n   *   port: 12345,\n   *\n   *   // custom protocol; default: 'tcp'\n   *   // postgres only, useful for Heroku\n   *   protocol: null,\n   *\n   *   // disable logging or provide a custom logging function; default: console.log\n   *   logging: false,\n   *\n   *   // you can also pass any dialect options to the underlying dialect library\n   *   // - default is empty\n   *   // - currently supported: 'mysql', 'postgres', 'mssql'\n   *   dialectOptions: {\n   *     socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',\n   *     supportBigNumbers: true,\n   *     bigNumberStrings: true\n   *   },\n   *\n   *   // the storage engine for sqlite\n   *   // - default ':memory:'\n   *   storage: 'path/to/database.sqlite',\n   *\n   *   // disable inserting undefined values as NULL\n   *   // - default: false\n   *   omitNull: true,\n   *\n   *   // a flag for using a native library or not.\n   *   // in the case of 'pg' -- set this to true will allow SSL support\n   *   // - default: false\n   *   native: true,\n   *\n   *   // A flag that defines if connection should be over ssl or not\n   *   // - default: undefined\n   *   ssl: true,\n   *\n   *   // Specify options, which are used when sequelize.define is called.\n   *   // The following example:\n   *   //   define: { timestamps: false }\n   *   // is basically the same as:\n   *   //   Model.init(attributes, { timestamps: false });\n   *   //   sequelize.define(name, attributes, { timestamps: false });\n   *   // so defining the timestamps for each model will be not necessary\n   *   define: {\n   *     underscored: false,\n   *     freezeTableName: false,\n   *     charset: 'utf8',\n   *     dialectOptions: {\n   *       collate: 'utf8_general_ci'\n   *     },\n   *     timestamps: true\n   *   },\n   *\n   *   // similar for sync: you can define this to always force sync for models\n   *   sync: { force: true },\n   *\n   *   // pool configuration used to pool database connections\n   *   pool: {\n   *     max: 5,\n   *     idle: 30000,\n   *     acquire: 60000,\n   *   },\n   *\n   *   // isolation level of each transaction\n   *   // defaults to dialect default\n   *   isolationLevel: Transaction.ISOLATION_LEVELS.REPEATABLE_READ\n   * })\n   *\n   * @param {string}   [database] The name of the database\n   * @param {string}   [username=null] The username which is used to authenticate against the database.\n   * @param {string}   [password=null] The password which is used to authenticate against the database. Supports SQLCipher encryption for SQLite.\n   * @param {object}   [options={}] An object with options.\n   * @param {string}   [options.host='localhost'] The host of the relational database.\n   * @param {number}   [options.port] The port of the relational database.\n   * @param {string}   [options.username=null] The username which is used to authenticate against the database.\n   * @param {string}   [options.password=null] The password which is used to authenticate against the database.\n   * @param {string}   [options.database=null] The name of the database.\n   * @param {string}   [options.dialect] The dialect of the database you are connecting to. One of mysql, postgres, sqlite, db2, mariadb and mssql.\n   * @param {string}   [options.dialectModule=null] If specified, use this dialect library. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify 'require(\"pg.js\")' here\n   * @param {string}   [options.dialectModulePath=null] If specified, load the dialect library from this path. For example, if you want to use pg.js instead of pg when connecting to a pg database, you should specify '/path/to/pg.js' here\n   * @param {object}   [options.dialectOptions] An object of additional options, which are passed directly to the connection library\n   * @param {string}   [options.storage] Only used by sqlite. Defaults to ':memory:'\n   * @param {string}   [options.protocol='tcp'] The protocol of the relational database.\n   * @param {object}   [options.define={}] Default options for model definitions. See {@link Model.init}.\n   * @param {object}   [options.query={}] Default options for sequelize.query\n   * @param {string}   [options.schema=null] A schema to use\n   * @param {object}   [options.set={}] Default options for sequelize.set\n   * @param {object}   [options.sync={}] Default options for sequelize.sync\n   * @param {string}   [options.timezone='+00:00'] The timezone used when converting a date from the database into a JavaScript date. The timezone is also used to SET TIMEZONE when connecting to the server, to ensure that the result of NOW, CURRENT_TIMESTAMP and other time related functions have in the right timezone. For best cross platform performance use the format +/-HH:MM. Will also accept string versions of timezones used by moment.js (e.g. 'America/Los_Angeles'); this is useful to capture daylight savings time changes.\n   * @param {string|boolean} [options.clientMinMessages='warning'] (Deprecated) The PostgreSQL `client_min_messages` session parameter. Set to `false` to not override the database's default.\n   * @param {boolean}  [options.standardConformingStrings=true] The PostgreSQL `standard_conforming_strings` session parameter. Set to `false` to not set the option. WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   * @param {Function} [options.logging=console.log] A function that gets executed every time Sequelize would log something. Function may receive multiple parameters but only first one is printed by `console.log`. To print all values use `(...msg) => console.log(msg)`\n   * @param {boolean}  [options.benchmark=false] Pass query execution time in milliseconds as second argument to logging function (options.logging).\n   * @param {boolean}  [options.omitNull=false] A flag that defines if null values should be passed as values to CREATE/UPDATE SQL queries or not.\n   * @param {boolean}  [options.native=false] A flag that defines if native library shall be used or not. Currently only has an effect for postgres\n   * @param {boolean}  [options.ssl=undefined] A flag that defines if connection should be over ssl or not\n   * @param {boolean}  [options.replication=false] Use read / write replication. To enable replication, pass an object, with two properties, read and write. Write should be an object (a single server for handling writes), and read an array of object (several servers to handle reads). Each read/write server can have the following properties: `host`, `port`, `username`, `password`, `database`\n   * @param {object}   [options.pool] sequelize connection pool configuration\n   * @param {number}   [options.pool.max=5] Maximum number of connection in pool\n   * @param {number}   [options.pool.min=0] Minimum number of connection in pool\n   * @param {number}   [options.pool.idle=10000] The maximum time, in milliseconds, that a connection can be idle before being released.\n   * @param {number}   [options.pool.acquire=60000] The maximum time, in milliseconds, that pool will try to get connection before throwing error\n   * @param {number}   [options.pool.evict=1000] The time interval, in milliseconds, after which sequelize-pool will remove idle connections.\n   * @param {Function} [options.pool.validate] A function that validates a connection. Called with client. The default function checks that client is an object, and that its state is not disconnected\n   * @param {number}   [options.pool.maxUses=Infinity] The number of times a connection can be used before discarding it for a replacement, [`used for eventual cluster rebalancing`](https://github.com/sequelize/sequelize-pool).\n   * @param {boolean}  [options.quoteIdentifiers=true] Set to `false` to make table names and attributes case-insensitive on Postgres and skip double quoting of them.  WARNING: Setting this to false may expose vulnerabilities and is not recommended!\n   * @param {string}   [options.transactionType='DEFERRED'] Set the default transaction type. See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\n   * @param {string}   [options.isolationLevel] Set the default transaction isolation level. See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options.\n   * @param {object}   [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}    [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {number}   [options.retry.max] How many times a failing query is automatically retried.  Set to 0 to disable retrying on SQL_BUSY error.\n   * @param {boolean}  [options.typeValidation=false] Run built-in type validators on insert and update, and select with where clause, e.g. validate that arguments passed to integer fields are integer-like.\n   * @param {object}   [options.operatorsAliases] String based operator alias. Pass object to limit set of aliased operators.\n   * @param {object}   [options.hooks] An object of global hook functions that are called before and after certain lifecycle events. Global hooks will run after any model-specific hooks defined for the same event (See `Sequelize.Model.init()` for a list).  Additionally, `beforeConnect()`, `afterConnect()`, `beforeDisconnect()`, and `afterDisconnect()` hooks may be defined here.\n   * @param {boolean}  [options.minifyAliases=false] A flag that defines if aliases should be minified (mostly useful to avoid Postgres alias character limit of 64)\n   * @param {boolean}  [options.logQueryParameters=false] A flag that defines if show bind parameters in log.\n   */\n  constructor(database, username, password, options) {\n    let config;\n\n    if (arguments.length === 1 && typeof database === 'object') {\n      // new Sequelize({ ... options })\n      options = database;\n      config = _.pick(options, 'host', 'port', 'database', 'username', 'password');\n    } else if (arguments.length === 1 && typeof database === 'string' || arguments.length === 2 && typeof username === 'object') {\n      // new Sequelize(URI, { ... options })\n\n      config = {};\n      options = username || {};\n\n      const urlParts = url.parse(arguments[0], true);\n\n      options.dialect = urlParts.protocol.replace(/:$/, '');\n      options.host = urlParts.hostname;\n\n      if (options.dialect === 'sqlite' && urlParts.pathname && !urlParts.pathname.startsWith('/:memory')) {\n        const storagePath = path.join(options.host, urlParts.pathname);\n        options.storage = path.resolve(options.storage || storagePath);\n      }\n\n      if (urlParts.pathname) {\n        config.database = urlParts.pathname.replace(/^\\//, '');\n      }\n\n      if (urlParts.port) {\n        options.port = urlParts.port;\n      }\n\n      if (urlParts.auth) {\n        const authParts = urlParts.auth.split(':');\n\n        config.username = authParts[0];\n\n        if (authParts.length > 1)\n          config.password = authParts.slice(1).join(':');\n      }\n\n      if (urlParts.query) {\n        // Allow host query argument to override the url host.\n        // Enables specifying domain socket hosts which cannot be specified via the typical\n        // host part of a url.\n        if (urlParts.query.host) {\n          options.host = urlParts.query.host;\n        }\n\n        if (options.dialectOptions) {\n          Object.assign(options.dialectOptions, urlParts.query);\n        } else {\n          options.dialectOptions = urlParts.query;\n          if (urlParts.query.options) {\n            try {\n              const o = JSON.parse(urlParts.query.options);\n              options.dialectOptions.options = o;\n            } catch (e) {\n              // Nothing to do, string is not a valid JSON\n              // an thus does not need any further processing\n            }\n          }\n        }\n      }\n\n      // For postgres, we can use this helper to load certs directly from the\n      // connection string.\n      if (['postgres', 'postgresql'].includes(options.dialect)) {\n        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));\n      }\n    } else {\n      // new Sequelize(database, username, password, { ... options })\n      options = options || {};\n      config = { database, username, password };\n    }\n\n    Sequelize.runHooks('beforeInit', config, options);\n\n    this.options = {\n      dialect: null,\n      dialectModule: null,\n      dialectModulePath: null,\n      host: 'localhost',\n      protocol: 'tcp',\n      define: {},\n      query: {},\n      sync: {},\n      timezone: '+00:00',\n      standardConformingStrings: true,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      omitNull: false,\n      native: false,\n      replication: false,\n      ssl: undefined,\n      pool: {},\n      quoteIdentifiers: true,\n      hooks: {},\n      retry: {\n        max: 5,\n        match: [\n          'SQLITE_BUSY: database is locked'\n        ]\n      },\n      transactionType: Transaction.TYPES.DEFERRED,\n      isolationLevel: null,\n      databaseVersion: 0,\n      typeValidation: false,\n      benchmark: false,\n      minifyAliases: false,\n      logQueryParameters: false,\n      attributeBehavior: 'throw',\n      ...options\n    };\n\n    if (!this.options.dialect) {\n      throw new Error('Dialect needs to be explicitly supplied as of v4.0.0');\n    }\n\n    if (this.options.dialect === 'postgresql') {\n      this.options.dialect = 'postgres';\n    }\n\n    if (this.options.dialect === 'sqlite' && this.options.timezone !== '+00:00') {\n      throw new Error('Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.');\n    }\n\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n\n    this._setupHooks(options.hooks);\n\n    this.config = {\n      database: config.database || this.options.database,\n      username: config.username || this.options.username,\n      password: config.password || this.options.password || null,\n      host: config.host || this.options.host,\n      port: config.port || this.options.port,\n      pool: this.options.pool,\n      protocol: this.options.protocol,\n      native: this.options.native,\n      ssl: this.options.ssl,\n      replication: this.options.replication,\n      dialectModule: this.options.dialectModule,\n      dialectModulePath: this.options.dialectModulePath,\n      keepDefaultTimezone: this.options.keepDefaultTimezone,\n      dialectOptions: this.options.dialectOptions\n    };\n\n    let Dialect;\n    // Requiring the dialect in a switch-case to keep the\n    // require calls static. (Browserify fix)\n    switch (this.getDialect()) {\n      case 'mariadb':\n        Dialect = require('./dialects/mariadb');\n        break;\n      case 'mssql':\n        Dialect = require('./dialects/mssql');\n        break;\n      case 'mysql':\n        Dialect = require('./dialects/mysql');\n        break;\n      case 'oracle':\n        Dialect = require('./dialects/oracle');\n        break;\n      case 'postgres':\n        Dialect = require('./dialects/postgres');\n        break;\n      case 'sqlite':\n        Dialect = require('./dialects/sqlite');\n        break;\n      case 'db2':\n        Dialect = require('./dialects/db2');\n        break;\n      case 'snowflake':\n        Dialect = require('./dialects/snowflake');\n        break;\n      default:\n        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite.`);\n    }\n\n    this.dialect = new Dialect(this);\n    this.dialect.queryGenerator.typeValidation = options.typeValidation;\n\n    if (_.isPlainObject(this.options.operatorsAliases)) {\n      deprecations.noStringOperators();\n      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);\n    } else if (typeof this.options.operatorsAliases === 'boolean') {\n      deprecations.noBoolOperatorAliases();\n    }\n\n    this.queryInterface = this.dialect.queryInterface;\n\n    /**\n     * Models are stored here under the name given to `sequelize.define`\n     */\n    this.models = {};\n    this.modelManager = new ModelManager(this);\n    this.connectionManager = this.dialect.connectionManager;\n\n    Sequelize.runHooks('afterInit', this);\n  }\n\n  /**\n   * Refresh data types and parsers.\n   *\n   * @private\n   */\n  refreshTypes() {\n    this.connectionManager.refreshTypeParser(DataTypes);\n  }\n\n  /**\n   * Returns the specified dialect.\n   *\n   * @returns {string} The specified dialect.\n   */\n  getDialect() {\n    return this.options.dialect;\n  }\n\n  /**\n   * Returns the database name.\n   *\n   * @returns {string} The database name.\n   */\n  getDatabaseName() {\n    return this.config.database;\n  }\n\n  /**\n   * Returns an instance of QueryInterface.\n   *\n   * @returns {QueryInterface} An instance (singleton) of QueryInterface.\n   */\n  getQueryInterface() {\n    return this.queryInterface;\n  }\n\n  /**\n   * Define a new model, representing a table in the database.\n   *\n   * The table columns are defined by the object that is given as the second argument. Each key of the object represents a column\n   *\n   * @param {string} modelName The name of the model. The model will be stored in `sequelize.models` under this name\n   * @param {object} attributes An object, where each attribute is a column of the table. See {@link Model.init}\n   * @param {object} [options] These options are merged with the default define options provided to the Sequelize constructor and passed to Model.init()\n   *\n   * @see\n   * {@link Model.init} for a more comprehensive specification of the `options` and `attributes` objects.\n   * @see\n   * <a href=\"/master/manual/model-basics.html\">Model Basics</a> guide\n   *\n   * @returns {Model} Newly defined model\n   *\n   * @example\n   * sequelize.define('modelName', {\n   *   columnA: {\n   *       type: Sequelize.BOOLEAN,\n   *       validate: {\n   *         is: [\"[a-z]\",'i'],        // will only allow letters\n   *         max: 23,                  // only allow values <= 23\n   *         isIn: {\n   *           args: [['en', 'zh']],\n   *           msg: \"Must be English or Chinese\"\n   *         }\n   *       },\n   *       field: 'column_a'\n   *   },\n   *   columnB: Sequelize.STRING,\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\n   * });\n   *\n   * sequelize.models.modelName // The model will now be available in models under the name given to define\n   */\n  define(modelName, attributes, options = {}) {\n    options.modelName = modelName;\n    options.sequelize = this;\n\n    const model = class extends Model {};\n\n    model.init(attributes, options);\n\n    return model;\n  }\n\n  /**\n   * Fetch a Model which is already defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @throws Will throw an error if the model is not defined (that is, if sequelize#isDefined returns false)\n   * @returns {Model} Specified model\n   */\n  model(modelName) {\n    if (!this.isDefined(modelName)) {\n      throw new Error(`${modelName} has not been defined`);\n    }\n\n    return this.modelManager.getModel(modelName);\n  }\n\n  /**\n   * Checks whether a model with the given name is defined\n   *\n   * @param {string} modelName The name of a model defined with Sequelize.define\n   *\n   * @returns {boolean} Returns true if model is already defined, otherwise false\n   */\n  isDefined(modelName) {\n    return !!this.modelManager.models.find(model => model.name === modelName);\n  }\n\n  /**\n   * Execute a query on the DB, optionally bypassing all the Sequelize goodness.\n   *\n   * By default, the function will return two arguments: an array of results, and a metadata object, containing number of affected rows etc.\n   *\n   * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you can pass in a query type to make sequelize format the results:\n   *\n   * ```js\n   * const [results, metadata] = await sequelize.query('SELECT...'); // Raw query - use array destructuring\n   *\n   * const results = await sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }); // SELECT query - no destructuring\n   * ```\n   *\n   * @param {string}          sql\n   * @param {object}          [options={}] Query options.\n   * @param {boolean}         [options.raw] If true, sequelize will not try to format the results of the query, or build an instance of a model from the result\n   * @param {Transaction}     [options.transaction=null] The transaction that the query should be executed under\n   * @param {QueryTypes}      [options.type='RAW'] The type of query you are executing. The query type affects how results are formatted before they are passed back. The type is a string, but `Sequelize.QueryTypes` is provided as convenience shortcuts.\n   * @param {boolean}         [options.nest=false] If true, transforms objects with `.` separated property names into nested objects using [dottie.js](https://github.com/mickhansen/dottie.js). For example { 'user.username': 'john' } becomes { user: { username: 'john' }}. When `nest` is true, the query type is assumed to be `'SELECT'`, unless otherwise specified\n   * @param {boolean}         [options.plain=false] Sets the query type to `SELECT` and return a single row\n   * @param {object|Array}    [options.replacements] Either an object of named parameter replacements in the format `:param` or an array of unnamed replacements to replace `?` in your SQL.\n   * @param {object|Array}    [options.bind] Either an object of named bind parameter in the format `_param` or an array of unnamed bind parameter to replace `$1, $2, ...` in your SQL.\n   * @param {boolean}         [options.useMaster=false] Force the query to use the write pool, regardless of the query type.\n   * @param {Function}        [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Model}           [options.instance] A sequelize model instance whose Model is to be used to build the query result\n   * @param {typeof Model}    [options.model] A sequelize model used to build the returned model instances\n   * @param {object}          [options.retry] Set of flags that control when a query is automatically retried. Accepts all options for [`retry-as-promised`](https://github.com/mickhansen/retry-as-promised).\n   * @param {Array}           [options.retry.match] Only retry a query if the error matches one of these strings.\n   * @param {Integer}         [options.retry.max] How many times a failing query is automatically retried.\n   * @param {string}          [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean}         [options.supportsSearchPath] If false do not prepend the query with the search_path (Postgres only)\n   * @param {boolean}         [options.mapToModel=false] Map returned fields to model's fields if `options.model` or `options.instance` is present. Mapping will occur before building the model instance.\n   * @param {object}          [options.fieldMap] Map returned fields to arbitrary names for `SELECT` query type.\n   * @param {boolean}         [options.rawErrors=false] Set to `true` to cause errors coming from the underlying connection/database library to be propagated unmodified and unformatted. Else, the default behavior (=false) is to reinterpret errors as sequelize.errors.BaseError objects.\n   *\n   * @returns {Promise}\n   *\n   * @see {@link Model.build} for more information about instance option.\n   */\n\n  async query(sql, options) {\n    options = { ...this.options.query, ...options };\n\n    if (options.instance && !options.model) {\n      options.model = options.instance.constructor;\n    }\n\n    if (!options.instance && !options.model) {\n      options.raw = true;\n    }\n\n    // map raw fields to model attributes\n    if (options.mapToModel) {\n      options.fieldMap = _.get(options, 'model.fieldAttributeMap', {});\n    }\n\n    options = _.defaults(options, {\n      // eslint-disable-next-line no-console\n      logging: Object.prototype.hasOwnProperty.call(this.options, 'logging') ? this.options.logging : console.log,\n      searchPath: Object.prototype.hasOwnProperty.call(this.options, 'searchPath') ? this.options.searchPath : 'DEFAULT'\n    });\n\n    if (!options.type) {\n      if (options.model || options.nest || options.plain) {\n        options.type = QueryTypes.SELECT;\n      } else {\n        options.type = QueryTypes.RAW;\n      }\n    }\n\n    //if dialect doesn't support search_path or dialect option\n    //to prepend searchPath is not true delete the searchPath option\n    if (\n      !this.dialect.supports.searchPath ||\n      !this.options.dialectOptions ||\n      !this.options.dialectOptions.prependSearchPath ||\n      options.supportsSearchPath === false\n    ) {\n      delete options.searchPath;\n    } else if (!options.searchPath) {\n      //if user wants to always prepend searchPath (dialectOptions.preprendSearchPath = true)\n      //then set to DEFAULT if none is provided\n      options.searchPath = 'DEFAULT';\n    }\n\n    if (typeof sql === 'object') {\n      if (sql.values !== undefined) {\n        if (options.replacements !== undefined) {\n          throw new Error('Both `sql.values` and `options.replacements` cannot be set at the same time');\n        }\n        options.replacements = sql.values;\n      }\n\n      if (sql.bind !== undefined) {\n        if (options.bind !== undefined) {\n          throw new Error('Both `sql.bind` and `options.bind` cannot be set at the same time');\n        }\n        options.bind = sql.bind;\n      }\n\n      if (sql.query !== undefined) {\n        sql = sql.query;\n      }\n    }\n\n    sql = sql.trim();\n\n    if (options.replacements && options.bind) {\n      throw new Error('Both `replacements` and `bind` cannot be set at the same time');\n    }\n\n    if (options.replacements) {\n      sql = injectReplacements(sql, this.dialect, options.replacements);\n    }\n\n    let bindParameters;\n\n    if (options.bind) {\n      [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);\n    }\n\n    const checkTransaction = () => {\n      if (options.transaction && options.transaction.finished && !options.completesTransaction) {\n        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);\n        error.sql = sql;\n        throw error;\n      }\n    };\n\n    const retryOptions = { ...this.options.retry, ...options.retry };\n\n    return retry(async () => {\n      if (options.transaction === undefined && Sequelize._cls) {\n        options.transaction = Sequelize._cls.get('transaction');\n      }\n\n      checkTransaction();\n\n      const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));\n\n      if (this.options.dialect === 'db2' && options.alter) {\n        if (options.alter.drop === false) {\n          connection.dropTable = false;\n        }\n      }\n      const query = new this.dialect.Query(connection, this, options);\n\n      try {\n        await this.runHooks('beforeQuery', options, query);\n        checkTransaction();\n        return await query.run(sql, bindParameters);\n      } finally {\n        await this.runHooks('afterQuery', options, query);\n        if (!options.transaction) {\n          this.connectionManager.releaseConnection(connection);\n        }\n      }\n    }, retryOptions);\n  }\n\n  /**\n   * Execute a query which would set an environment or user variable. The variables are set per connection, so this function needs a transaction.\n   * Only works for MySQL or MariaDB.\n   *\n   * @param {object}        variables Object with multiple variables.\n   * @param {object}        [options] query options.\n   * @param {Transaction}   [options.transaction] The transaction that the query should be executed under\n   *\n   * @memberof Sequelize\n   *\n   * @returns {Promise}\n   */\n  async set(variables, options) {\n\n    // Prepare options\n    options = { ...this.options.set, ...typeof options === 'object' && options };\n\n    if (!['mysql', 'mariadb'].includes(this.options.dialect)) {\n      throw new Error('sequelize.set is only supported for mysql or mariadb');\n    }\n    if (!options.transaction || !(options.transaction instanceof Transaction) ) {\n      throw new TypeError('options.transaction is required');\n    }\n\n    // Override some options, since this isn't a SELECT\n    options.raw = true;\n    options.plain = true;\n    options.type = 'SET';\n\n    // Generate SQL Query\n    const query =\n      `SET ${\n        _.map(variables, (v, k) => `@${k} := ${typeof v === 'string' ? `\"${v}\"` : v}`).join(', ')}`;\n\n    return await this.query(query, options);\n  }\n\n  /**\n   * Escape value.\n   *\n   * @param {string} value string value to escape\n   *\n   * @returns {string}\n   */\n  escape(value) {\n    return this.dialect.queryGenerator.escape(value);\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this command will do nothing.\n   *\n   * @see\n   * {@link Model.schema}\n   *\n   * @param {string} schema Name of the schema\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async createSchema(schema, options) {\n    return await this.getQueryInterface().createSchema(schema, options);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this will show all tables.\n   *\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async showAllSchemas(options) {\n    return await this.getQueryInterface().showAllSchemas(options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this drop a table matching the schema name\n   *\n   * @param {string} schema Name of the schema\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async dropSchema(schema, options) {\n    return await this.getQueryInterface().dropSchema(schema, options);\n  }\n\n  /**\n   * Drop all schemas.\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.\n   *\n   * @param {object} [options={}] query options\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async dropAllSchemas(options) {\n    return await this.getQueryInterface().dropAllSchemas(options);\n  }\n\n  /**\n   * Sync all defined models to the DB.\n   *\n   * @param {object} [options={}] sync options\n   * @param {boolean} [options.force=false] If force is true, each Model will run `DROP TABLE IF EXISTS`, before it tries to create its own table\n   * @param {RegExp} [options.match] Match a regex against the database name before syncing, a safety check for cases where force: true is used in tests but not live code\n   * @param {boolean|Function} [options.logging=console.log] A function that logs sql queries, or false for no logging\n   * @param {string} [options.schema='public'] The schema that the tables should be created in. This can be overridden for each table in sequelize.define\n   * @param {string} [options.searchPath=DEFAULT] An optional parameter to specify the schema search_path (Postgres only)\n   * @param {boolean} [options.hooks=true] If hooks is true then beforeSync, afterSync, beforeBulkSync, afterBulkSync hooks will be called\n   * @param {boolean|object} [options.alter=false] Alters tables to fit models. Provide an object for additional configuration. Not recommended for production use. If not further configured deletes data in columns that were removed or had their type changed in the model.\n   * @param {boolean} [options.alter.drop=true] Prevents any drop statements while altering a table when set to `false`\n   *\n   * @returns {Promise}\n   */\n  async sync(options) {\n    options = {\n      ...this.options,\n      ...this.options.sync,\n      ...options,\n      hooks: options ? options.hooks !== false : true\n    };\n\n    if (options.match) {\n      if (!options.match.test(this.config.database)) {\n        throw new Error(`Database \"${this.config.database}\" does not match sync match parameter \"${options.match}\"`);\n      }\n    }\n\n    if (options.hooks) {\n      await this.runHooks('beforeBulkSync', options);\n    }\n\n    if (options.force) {\n      await this.drop(options);\n    }\n\n    // no models defined, just authenticate\n    if (this.modelManager.models.length === 0) {\n      await this.authenticate(options);\n    } else {\n      const models = this.modelManager.getModelsTopoSortedByForeignKey();\n      if (models == null) {\n        return this._syncModelsWithCyclicReferences(options);\n      }\n\n      // reverse to start with the one model that does not depend on anything\n      models.reverse();\n\n      // Topologically sort by foreign key constraints to give us an appropriate\n      // creation order\n      for (const model of models) {\n        await model.sync(options);\n      }\n    }\n\n    if (options.hooks) {\n      await this.runHooks('afterBulkSync', options);\n    }\n\n    return this;\n  }\n\n  /**\n   * Used instead of sync() when two models reference each-other, so their foreign keys cannot be created immediately.\n   *\n   * @param {object} options - sync options\n   * @private\n   */\n  async _syncModelsWithCyclicReferences(options) {\n    if (this.dialect.name === 'sqlite') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.sync(options);\n        }\n      });\n\n      return;\n    }\n\n    // create all tables, but don't create foreign key constraints\n    for (const model of this.modelManager.models) {\n      await model.sync({ ...options, withoutForeignKeyConstraints: true });\n    }\n\n    // add foreign key constraints\n    for (const model of this.modelManager.models) {\n      await model.sync({ ...options, force: false, alter: true });\n    }\n  }\n\n  /**\n   * Truncate all tables defined through the sequelize models.\n   * This is done by calling `Model.truncate()` on each model.\n   *\n   * @param {object} [options] The options passed to Model.destroy in addition to truncate\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   * @returns {Promise}\n   *\n   * @see\n   * {@link Model.truncate} for more information\n   */\n  async truncate(options) {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n    const hasCyclicDependencies = sortedModels == null;\n\n    // we have cyclic dependencies, cascade must be enabled.\n    if (hasCyclicDependencies && (!options || !options.cascade)) {\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \"cascade\" option to be able to delete rows from models that have cyclic references.');\n    }\n\n    // TODO [>=7]: throw if options.cascade is specified but unsupported in the given dialect.\n    if (hasCyclicDependencies && this.dialect.name === 'sqlite') {\n      // Workaround: SQLite does not support options.cascade, but we can disable its foreign key constraints while we\n      // truncate all tables.\n      return withSqliteForeignKeysOff(this, options, async () => {\n        await Promise.all(models.map(model => model.truncate(options)));\n      });\n    }\n\n    if (options && options.cascade) {\n      for (const model of models) await model.truncate(options);\n    } else {\n      await Promise.all(models.map(model => model.truncate(options)));\n    }\n  }\n\n  /**\n   * Drop all tables defined through this sequelize instance.\n   * This is done by calling Model.drop on each model.\n   *\n   * @see\n   * {@link Model.drop} for options\n   *\n   * @param {object} [options] The options passed to each call to Model.drop\n   * @param {boolean|Function} [options.logging] A function that logs sql queries, or false for no logging\n   *\n   * @returns {Promise}\n   */\n  async drop(options) {\n    // if 'cascade' is specified, we don't have to worry about cyclic dependencies.\n    if (options && options.cascade) {\n      for (const model of this.modelManager.models) {\n        await model.drop(options);\n      }\n    }\n\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n\n    // no cyclic dependency between models, we can delete them in an order that will not cause an error.\n    if (sortedModels) {\n      for (const model of sortedModels) {\n        await model.drop(options);\n      }\n    }\n\n    if (this.dialect.name === 'sqlite') {\n      // Optimisation: no need to do this in two passes in SQLite because we can temporarily disable foreign keys\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.drop(options);\n        }\n      });\n\n      return;\n    }\n\n    // has cyclic dependency: we first remove each foreign key, then delete each model.\n    for (const model of this.modelManager.models) {\n      const tableName = model.getTableName();\n      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);\n\n      await Promise.all(foreignKeys.map(foreignKey => {\n        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);\n      }));\n    }\n\n    for (const model of this.modelManager.models) {\n      await model.drop(options);\n    }\n  }\n\n  /**\n   * Test the connection by trying to authenticate. It runs `SELECT 1+1 AS result` query.\n   *\n   * @param {object} [options={}] query options\n   *\n   * @returns {Promise}\n   */\n  async authenticate(options) {\n    options = {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT,\n      ...options\n    };\n\n    await this.query(this.dialect.queryGenerator.authTestQuery(), options);\n\n    return;\n  }\n\n  async databaseVersion(options) {\n    return await this.getQueryInterface().databaseVersion(options);\n  }\n\n  /**\n   * Get the fn for random based on the dialect\n   *\n   * @returns {Sequelize.fn}\n   */\n  random() {\n    if (['postgres', 'sqlite', 'snowflake'].includes(this.getDialect())) {\n      return this.fn('RANDOM');\n    }\n    return this.fn('RAND');\n  }\n\n  /**\n   * Creates an object representing a database function. This can be used in search queries, both in where and order parts, and as default values in column definitions.\n   * If you want to refer to columns in your function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and not a strings.\n   *\n   * @see\n   * {@link Model.findAll}\n   * @see\n   * {@link Sequelize.define}\n   * @see\n   * {@link Sequelize.col}\n   *\n   * @param {string} fn The function you want to call\n   * @param {any} args All further arguments will be passed as arguments to the function\n   *\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   * @returns {Sequelize.fn}\n   *\n   * @example <caption>Convert a user's username to upper case</caption>\n   * instance.update({\n   *   username: sequelize.fn('upper', sequelize.col('username'))\n   * });\n   */\n  static fn(fn, ...args) {\n    return new Utils.Fn(fn, args);\n  }\n\n  /**\n   * Creates an object which represents a column in the DB, this allows referencing another column in your query. This is often useful in conjunction with `sequelize.fn`, since raw string arguments to fn will be escaped.\n   *\n   * @see\n   * {@link Sequelize#fn}\n   *\n   * @param {string} col The name of the column\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.col}\n   */\n  static col(col) {\n    return new Utils.Col(col);\n  }\n\n  /**\n   * Creates an object representing a call to the cast function.\n   *\n   * @param {any} val The value to cast\n   * @param {string} type The type to cast it to\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.cast}\n   */\n  static cast(val, type) {\n    return new Utils.Cast(val, type);\n  }\n\n  /**\n   * Creates an object representing a literal, i.e. something that will not be escaped.\n   *\n   * @param {any} val literal value\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.literal}\n   */\n  static literal(val) {\n    return new Utils.Literal(val);\n  }\n\n  /**\n   * An AND query\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {...string|object} args Each argument will be joined by AND\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.and}\n   */\n  static and(...args) {\n    return { [Op.and]: args };\n  }\n\n  /**\n   * An OR query\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {...string|object} args Each argument will be joined by OR\n   * @since v2.0.0-dev3\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.or}\n   */\n  static or(...args) {\n    return { [Op.or]: args };\n  }\n\n  /**\n   * Creates an object representing nested where conditions for postgres/sqlite/mysql json data-type.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {string|object} conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot notation or a string using postgres/sqlite/mysql json syntax.\n   * @param {string|number|boolean} [value] An optional value to compare against. Produces a string of the form \"<json path> = '<value>'\".\n   * @memberof Sequelize\n   *\n   * @returns {Sequelize.json}\n   */\n  static json(conditionsOrPath, value) {\n    return new Utils.Json(conditionsOrPath, value);\n  }\n\n  /**\n   * A way of specifying attr = condition.\n   *\n   * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id` or `Model.rawAttributes.name`). The\n   * attribute should be defined in your model definition. The attribute can also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)\n   *\n   * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your string to be escaped, use `sequelize.literal`.\n   *\n   * @see\n   * {@link Model.findAll}\n   *\n   * @param {object} attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the POJO syntax\n   * @param {symbol} [comparator='Op.eq'] operator\n   * @param {string|object} logic The condition. Can be both a simply type, or a further condition (`or`, `and`, `.literal` etc.)\n   * @since v2.0.0-dev3\n   */\n  static where(attr, comparator, logic) {\n    return new Utils.Where(attr, comparator, logic);\n  }\n\n  /**\n   * Start a transaction. When using transactions, you should pass the transaction in the options argument in order for the query to happen under that transaction @see {@link Transaction}\n   *\n   * If you have [CLS](https://github.com/Jeff-Lewis/cls-hooked) enabled, the transaction will automatically be passed to any query that runs within the callback\n   *\n   * @example\n   *\n   * try {\n   *   const transaction = await sequelize.transaction();\n   *   const user = await User.findOne(..., { transaction });\n   *   await user.update(..., { transaction });\n   *   await transaction.commit();\n   * } catch {\n   *   await transaction.rollback()\n   * }\n   *\n   * @example <caption>A syntax for automatically committing or rolling back based on the promise chain resolution is also supported</caption>\n   *\n   * try {\n   *   await sequelize.transaction(transaction => { // Note that we pass a callback rather than awaiting the call with no arguments\n   *     const user = await User.findOne(..., {transaction});\n   *     await user.update(..., {transaction});\n   *   });\n   *   // Committed\n   * } catch(err) {\n   *   // Rolled back\n   *   console.error(err);\n   * }\n   * @example <caption>To enable CLS, add it do your project, create a namespace and set it on the sequelize constructor:</caption>\n   *\n   * const cls = require('cls-hooked');\n   * const namespace = cls.createNamespace('....');\n   * const Sequelize = require('sequelize');\n   * Sequelize.useCLS(namespace);\n   *\n   * // Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace\n   *\n   * @param {object}   [options] Transaction options\n   * @param {string}   [options.type='DEFERRED'] See `Sequelize.Transaction.TYPES` for possible options. Sqlite only.\n   * @param {string}   [options.isolationLevel] See `Sequelize.Transaction.ISOLATION_LEVELS` for possible options\n   * @param {string}   [options.deferrable] Sets the constraints to be deferred or immediately checked. See `Sequelize.Deferrable`. PostgreSQL Only\n   * @param {boolean}  [options.readOnly] Whether this transaction will only be used to read data. Used to determine whether sequelize is allowed to use a read replication server.\n   * @param {Function} [options.logging=false] A function that gets executed while running the query to log the sql.\n   * @param {Function} [autoCallback] The callback is called with the transaction object, and should return a promise. If the promise is resolved, the transaction commits; if the promise rejects, the transaction rolls back\n   *\n   * @returns {Promise}\n   */\n  async transaction(options, autoCallback) {\n    if (typeof options === 'function') {\n      autoCallback = options;\n      options = undefined;\n    }\n\n    const transaction = new Transaction(this, options);\n\n    if (!autoCallback) {\n      await transaction.prepareEnvironment(/* cls */ false);\n      return transaction;\n    }\n\n    // autoCallback provided\n    return Sequelize._clsRun(async () => {\n      await transaction.prepareEnvironment(/* cls */ true);\n\n      let result;\n      try {\n        result = await autoCallback(transaction);\n      } catch (err) {\n        try {\n          await transaction.rollback();\n        } catch (ignore) {\n          // ignore, because 'rollback' will already print the error before killing the connection\n        }\n\n        throw err;\n      }\n\n      await transaction.commit();\n      return result;\n    });\n  }\n\n  /**\n   * Use CLS (Continuation Local Storage) with Sequelize. With Continuation\n   * Local Storage, all queries within the transaction callback will\n   * automatically receive the transaction object.\n   *\n   * CLS namespace provided is stored as `Sequelize._cls`\n   *\n   * @param {object} ns CLS namespace\n   * @returns {object} Sequelize constructor\n   */\n  static useCLS(ns) {\n    // check `ns` is valid CLS namespace\n    if (!ns || typeof ns !== 'object' || typeof ns.bind !== 'function' || typeof ns.run !== 'function') throw new Error('Must provide CLS namespace');\n\n    // save namespace as `Sequelize._cls`\n    Sequelize._cls = ns;\n\n    // return Sequelize for chaining\n    return this;\n  }\n\n  /**\n   * Run function in CLS context.\n   * If no CLS context in use, just runs the function normally\n   *\n   * @private\n   * @param {Function} fn Function to run\n   * @returns {*} Return value of function\n   */\n  static _clsRun(fn) {\n    const ns = Sequelize._cls;\n    if (!ns) return fn();\n\n    let res;\n    ns.run(context => res = fn(context));\n    return res;\n  }\n\n  log(...args) {\n    let options;\n\n    const last = _.last(args);\n\n    if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, 'logging')) {\n      options = last;\n\n      // remove options from set of logged arguments if options.logging is equal to console.log\n      // eslint-disable-next-line no-console\n      if (options.logging === console.log) {\n        args.splice(args.length - 1, 1);\n      }\n    } else {\n      options = this.options;\n    }\n\n    if (options.logging) {\n      if (options.logging === true) {\n        deprecations.noTrueLogging();\n        // eslint-disable-next-line no-console\n        options.logging = console.log;\n      }\n\n      // second argument is sql-timings, when benchmarking option enabled\n      // eslint-disable-next-line no-console\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\n      }\n\n      options.logging(...args);\n    }\n  }\n\n  /**\n   * Close all connections used by this sequelize instance, and free all references so the instance can be garbage collected.\n   *\n   * Normally this is done on process exit, so you only need to call this method if you are creating multiple instances, and want\n   * to garbage collect some of them.\n   *\n   * @returns {Promise}\n   */\n  close() {\n    return this.connectionManager.close();\n  }\n\n  normalizeDataType(Type) {\n    let type = typeof Type === 'function' ? new Type() : Type;\n    const dialectTypes = this.dialect.DataTypes || {};\n\n    if (dialectTypes[type.key]) {\n      type = dialectTypes[type.key].extend(type);\n    }\n\n    if (type instanceof DataTypes.ARRAY) {\n      if (!type.type) {\n        throw new Error('ARRAY is missing type definition for its values.');\n      }\n      if (dialectTypes[type.type.key]) {\n        type.type = dialectTypes[type.type.key].extend(type.type);\n      }\n    }\n\n    return type;\n  }\n\n  normalizeAttribute(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = { type: attribute };\n    }\n\n    if (!attribute.type) return attribute;\n\n    attribute.type = this.normalizeDataType(attribute.type);\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'defaultValue')) {\n      if (typeof attribute.defaultValue === 'function' &&\n        [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)\n      ) {\n        attribute.defaultValue = new attribute.defaultValue();\n      }\n    }\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      // The ENUM is a special case where the type is an object containing the values\n      if (attribute.values) {\n        attribute.type.values = attribute.type.options.values = attribute.values;\n      } else {\n        attribute.values = attribute.type.values;\n      }\n\n      if (!attribute.values.length) {\n        throw new Error('Values for ENUM have not been defined.');\n      }\n    }\n\n    return attribute;\n  }\n}\n\n// Aliases\nSequelize.prototype.fn = Sequelize.fn;\nSequelize.prototype.col = Sequelize.col;\nSequelize.prototype.cast = Sequelize.cast;\nSequelize.prototype.literal = Sequelize.literal;\nSequelize.prototype.and = Sequelize.and;\nSequelize.prototype.or = Sequelize.or;\nSequelize.prototype.json = Sequelize.json;\nSequelize.prototype.where = Sequelize.where;\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\n\n/**\n * Sequelize version number.\n */\n// To avoid any errors on startup when this field is unused, only resolve it as needed.\n// this is to prevent any potential issues on startup with unusual environments (eg, bundled code)\n// where relative paths may fail that are unnecessary.\nObject.defineProperty(Sequelize, 'version', {\n  enumerable: true,\n  get() {\n    return require('../package.json').version;\n  }\n});\n\nSequelize.options = { hooks: {} };\n\n/**\n * @private\n */\nSequelize.Utils = Utils;\n\n/**\n * Operators symbols to be used for querying data\n *\n * @see  {@link Operators}\n */\nSequelize.Op = Op;\n\n/**\n * Available table hints to be used for querying data in mssql for table hints\n *\n * @see {@link TableHints}\n */\nSequelize.TableHints = TableHints;\n\n/**\n * Available index hints to be used for querying data in mysql for index hints\n *\n * @see {@link IndexHints}\n */\nSequelize.IndexHints = IndexHints;\n\n/**\n * A reference to the sequelize transaction class. Use this to access isolationLevels and types when creating a transaction\n *\n * @see {@link Transaction}\n * @see {@link Sequelize.transaction}\n */\nSequelize.Transaction = Transaction;\n\n/**\n * A reference to Sequelize constructor from sequelize. Useful for accessing DataTypes, Errors etc.\n *\n * @see {@link Sequelize}\n */\nSequelize.prototype.Sequelize = Sequelize;\n\n/**\n * Available query types for use with `sequelize.query`\n *\n * @see {@link QueryTypes}\n */\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\n\n/**\n * Exposes the validator.js object, so you can extend it with custom validation functions. The validator is exposed both on the instance, and on the constructor.\n *\n * @see https://github.com/chriso/validator.js\n */\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\n\nSequelize.Model = Model;\n\nSequelize.QueryInterface = QueryInterface;\nSequelize.BelongsTo = BelongsTo;\nSequelize.HasOne = HasOne;\nSequelize.HasMany = HasMany;\nSequelize.BelongsToMany = BelongsToMany;\n\nSequelize.DataTypes = DataTypes;\nfor (const dataType in DataTypes) {\n  Sequelize[dataType] = DataTypes[dataType];\n}\n\n/**\n * A reference to the deferrable collection. Use this to access the different deferrable options.\n *\n * @see {@link Transaction.Deferrable}\n * @see {@link Sequelize#transaction}\n */\nSequelize.Deferrable = Deferrable;\n\n/**\n * A reference to the sequelize association class.\n *\n * @see {@link Association}\n */\nSequelize.prototype.Association = Sequelize.Association = Association;\n\n/**\n * Provide alternative version of `inflection` module to be used by `Utils.pluralize` etc.\n *\n * @param {object} _inflection - `inflection` module\n */\nSequelize.useInflection = Utils.useInflection;\n\n/**\n * Allow hooks to be defined on Sequelize + on sequelize instance as universal hooks to run on all models\n * and on Sequelize/sequelize methods e.g. Sequelize(), Sequelize#define()\n */\nHooks.applyTo(Sequelize);\nHooks.applyTo(Sequelize.prototype);\n\n/**\n * Expose various errors available\n */\n\n// expose alias to BaseError\nSequelize.Error = sequelizeErrors.BaseError;\n\nfor (const error of Object.keys(sequelizeErrors)) {\n  Sequelize[error] = sequelizeErrors[error];\n}\n\nmodule.exports = Sequelize;\nmodule.exports.Sequelize = Sequelize;\nmodule.exports.default = Sequelize;\n"],
+  "mappings": "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",
   "names": []
 }
Index: backend/node_modules/sequelize/lib/transaction.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 3,\r\n  \"sources\": [\"../src/transaction.js\"],\r\n  \"sourcesContent\": [\"'use strict';\\n\\n/**\\n * The transaction object is used to identify a running transaction.\\n * It is created by calling `Sequelize.transaction()`.\\n * To run a query under a transaction, you should pass the transaction in the options object.\\n *\\n * @class Transaction\\n * @see {@link Sequelize.transaction}\\n */\\nclass Transaction {\\n  /**\\n   * Creates a new transaction instance\\n   *\\n   * @param {Sequelize} sequelize A configured sequelize Instance\\n   * @param {object} options An object with options\\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\\n   */\\n  constructor(sequelize, options) {\\n    this.sequelize = sequelize;\\n    this.savepoints = [];\\n    this._afterCommitHooks = [];\\n\\n    // get dialect specific transaction options\\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\\n\\n    this.options = {\\n      type: sequelize.options.transactionType,\\n      isolationLevel: sequelize.options.isolationLevel,\\n      readOnly: false,\\n      ...options\\n    };\\n\\n    this.parent = this.options.transaction;\\n\\n    if (this.parent) {\\n      this.id = this.parent.id;\\n      this.parent.savepoints.push(this);\\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\\n    } else {\\n      this.id = this.name = generateTransactionId();\\n    }\\n\\n    delete this.options.transaction;\\n  }\\n\\n  /**\\n   * Commit the transaction\\n   *\\n   * @returns {Promise}\\n   */\\n  async commit() {\\n    if (this.finished) {\\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\\n    }\\n\\n    try {\\n      await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\\n      this.cleanup();\\n    } catch (e) {\\n      console.warn(`Committing transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\\n      await this.forceCleanup();\\n\\n      throw e;\\n    } finally {\\n      this.finished = 'commit';\\n      for (const hook of this._afterCommitHooks) {\\n        await hook.apply(this, [this]);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Rollback (abort) the transaction\\n   *\\n   * @returns {Promise}\\n   */\\n  async rollback() {\\n    if (this.finished) {\\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\\n    }\\n\\n    if (!this.connection) {\\n      throw new Error('Transaction cannot be rolled back because it never started');\\n    }\\n\\n    try {\\n      await this\\n        .sequelize\\n        .getQueryInterface()\\n        .rollbackTransaction(this, this.options);\\n\\n      this.cleanup();\\n    } catch (e) {\\n      console.warn(`Rolling back transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\\n      await this.forceCleanup();\\n\\n      throw e;\\n    }\\n  }\\n\\n  /**\\n   * Called to acquire a connection to use and set the correct options on the connection.\\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\\n   *\\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\\n   * @returns {Promise}\\n   */\\n  async prepareEnvironment(useCLS = true) {\\n    let connectionPromise;\\n\\n    if (this.parent) {\\n      connectionPromise = Promise.resolve(this.parent.connection);\\n    } else {\\n      const acquireOptions = { uuid: this.id };\\n      if (this.options.readOnly) {\\n        acquireOptions.type = 'SELECT';\\n      }\\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\\n    }\\n\\n    let result;\\n    const connection = await connectionPromise;\\n    this.connection = connection;\\n    this.connection.uuid = this.id;\\n\\n    try {\\n      await this.begin();\\n      result = await this.setDeferrable();\\n    } catch (setupErr) {\\n      try {\\n        result = await this.rollback();\\n      } finally {\\n        throw setupErr; // eslint-disable-line no-unsafe-finally\\n      }\\n    }\\n\\n    // TODO (@ephys) [>=7.0.0]: move this inside of sequelize.transaction, remove parameter.\\n    if (useCLS && this.sequelize.constructor._cls) {\\n      this.sequelize.constructor._cls.set('transaction', this);\\n    }\\n\\n    return result;\\n  }\\n\\n  async setDeferrable() {\\n    if (this.options.deferrable) {\\n      return await this\\n        .sequelize\\n        .getQueryInterface()\\n        .deferConstraints(this, this.options);\\n    }\\n  }\\n\\n  async begin() {\\n    const queryInterface = this.sequelize.getQueryInterface();\\n\\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\\n      await queryInterface.startTransaction(this, this.options);\\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\\n    }\\n\\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\\n\\n    return queryInterface.startTransaction(this, this.options);\\n  }\\n\\n  cleanup() {\\n    // Don't release the connection if there's a parent transaction or\\n    // if we've already cleaned up\\n    if (this.parent || this.connection.uuid === undefined) {\\n      return;\\n    }\\n\\n    this._clearCls();\\n    this.sequelize.connectionManager.releaseConnection(this.connection);\\n    this.connection.uuid = undefined;\\n  }\\n\\n  /**\\n   * Kills the connection this transaction uses.\\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\\n   * and the transaction is left in a broken state,\\n   * and releasing the connection to the pool would be dangerous.\\n   */\\n  async forceCleanup() {\\n    // Don't release the connection if there's a parent transaction or\\n    // if we've already cleaned up\\n    if (this.parent || this.connection.uuid === undefined) {\\n      return;\\n    }\\n\\n    this._clearCls();\\n    await this.sequelize.connectionManager.destroyConnection(this.connection);\\n    this.connection.uuid = undefined;\\n  }\\n\\n  _clearCls() {\\n    const cls = this.sequelize.constructor._cls;\\n\\n    if (cls) {\\n      if (cls.get('transaction') === this) {\\n        cls.set('transaction', null);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * A hook that is run after a transaction is committed\\n   *\\n   * @param {Function} fn   A callback function that is called with the committed transaction\\n   * @name afterCommit\\n   * @memberof Sequelize.Transaction\\n   */\\n  afterCommit(fn) {\\n    if (!fn || typeof fn !== 'function') {\\n      throw new Error('\\\"fn\\\" must be a function');\\n    }\\n    this._afterCommitHooks.push(fn);\\n  }\\n\\n  /**\\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\\n   * Sqlite only.\\n   *\\n   * Pass in the desired level as the first argument:\\n   *\\n   * @example\\n   * try {\\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\\n   *      // your transactions\\n   *   });\\n   *   // transaction has been committed. Do something after the commit if required.\\n   * } catch(err) {\\n   *   // do something with the err.\\n   * }\\n   *\\n   * @property DEFERRED\\n   * @property IMMEDIATE\\n   * @property EXCLUSIVE\\n   */\\n  static get TYPES() {\\n    return {\\n      DEFERRED: 'DEFERRED',\\n      IMMEDIATE: 'IMMEDIATE',\\n      EXCLUSIVE: 'EXCLUSIVE'\\n    };\\n  }\\n\\n  /**\\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\\n   *\\n   * Pass in the desired level as the first argument:\\n   *\\n   * @example\\n   * try {\\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\\n   *     // your transactions\\n   *   });\\n   *   // transaction has been committed. Do something after the commit if required.\\n   * } catch(err) {\\n   *   // do something with the err.\\n   * }\\n   *\\n   * @property READ_UNCOMMITTED\\n   * @property READ_COMMITTED\\n   * @property REPEATABLE_READ\\n   * @property SERIALIZABLE\\n   */\\n  static get ISOLATION_LEVELS() {\\n    return {\\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\\n      READ_COMMITTED: 'READ COMMITTED',\\n      REPEATABLE_READ: 'REPEATABLE READ',\\n      SERIALIZABLE: 'SERIALIZABLE'\\n    };\\n  }\\n\\n\\n  /**\\n   * Possible options for row locking. Used in conjunction with `find` calls:\\n   *\\n   * @example\\n   * // t1 is a transaction\\n   * Model.findAll({\\n   *   where: ...,\\n   *   transaction: t1,\\n   *   lock: t1.LOCK...\\n   * });\\n   *\\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\\n   * UserModel.findAll({\\n   *   where: ...,\\n   *   include: [TaskModel, ...],\\n   *   transaction: t1,\\n   *   lock: {\\n   *     level: t1.LOCK...,\\n   *     of: UserModel\\n   *   }\\n   * });\\n   *\\n   * # UserModel will be locked but TaskModel won't!\\n   *\\n   * @example <caption>You can also skip locked rows:</caption>\\n   * // t1 is a transaction\\n   * Model.findAll({\\n   *   where: ...,\\n   *   transaction: t1,\\n   *   lock: true,\\n   *   skipLocked: true\\n   * });\\n   * # The query will now return any rows that aren't locked by another transaction\\n   *\\n   * @returns {object}\\n   * @property UPDATE\\n   * @property SHARE\\n   * @property KEY_SHARE Postgres 9.3+ only\\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\\n   */\\n  static get LOCK() {\\n    return {\\n      UPDATE: 'UPDATE',\\n      SHARE: 'SHARE',\\n      KEY_SHARE: 'KEY SHARE',\\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\\n    };\\n  }\\n\\n  /**\\n   * Please see {@link Transaction.LOCK}\\n   */\\n  get LOCK() {\\n    return Transaction.LOCK;\\n  }\\n}\\n\\nmodule.exports = Transaction;\\nmodule.exports.Transaction = Transaction;\\nmodule.exports.default = Transaction;\\n\"],\r\n  \"mappings\": \"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\",\r\n  \"names\": []\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/lib/transaction.js.map b/backend/node_modules/sequelize/lib/transaction.js.map
--- a/backend/node_modules/sequelize/lib/transaction.js.map	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/lib/transaction.js.map	(date 1713648521705)
@@ -1,7 +1,7 @@
 {
   "version": 3,
   "sources": ["../src/transaction.js"],
-  "sourcesContent": ["'use strict';\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options\n    };\n\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Committing transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    } finally {\n      this.finished = 'commit';\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Rolling back transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   * @returns {Promise}\n   */\n  async prepareEnvironment(useCLS = true) {\n    let connectionPromise;\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr; // eslint-disable-line no-unsafe-finally\n      }\n    }\n\n    // TODO (@ephys) [>=7.0.0]: move this inside of sequelize.transaction, remove parameter.\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  /**\n   * Kills the connection this transaction uses.\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\n   * and the transaction is left in a broken state,\n   * and releasing the connection to the pool would be dangerous.\n   */\n  async forceCleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    await this.sequelize.connectionManager.destroyConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.push(fn);\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"],
-  "mappings": "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",
+  "sourcesContent": ["'use strict';\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {@link Sequelize.transaction}\n */\nclass Transaction {\n  /**\n   * Creates a new transaction instance\n   *\n   * @param {Sequelize} sequelize A configured sequelize Instance\n   * @param {object} options An object with options\n   * @param {string} [options.type] Sets the type of the transaction. Sqlite only\n   * @param {string} [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param {string} [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   * @param {boolean} [options.readOnly] Whether this transaction will only be used to read data. Used to determine whether sequelize is allowed to use a read replication server.\n   */\n  constructor(sequelize, options) {\n    this.sequelize = sequelize;\n    this.savepoints = [];\n    this._afterCommitHooks = [];\n\n    // get dialect specific transaction options\n    const generateTransactionId = this.sequelize.dialect.queryGenerator.generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options\n    };\n\n    this.parent = this.options.transaction;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      this.id = this.name = generateTransactionId();\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction\n   *\n   * @returns {Promise}\n   */\n  async commit() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Committing transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    } finally {\n      this.finished = 'commit';\n      for (const hook of this._afterCommitHooks) {\n        await hook.apply(this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   *\n   * @returns {Promise}\n   */\n  async rollback() {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n\n      this.cleanup();\n    } catch (e) {\n      console.warn(`Rolling back transaction ${this.id} failed with error ${JSON.stringify(e.message)}. We are killing its connection as it is now in an undetermined state.`);\n      await this.forceCleanup();\n\n      throw e;\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param {boolean} useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   * @returns {Promise}\n   */\n  async prepareEnvironment(useCLS = true) {\n    let connectionPromise;\n\n    if (this.parent) {\n      connectionPromise = Promise.resolve(this.parent.connection);\n    } else {\n      const acquireOptions = { uuid: this.id };\n      if (this.options.readOnly) {\n        acquireOptions.type = 'SELECT';\n      }\n      connectionPromise = this.sequelize.connectionManager.getConnection(acquireOptions);\n    }\n\n    let result;\n    const connection = await connectionPromise;\n    this.connection = connection;\n    this.connection.uuid = this.id;\n\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (setupErr) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw setupErr; // eslint-disable-line no-unsafe-finally\n      }\n    }\n\n    // TODO (@ephys) [>=7.0.0]: move this inside of sequelize.transaction, remove parameter.\n    if (useCLS && this.sequelize.constructor._cls) {\n      this.sequelize.constructor._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable() {\n    if (this.options.deferrable) {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if ( this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction ) {\n      await queryInterface.startTransaction(this, this.options);\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  cleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  /**\n   * Kills the connection this transaction uses.\n   * Used as a last resort, for instance because COMMIT or ROLLBACK resulted in an error\n   * and the transaction is left in a broken state,\n   * and releasing the connection to the pool would be dangerous.\n   */\n  async forceCleanup() {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    await this.sequelize.connectionManager.destroyConnection(this.connection);\n    this.connection.uuid = undefined;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.constructor._cls;\n\n    if (cls) {\n      if (cls.get('transaction') === this) {\n        cls.set('transaction', null);\n      }\n    }\n  }\n\n  /**\n   * A hook that is run after a transaction is committed\n   *\n   * @param {Function} fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn) {\n    if (!fn || typeof fn !== 'function') {\n      throw new Error('\"fn\" must be a function');\n    }\n    this._afterCommitHooks.push(fn);\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return {\n      DEFERRED: 'DEFERRED',\n      IMMEDIATE: 'IMMEDIATE',\n      EXCLUSIVE: 'EXCLUSIVE'\n    };\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return {\n      READ_UNCOMMITTED: 'READ UNCOMMITTED',\n      READ_COMMITTED: 'READ COMMITTED',\n      REPEATABLE_READ: 'REPEATABLE READ',\n      SERIALIZABLE: 'SERIALIZABLE'\n    };\n  }\n\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns {object}\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return {\n      UPDATE: 'UPDATE',\n      SHARE: 'SHARE',\n      KEY_SHARE: 'KEY SHARE',\n      NO_KEY_UPDATE: 'NO KEY UPDATE'\n    };\n  }\n\n  /**\n   * Please see {@link Transaction.LOCK}\n   */\n  get LOCK() {\n    return Transaction.LOCK;\n  }\n}\n\nmodule.exports = Transaction;\nmodule.exports.Transaction = Transaction;\nmodule.exports.default = Transaction;\n"],
+  "mappings": "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",
   "names": []
 }
Index: backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use strict\";\r\nconst _ = require(\"lodash\");\r\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\r\nconst { logger } = require(\"../../utils/logger\");\r\nconst debug = logger.debugContext(\"connection:pg\");\r\nconst sequelizeErrors = require(\"../../errors\");\r\nconst semver = require(\"semver\");\r\nconst dataTypes = require(\"../../data-types\");\r\nconst momentTz = require(\"moment-timezone\");\r\nconst { promisify } = require(\"util\");\r\nclass ConnectionManager extends AbstractConnectionManager {\r\n  constructor(dialect, sequelize) {\r\n    sequelize.config.port = sequelize.config.port || 5432;\r\n    super(dialect, sequelize);\r\n    const pgLib = this._loadDialectModule(\"pg\");\r\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\r\n    this._clearDynamicOIDs();\r\n    this._clearTypeParser();\r\n    this.refreshTypeParser(dataTypes.postgres);\r\n  }\r\n  _refreshTypeParser(dataType) {\r\n    const arrayParserBuilder = (parser2) => {\r\n      return (value) => this.lib.types.arrayParser.create(value, parser2).parse();\r\n    };\r\n    const rangeParserBuilder = (parser2) => {\r\n      return (value) => dataType.parse(value, { parser: parser2 });\r\n    };\r\n    if (dataType.key.toLowerCase() === \"range\") {\r\n      for (const name in this.nameOidMap) {\r\n        const entry = this.nameOidMap[name];\r\n        if (!entry.rangeOid)\r\n          continue;\r\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\r\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\r\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\r\n        if (!entry.arrayRangeOid)\r\n          continue;\r\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\r\n      }\r\n      return;\r\n    }\r\n    const parser = (value) => dataType.parse(value);\r\n    const arrayParser = arrayParserBuilder(parser);\r\n    if (dataType.key.toLowerCase() === \"enum\") {\r\n      this.enumOids.oids.forEach((oid) => {\r\n        this.oidParserMap.set(oid, parser);\r\n      });\r\n      this.enumOids.arrayOids.forEach((arrayOid) => {\r\n        this.oidParserMap.set(arrayOid, arrayParser);\r\n      });\r\n      return;\r\n    }\r\n    dataType.types.postgres.forEach((name) => {\r\n      if (!this.nameOidMap[name])\r\n        return;\r\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\r\n      if (!this.nameOidMap[name].arrayOid)\r\n        return;\r\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\r\n    });\r\n  }\r\n  _clearTypeParser() {\r\n    this.oidParserMap = /* @__PURE__ */ new Map();\r\n  }\r\n  getTypeParser(oid, ...args) {\r\n    if (this.oidParserMap.get(oid))\r\n      return this.oidParserMap.get(oid);\r\n    return this.lib.types.getTypeParser(oid, ...args);\r\n  }\r\n  async connect(config) {\r\n    config.user = config.username;\r\n    const connectionConfig = _.pick(config, [\r\n      \"user\",\r\n      \"password\",\r\n      \"host\",\r\n      \"database\",\r\n      \"port\"\r\n    ]);\r\n    connectionConfig.types = {\r\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\r\n    };\r\n    if (config.dialectOptions) {\r\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [\r\n        \"application_name\",\r\n        \"ssl\",\r\n        \"client_encoding\",\r\n        \"binary\",\r\n        \"keepAlive\",\r\n        \"statement_timeout\",\r\n        \"query_timeout\",\r\n        \"idle_in_transaction_session_timeout\",\r\n        \"lock_timeout\",\r\n        \"options\"\r\n      ]));\r\n    }\r\n    const connection = await new Promise((resolve, reject) => {\r\n      let responded = false;\r\n      const connection2 = new this.lib.Client(connectionConfig);\r\n      const parameterHandler = (message) => {\r\n        switch (message.parameterName) {\r\n          case \"server_version\":\r\n            if (this.sequelize.options.databaseVersion === 0) {\r\n              const version = semver.coerce(message.parameterValue).version;\r\n              this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.dialect.defaultVersion;\r\n            }\r\n            break;\r\n          case \"standard_conforming_strings\":\r\n            connection2[\"standard_conforming_strings\"] = message.parameterValue;\r\n            break;\r\n        }\r\n      };\r\n      const endHandler = () => {\r\n        debug(\"connection timeout\");\r\n        if (!responded) {\r\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error(\"Connection timed out\")));\r\n        }\r\n      };\r\n      connection2.once(\"end\", endHandler);\r\n      if (!this.sequelize.config.native) {\r\n        connection2.connection.on(\"parameterStatus\", parameterHandler);\r\n      }\r\n      connection2.connect((err) => {\r\n        responded = true;\r\n        if (!this.sequelize.config.native) {\r\n          connection2.connection.removeListener(\"parameterStatus\", parameterHandler);\r\n        }\r\n        if (err) {\r\n          if (err.code) {\r\n            switch (err.code) {\r\n              case \"ECONNREFUSED\":\r\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\r\n                break;\r\n              case \"ENOTFOUND\":\r\n                reject(new sequelizeErrors.HostNotFoundError(err));\r\n                break;\r\n              case \"EHOSTUNREACH\":\r\n                reject(new sequelizeErrors.HostNotReachableError(err));\r\n                break;\r\n              case \"EINVAL\":\r\n                reject(new sequelizeErrors.InvalidConnectionError(err));\r\n                break;\r\n              default:\r\n                reject(new sequelizeErrors.ConnectionError(err));\r\n                break;\r\n            }\r\n          } else {\r\n            reject(new sequelizeErrors.ConnectionError(err));\r\n          }\r\n        } else {\r\n          debug(\"connection acquired\");\r\n          connection2.removeListener(\"end\", endHandler);\r\n          resolve(connection2);\r\n        }\r\n      });\r\n    });\r\n    connection.on(\"error\", (error) => {\r\n      connection._invalid = true;\r\n      debug(`connection error ${error.code || error.message}`);\r\n      this.pool.destroy(connection);\r\n    });\r\n    let query = \"\";\r\n    if (this.sequelize.options.standardConformingStrings !== false && connection[\"standard_conforming_strings\"] !== \"on\") {\r\n      query += \"SET standard_conforming_strings=on;\";\r\n    }\r\n    if (this.sequelize.options.clientMinMessages !== void 0) {\r\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\r\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\r\n    }\r\n    if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === \"ignore\" || this.sequelize.options.clientMinMessages === false)) {\r\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || \"warning\";\r\n      query += `SET client_min_messages TO ${clientMinMessages};`;\r\n    }\r\n    if (!this.sequelize.config.keepDefaultTimezone) {\r\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\r\n      if (isZone) {\r\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\r\n      } else {\r\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\r\n      }\r\n    }\r\n    if (query) {\r\n      await connection.query(query);\r\n    }\r\n    if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {\r\n      await this._refreshDynamicOIDs(connection);\r\n    }\r\n    return connection;\r\n  }\r\n  async disconnect(connection) {\r\n    if (connection._ending) {\r\n      debug(\"connection tried to disconnect but was already at ENDING state\");\r\n      return;\r\n    }\r\n    return await promisify((callback) => connection.end(callback))();\r\n  }\r\n  validate(connection) {\r\n    return !connection._invalid && !connection._ending;\r\n  }\r\n  async _refreshDynamicOIDs(connection) {\r\n    const databaseVersion = this.sequelize.options.databaseVersion;\r\n    const supportedVersion = \"8.3.0\";\r\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\r\n      return;\r\n    }\r\n    const results = await (connection || this.sequelize).query(\"WITH ranges AS (  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,         pg_type.typarray AS rngtyparray, pg_range.rngsubtype    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid)SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype WHERE (pg_type.typtype IN('b', 'e'));\");\r\n    let result = Array.isArray(results) ? results.pop() : results;\r\n    if (Array.isArray(result)) {\r\n      if (result[0].command === \"SET\") {\r\n        result = result.pop();\r\n      }\r\n    }\r\n    const newNameOidMap = {};\r\n    const newEnumOids = { oids: [], arrayOids: [] };\r\n    for (const row of result.rows) {\r\n      if (row.typtype === \"e\") {\r\n        newEnumOids.oids.push(row.oid);\r\n        if (row.typarray)\r\n          newEnumOids.arrayOids.push(row.typarray);\r\n        continue;\r\n      }\r\n      newNameOidMap[row.typname] = { oid: row.oid };\r\n      if (row.typarray)\r\n        newNameOidMap[row.typname].arrayOid = row.typarray;\r\n      if (row.rngtypid) {\r\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\r\n        if (row.rngtyparray)\r\n          newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\r\n      }\r\n    }\r\n    this.nameOidMap = newNameOidMap;\r\n    this.enumOids = newEnumOids;\r\n    this.refreshTypeParser(dataTypes.postgres);\r\n  }\r\n  _clearDynamicOIDs() {\r\n    this.nameOidMap = {};\r\n    this.enumOids = { oids: [], arrayOids: [] };\r\n  }\r\n}\r\nmodule.exports = ConnectionManager;\r\nmodule.exports.ConnectionManager = ConnectionManager;\r\nmodule.exports.default = ConnectionManager;\r\n//# sourceMappingURL=connection-manager.js.map\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js b/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js
--- a/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js	(date 1713648521465)
@@ -88,9 +88,11 @@
         "keepAlive",
         "statement_timeout",
         "query_timeout",
+        "connectionTimeoutMillis",
         "idle_in_transaction_session_timeout",
         "lock_timeout",
-        "options"
+        "options",
+        "stream"
       ]));
     }
     const connection = await new Promise((resolve, reject) => {
Index: backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 3,\r\n  \"sources\": [\"../../../src/dialects/postgres/query-interface.js\"],\r\n  \"sourcesContent\": [\"'use strict';\\n\\nconst DataTypes = require('../../data-types');\\nconst QueryTypes = require('../../query-types');\\nconst { QueryInterface } = require('../abstract/query-interface');\\nconst Utils = require('../../utils');\\nconst Deferrable = require('../../deferrable');\\n\\n/**\\n * The interface that Sequelize uses to talk with Postgres database\\n */\\nclass PostgresQueryInterface extends QueryInterface {\\n  /**\\n   * Ensure enum and their values.\\n   *\\n   * @param {string} tableName  Name of table to create\\n   * @param {object} attributes Object representing a list of normalized table attributes\\n   * @param {object} [options]\\n   * @param {Model}  [model]\\n   *\\n   * @protected\\n   */\\n  async ensureEnums(tableName, attributes, options, model) {\\n    const keys = Object.keys(attributes);\\n    const keyLen = keys.length;\\n\\n    let sql = '';\\n    let promises = [];\\n    let i = 0;\\n\\n    for (i = 0; i < keyLen; i++) {\\n      const attribute = attributes[keys[i]];\\n      const type = attribute.type;\\n\\n      if (\\n        type instanceof DataTypes.ENUM ||\\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\\n      ) {\\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\\n        promises.push(this.sequelize.query(\\n          sql,\\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\\n        ));\\n      }\\n    }\\n\\n    const results = await Promise.all(promises);\\n    promises = [];\\n    let enumIdx = 0;\\n\\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\\n      const valueOptions = { ...options };\\n      valueOptions.before = null;\\n      valueOptions.after = null;\\n\\n      switch (position) {\\n        case 'after':\\n          valueOptions.after = relativeValue;\\n          break;\\n        case 'before':\\n        default:\\n          valueOptions.before = relativeValue;\\n          break;\\n      }\\n\\n      promises.splice(spliceStart, 0, () => {\\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\\n          tableName, field, value, valueOptions\\n        ), valueOptions);\\n      });\\n    };\\n\\n    for (i = 0; i < keyLen; i++) {\\n      const attribute = attributes[keys[i]];\\n      const type = attribute.type;\\n      const enumType = type.type || type;\\n      const field = attribute.field || keys[i];\\n\\n      if (\\n        type instanceof DataTypes.ENUM ||\\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\\n      ) {\\n        // If the enum type doesn't exist then create it\\n        if (!results[enumIdx]) {\\n          promises.push(() => {\\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\\n          });\\n        } else if (!!results[enumIdx] && !!model) {\\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\\n          const vals = enumType.values;\\n\\n          // Going through already existing values allows us to make queries that depend on those values\\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\\n          // Then we append the rest of new values AFTER the latest already existing value\\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\\n          let lastOldEnumValue;\\n          let rightestPosition = -1;\\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\\n            const enumVal = enumVals[oldIndex];\\n            const newIdx = vals.indexOf(enumVal);\\n            lastOldEnumValue = enumVal;\\n\\n            if (newIdx === -1) {\\n              continue;\\n            }\\n\\n            const newValuesBefore = vals.slice(0, newIdx);\\n            const promisesLength = promises.length;\\n            // we go in reverse order so we could stop when we meet old value\\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\\n                break;\\n              }\\n\\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\\n            }\\n\\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\\n            if (newIdx > rightestPosition) {\\n              rightestPosition = newIdx;\\n            }\\n          }\\n\\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\\n            }\\n          }\\n\\n          enumIdx++;\\n        }\\n      }\\n    }\\n\\n    const result = await promises\\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\\n\\n    // If ENUM processed, then refresh OIDs\\n    if (promises.length) {\\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @override\\n   */\\n  async getForeignKeyReferencesForTable(table, options) {\\n    const queryOptions = {\\n      ...options,\\n      type: QueryTypes.FOREIGNKEYS\\n    };\\n\\n    // postgres needs some special treatment as those field names returned are all lowercase\\n    // in order to keep same result with other dialects.\\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\\n    const result = await this.sequelize.query(query, queryOptions);\\n\\n    return result.map(fkMeta => {\\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\\n\\n      return {\\n        ...remaining,\\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\\n            : Deferrable.INITIALLY_DEFERRED\\n      };\\n    });\\n  }\\n\\n  /**\\n   * Drop specified enum from database (Postgres only)\\n   *\\n   * @param {string} [enumName]  Enum name to drop\\n   * @param {object} options Query options\\n   *\\n   * @returns {Promise}\\n   */\\n  async dropEnum(enumName, options) {\\n    options = options || {};\\n\\n    return this.sequelize.query(\\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\\n      { ...options, raw: true }\\n    );\\n  }\\n\\n  /**\\n   * Drop all enums from database (Postgres only)\\n   *\\n   * @param {object} options Query options\\n   *\\n   * @returns {Promise}\\n   */\\n  async dropAllEnums(options) {\\n    options = options || {};\\n\\n    const enums = await this.pgListEnums(null, options);\\n\\n    return await Promise.all(enums.map(result => this.sequelize.query(\\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\\n      { ...options, raw: true }\\n    )));\\n  }\\n\\n  /**\\n   * List all enums (Postgres only)\\n   *\\n   * @param {string} [tableName]  Table whose enum to list\\n   * @param {object} [options]    Query options\\n   *\\n   * @returns {Promise}\\n   */\\n  async pgListEnums(tableName, options) {\\n    options = options || {};\\n    const sql = this.queryGenerator.pgListEnums(tableName);\\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\\n  }\\n\\n  /**\\n   * Since postgres has a special case for enums, we should drop the related\\n   * enum type within the table and attribute\\n   *\\n   * @override\\n   */\\n  async dropTable(tableName, options) {\\n    await super.dropTable(tableName, options);\\n    const promises = [];\\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\\n\\n    if (!instanceTable) {\\n      // Do nothing when model is not available\\n      return;\\n    }\\n\\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\\n\\n    const keys = Object.keys(instanceTable.rawAttributes);\\n    const keyLen = keys.length;\\n\\n    for (let i = 0; i < keyLen; i++) {\\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\\n        options.supportsSearchPath = false;\\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\\n      }\\n    }\\n\\n    await Promise.all(promises);\\n  }\\n}\\n\\nexports.PostgresQueryInterface = PostgresQueryInterface;\\n\"],\r\n  \"mappings\": \"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\",\r\n  \"names\": []\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map b/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map
--- a/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map	(date 1713648521685)
@@ -1,7 +1,7 @@
 {
   "version": 3,
   "sources": ["../../../src/dialects/postgres/query-interface.js"],
-  "sourcesContent": ["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\nconst Deferrable = require('../../deferrable');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\n    const result = await this.sequelize.query(query, queryOptions);\n\n    return result.map(fkMeta => {\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\n\n      return {\n        ...remaining,\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.INITIALLY_DEFERRED\n      };\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"],
-  "mappings": "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",
+  "sourcesContent": ["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\nconst Deferrable = require('../../deferrable');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database, table.schema);\n    const result = await this.sequelize.query(query, queryOptions);\n\n    return result.map(fkMeta => {\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\n\n      return {\n        ...remaining,\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.INITIALLY_DEFERRED\n      };\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"],
+  "mappings": "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",
   "names": []
 }
Index: backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 3,\r\n  \"sources\": [\"../../../src/dialects/postgres/connection-manager.js\"],\r\n  \"sourcesContent\": [\"'use strict';\\n\\nconst _ = require('lodash');\\nconst AbstractConnectionManager = require('../abstract/connection-manager');\\nconst { logger } = require('../../utils/logger');\\nconst debug = logger.debugContext('connection:pg');\\nconst sequelizeErrors = require('../../errors');\\nconst semver = require('semver');\\nconst dataTypes = require('../../data-types');\\nconst momentTz = require('moment-timezone');\\nconst { promisify } = require('util');\\n\\nclass ConnectionManager extends AbstractConnectionManager {\\n  constructor(dialect, sequelize) {\\n    sequelize.config.port = sequelize.config.port || 5432;\\n    super(dialect, sequelize);\\n\\n    const pgLib = this._loadDialectModule('pg');\\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\\n\\n    this._clearDynamicOIDs();\\n    this._clearTypeParser();\\n    this.refreshTypeParser(dataTypes.postgres);\\n  }\\n\\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\\n  _refreshTypeParser(dataType) {\\n    const arrayParserBuilder = parser => {\\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\\n    };\\n    const rangeParserBuilder = parser => {\\n      return value => dataType.parse(value, { parser });\\n    };\\n\\n    // Set range parsers\\n    if (dataType.key.toLowerCase() === 'range') {\\n      for (const name in this.nameOidMap) {\\n        const entry = this.nameOidMap[name];\\n        if (! entry.rangeOid) continue;\\n\\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\\n\\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\\n        if (! entry.arrayRangeOid) continue;\\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\\n      }\\n      return;\\n    }\\n\\n    // Create parsers for normal or enum data types\\n    const parser = value => dataType.parse(value);\\n    const arrayParser = arrayParserBuilder(parser);\\n\\n    // Set enum parsers\\n    if (dataType.key.toLowerCase() === 'enum') {\\n      this.enumOids.oids.forEach(oid => {\\n        this.oidParserMap.set(oid, parser);\\n      });\\n      this.enumOids.arrayOids.forEach(arrayOid => {\\n        this.oidParserMap.set(arrayOid, arrayParser);\\n      });\\n      return;\\n    }\\n\\n    // Set parsers for normal data types\\n    dataType.types.postgres.forEach(name => {\\n      if (! this.nameOidMap[name]) return;\\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\\n\\n      if (! this.nameOidMap[name].arrayOid) return;\\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\\n    });\\n  }\\n\\n  _clearTypeParser() {\\n    this.oidParserMap = new Map();\\n  }\\n\\n  getTypeParser(oid, ...args) {\\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\\n\\n    return this.lib.types.getTypeParser(oid, ...args);\\n  }\\n\\n  async connect(config) {\\n    config.user = config.username;\\n    const connectionConfig = _.pick(config, [\\n      'user', 'password', 'host', 'database', 'port'\\n    ]);\\n\\n    connectionConfig.types = {\\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\\n    };\\n\\n    if (config.dialectOptions) {\\n      _.merge(connectionConfig,\\n        _.pick(config.dialectOptions, [\\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\\n          'application_name',\\n          // choose the SSL mode with the PGSSLMODE environment variable\\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\\n          'ssl',\\n          // In addition to the values accepted by the corresponding server,\\n          // you can use \\\"auto\\\" to determine the right encoding from the\\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\\n          'client_encoding',\\n          // !! DO NOT SET THIS TO TRUE !!\\n          // (unless you know what you're doing)\\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\\n          'binary',\\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\\n          'keepAlive',\\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\\n          'statement_timeout',\\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\\n          'query_timeout',\\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\\n          'idle_in_transaction_session_timeout',\\n          // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\\n          'lock_timeout',\\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\\n          'options'\\n        ]));\\n    }\\n\\n    const connection = await new Promise((resolve, reject) => {\\n      let responded = false;\\n\\n      const connection = new this.lib.Client(connectionConfig);\\n\\n      const parameterHandler = message => {\\n        switch (message.parameterName) {\\n          case 'server_version':\\n            if (this.sequelize.options.databaseVersion === 0) {\\n              const version = semver.coerce(message.parameterValue).version;\\n              this.sequelize.options.databaseVersion = semver.valid(version)\\n                ? version\\n                : this.dialect.defaultVersion;\\n            }\\n            break;\\n          case 'standard_conforming_strings':\\n            connection['standard_conforming_strings'] = message.parameterValue;\\n            break;\\n        }\\n      };\\n\\n      const endHandler = () => {\\n        debug('connection timeout');\\n        if (!responded) {\\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\\n        }\\n      };\\n\\n      // If we didn't ever hear from the client.connect() callback the connection timeout\\n      // node-postgres does not treat this as an error since no active query was ever emitted\\n      connection.once('end', endHandler);\\n\\n      if (!this.sequelize.config.native) {\\n        // Receive various server parameters for further configuration\\n        connection.connection.on('parameterStatus', parameterHandler);\\n      }\\n\\n      connection.connect(err => {\\n        responded = true;\\n\\n        if (!this.sequelize.config.native) {\\n          // remove parameter handler\\n          connection.connection.removeListener('parameterStatus', parameterHandler);\\n        }\\n\\n        if (err) {\\n          if (err.code) {\\n            switch (err.code) {\\n              case 'ECONNREFUSED':\\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\\n                break;\\n              case 'ENOTFOUND':\\n                reject(new sequelizeErrors.HostNotFoundError(err));\\n                break;\\n              case 'EHOSTUNREACH':\\n                reject(new sequelizeErrors.HostNotReachableError(err));\\n                break;\\n              case 'EINVAL':\\n                reject(new sequelizeErrors.InvalidConnectionError(err));\\n                break;\\n              default:\\n                reject(new sequelizeErrors.ConnectionError(err));\\n                break;\\n            }\\n          } else {\\n            reject(new sequelizeErrors.ConnectionError(err));\\n          }\\n        } else {\\n          debug('connection acquired');\\n          connection.removeListener('end', endHandler);\\n          resolve(connection);\\n        }\\n      });\\n    });\\n\\n    // Don't let a Postgres restart (or error) to take down the whole app\\n    connection.on('error', error => {\\n      connection._invalid = true;\\n      debug(`connection error ${error.code || error.message}`);\\n      this.pool.destroy(connection);\\n    });\\n\\n    let query = '';\\n\\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\\n      // Disable escape characters in strings\\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\\n      query += 'SET standard_conforming_strings=on;';\\n    }\\n\\n    if (this.sequelize.options.clientMinMessages !== undefined) {\\n      console.warn('Usage of \\\"options.clientMinMessages\\\" is deprecated and will be removed in v7.');\\n      console.warn('Please use the sequelize option \\\"dialectOptions.clientMinMessages\\\" instead.');\\n    }\\n\\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\\n    // If no option, the default value in sequelize is 'warning'\\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\\n            this.sequelize.options.clientMinMessages === false ) ) {\\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\\n      query += `SET client_min_messages TO ${clientMinMessages};`;\\n\\n    }\\n\\n    if (!this.sequelize.config.keepDefaultTimezone) {\\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\\n      if (isZone) {\\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\\n      } else {\\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\\n      }\\n    }\\n\\n    if (query) {\\n      await connection.query(query);\\n    }\\n    if (Object.keys(this.nameOidMap).length === 0 &&\\n      this.enumOids.oids.length === 0 &&\\n      this.enumOids.arrayOids.length === 0) {\\n      await this._refreshDynamicOIDs(connection);\\n    }\\n\\n    return connection;\\n  }\\n\\n  async disconnect(connection) {\\n    if (connection._ending) {\\n      debug('connection tried to disconnect but was already at ENDING state');\\n      return;\\n    }\\n\\n    return await promisify(callback => connection.end(callback))();\\n  }\\n\\n  validate(connection) {\\n    return !connection._invalid && !connection._ending;\\n  }\\n\\n  async _refreshDynamicOIDs(connection) {\\n    const databaseVersion = this.sequelize.options.databaseVersion;\\n    const supportedVersion = '8.3.0';\\n\\n    // Check for supported version\\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\\n      return;\\n    }\\n\\n    const results = await (connection || this.sequelize).query(\\n      'WITH ranges AS (' +\\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\\n      ')' +\\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\\n      ' WHERE (pg_type.typtype IN(\\\\'b\\\\', \\\\'e\\\\'));'\\n    );\\n\\n    let result = Array.isArray(results) ? results.pop() : results;\\n\\n    // When searchPath is prepended then two statements are executed and the result is\\n    // an array of those two statements. First one is the SET search_path and second is\\n    // the SELECT query result.\\n    if (Array.isArray(result)) {\\n      if (result[0].command === 'SET') {\\n        result = result.pop();\\n      }\\n    }\\n\\n    const newNameOidMap = {};\\n    const newEnumOids = { oids: [], arrayOids: [] };\\n\\n    for (const row of result.rows) {\\n      // Mapping enums, handled separatedly\\n      if (row.typtype === 'e') {\\n        newEnumOids.oids.push(row.oid);\\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\\n        continue;\\n      }\\n\\n      // Mapping base types and their arrays\\n      newNameOidMap[row.typname] = { oid: row.oid };\\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\\n\\n      // Mapping ranges(of base types) and their arrays\\n      if (row.rngtypid) {\\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\\n      }\\n    }\\n\\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\\n    this.nameOidMap = newNameOidMap;\\n    this.enumOids = newEnumOids;\\n\\n    this.refreshTypeParser(dataTypes.postgres);\\n  }\\n\\n  _clearDynamicOIDs() {\\n    this.nameOidMap = {};\\n    this.enumOids = { oids: [], arrayOids: [] };\\n  }\\n}\\n\\nmodule.exports = ConnectionManager;\\nmodule.exports.ConnectionManager = ConnectionManager;\\nmodule.exports.default = ConnectionManager;\\n\"],\r\n  \"mappings\": \"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\",\r\n  \"names\": []\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map b/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map
--- a/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map	(date 1713648521595)
@@ -1,7 +1,7 @@
 {
   "version": 3,
   "sources": ["../../../src/dialects/postgres/connection-manager.js"],
-  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst momentTz = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\n          'lock_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options'\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== undefined) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\n    // If no option, the default value in sequelize is 'warning'\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\n            this.sequelize.options.clientMinMessages === false ) ) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],
-  "mappings": ";AAEA,MAAM,IAAI,QAAQ;AAClB,MAAM,4BAA4B,QAAQ;AAC1C,MAAM,EAAE,WAAW,QAAQ;AAC3B,MAAM,QAAQ,OAAO,aAAa;AAClC,MAAM,kBAAkB,QAAQ;AAChC,MAAM,SAAS,QAAQ;AACvB,MAAM,YAAY,QAAQ;AAC1B,MAAM,WAAW,QAAQ;AACzB,MAAM,EAAE,cAAc,QAAQ;AAE9B,gCAAgC,0BAA0B;AAAA,EACxD,YAAY,SAAS,WAAW;AAC9B,cAAU,OAAO,OAAO,UAAU,OAAO,QAAQ;AACjD,UAAM,SAAS;AAEf,UAAM,QAAQ,KAAK,mBAAmB;AACtC,SAAK,MAAM,KAAK,UAAU,OAAO,SAAS,MAAM,SAAS;AAEzD,SAAK;AACL,SAAK;AACL,SAAK,kBAAkB,UAAU;AAAA;AAAA,EAInC,mBAAmB,UAAU;AAC3B,UAAM,qBAAqB,aAAU;AACnC,aAAO,WAAS,KAAK,IAAI,MAAM,YAAY,OAAO,OAAO,SAAQ;AAAA;AAEnE,UAAM,qBAAqB,aAAU;AACnC,aAAO,WAAS,SAAS,MAAM,OAAO,EAAE;AAAA;AAI1C,QAAI,SAAS,IAAI,kBAAkB,SAAS;AAC1C,iBAAW,QAAQ,KAAK,YAAY;AAClC,cAAM,QAAQ,KAAK,WAAW;AAC9B,YAAI,CAAE,MAAM;AAAU;AAEtB,cAAM,cAAc,mBAAmB,KAAK,cAAc,MAAM;AAChE,cAAM,mBAAmB,mBAAmB;AAE5C,aAAK,aAAa,IAAI,MAAM,UAAU;AACtC,YAAI,CAAE,MAAM;AAAe;AAC3B,aAAK,aAAa,IAAI,MAAM,eAAe;AAAA;AAE7C;AAAA;AAIF,UAAM,SAAS,WAAS,SAAS,MAAM;AACvC,UAAM,cAAc,mBAAmB;AAGvC,QAAI,SAAS,IAAI,kBAAkB,QAAQ;AACzC,WAAK,SAAS,KAAK,QAAQ,SAAO;AAChC,aAAK,aAAa,IAAI,KAAK;AAAA;AAE7B,WAAK,SAAS,UAAU,QAAQ,cAAY;AAC1C,aAAK,aAAa,IAAI,UAAU;AAAA;AAElC;AAAA;AAIF,aAAS,MAAM,SAAS,QAAQ,UAAQ;AACtC,UAAI,CAAE,KAAK,WAAW;AAAO;AAC7B,WAAK,aAAa,IAAI,KAAK,WAAW,MAAM,KAAK;AAEjD,UAAI,CAAE,KAAK,WAAW,MAAM;AAAU;AACtC,WAAK,aAAa,IAAI,KAAK,WAAW,MAAM,UAAU;AAAA;AAAA;AAAA,EAI1D,mBAAmB;AACjB,SAAK,eAAe,oBAAI;AAAA;AAAA,EAG1B,cAAc,QAAQ,MAAM;AAC1B,QAAI,KAAK,aAAa,IAAI;AAAM,aAAO,KAAK,aAAa,IAAI;AAE7D,WAAO,KAAK,IAAI,MAAM,cAAc,KAAK,GAAG;AAAA;AAAA,QAGxC,QAAQ,QAAQ;AACpB,WAAO,OAAO,OAAO;AACrB,UAAM,mBAAmB,EAAE,KAAK,QAAQ;AAAA,MACtC;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAY;AAAA;AAG1C,qBAAiB,QAAQ;AAAA,MACvB,eAAe,kBAAkB,UAAU,cAAc,KAAK;AAAA;AAGhE,QAAI,OAAO,gBAAgB;AACzB,QAAE,MAAM,kBACN,EAAE,KAAK,OAAO,gBAAgB;AAAA,QAE5B;AAAA,QAIA;AAAA,QAIA;AAAA,QAIA;AAAA,QAGA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAGA;AAAA;AAAA;AAIN,UAAM,aAAa,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACxD,UAAI,YAAY;AAEhB,YAAM,cAAa,IAAI,KAAK,IAAI,OAAO;AAEvC,YAAM,mBAAmB,aAAW;AAClC,gBAAQ,QAAQ;AAAA,eACT;AACH,gBAAI,KAAK,UAAU,QAAQ,oBAAoB,GAAG;AAChD,oBAAM,UAAU,OAAO,OAAO,QAAQ,gBAAgB;AACtD,mBAAK,UAAU,QAAQ,kBAAkB,OAAO,MAAM,WAClD,UACA,KAAK,QAAQ;AAAA;AAEnB;AAAA,eACG;AACH,wBAAW,iCAAiC,QAAQ;AACpD;AAAA;AAAA;AAIN,YAAM,aAAa,MAAM;AACvB,cAAM;AACN,YAAI,CAAC,WAAW;AACd,iBAAO,IAAI,gBAAgB,wBAAwB,IAAI,MAAM;AAAA;AAAA;AAMjE,kBAAW,KAAK,OAAO;AAEvB,UAAI,CAAC,KAAK,UAAU,OAAO,QAAQ;AAEjC,oBAAW,WAAW,GAAG,mBAAmB;AAAA;AAG9C,kBAAW,QAAQ,SAAO;AACxB,oBAAY;AAEZ,YAAI,CAAC,KAAK,UAAU,OAAO,QAAQ;AAEjC,sBAAW,WAAW,eAAe,mBAAmB;AAAA;AAG1D,YAAI,KAAK;AACP,cAAI,IAAI,MAAM;AACZ,oBAAQ,IAAI;AAAA,mBACL;AACH,uBAAO,IAAI,gBAAgB,uBAAuB;AAClD;AAAA,mBACG;AACH,uBAAO,IAAI,gBAAgB,kBAAkB;AAC7C;AAAA,mBACG;AACH,uBAAO,IAAI,gBAAgB,sBAAsB;AACjD;AAAA,mBACG;AACH,uBAAO,IAAI,gBAAgB,uBAAuB;AAClD;AAAA;AAEA,uBAAO,IAAI,gBAAgB,gBAAgB;AAC3C;AAAA;AAAA,iBAEC;AACL,mBAAO,IAAI,gBAAgB,gBAAgB;AAAA;AAAA,eAExC;AACL,gBAAM;AACN,sBAAW,eAAe,OAAO;AACjC,kBAAQ;AAAA;AAAA;AAAA;AAMd,eAAW,GAAG,SAAS,WAAS;AAC9B,iBAAW,WAAW;AACtB,YAAM,oBAAoB,MAAM,QAAQ,MAAM;AAC9C,WAAK,KAAK,QAAQ;AAAA;AAGpB,QAAI,QAAQ;AAEZ,QAAI,KAAK,UAAU,QAAQ,8BAA8B,SAAS,WAAW,mCAAmC,MAAM;AAIpH,eAAS;AAAA;AAGX,QAAI,KAAK,UAAU,QAAQ,sBAAsB,QAAW;AAC1D,cAAQ,KAAK;AACb,cAAQ,KAAK;AAAA;AAKf,QAAK,CAAG,QAAO,kBAAkB,OAAO,eAAe,qBAAqB,OAAO,eAAe,kBAAkB,kBAAkB,YAC9H,KAAK,UAAU,QAAQ,sBAAsB,QAAU;AAC7D,YAAM,oBAAoB,OAAO,kBAAkB,OAAO,eAAe,qBAAqB,KAAK,UAAU,QAAQ,qBAAqB;AAC1I,eAAS,8BAA8B;AAAA;AAIzC,QAAI,CAAC,KAAK,UAAU,OAAO,qBAAqB;AAC9C,YAAM,SAAS,CAAC,CAAC,SAAS,GAAG,KAAK,KAAK,UAAU,QAAQ;AACzD,UAAI,QAAQ;AACV,iBAAS,kBAAkB,KAAK,UAAU,QAAQ;AAAA,aAC7C;AACL,iBAAS,2BAA2B,KAAK,UAAU,QAAQ;AAAA;AAAA;AAI/D,QAAI,OAAO;AACT,YAAM,WAAW,MAAM;AAAA;AAEzB,QAAI,OAAO,KAAK,KAAK,YAAY,WAAW,KAC1C,KAAK,SAAS,KAAK,WAAW,KAC9B,KAAK,SAAS,UAAU,WAAW,GAAG;AACtC,YAAM,KAAK,oBAAoB;AAAA;AAGjC,WAAO;AAAA;AAAA,QAGH,WAAW,YAAY;AAC3B,QAAI,WAAW,SAAS;AACtB,YAAM;AACN;AAAA;AAGF,WAAO,MAAM,UAAU,cAAY,WAAW,IAAI;AAAA;AAAA,EAGpD,SAAS,YAAY;AACnB,WAAO,CAAC,WAAW,YAAY,CAAC,WAAW;AAAA;AAAA,QAGvC,oBAAoB,YAAY;AACpC,UAAM,kBAAkB,KAAK,UAAU,QAAQ;AAC/C,UAAM,mBAAmB;AAGzB,QAAM,oBAAmB,OAAO,IAAI,iBAAiB,uBAAuB,OAAO;AACjF;AAAA;AAGF,UAAM,UAAU,MAAO,eAAc,KAAK,WAAW,MACnD;AAWF,QAAI,SAAS,MAAM,QAAQ,WAAW,QAAQ,QAAQ;AAKtD,QAAI,MAAM,QAAQ,SAAS;AACzB,UAAI,OAAO,GAAG,YAAY,OAAO;AAC/B,iBAAS,OAAO;AAAA;AAAA;AAIpB,UAAM,gBAAgB;AACtB,UAAM,cAAc,EAAE,MAAM,IAAI,WAAW;AAE3C,eAAW,OAAO,OAAO,MAAM;AAE7B,UAAI,IAAI,YAAY,KAAK;AACvB,oBAAY,KAAK,KAAK,IAAI;AAC1B,YAAI,IAAI;AAAU,sBAAY,UAAU,KAAK,IAAI;AACjD;AAAA;AAIF,oBAAc,IAAI,WAAW,EAAE,KAAK,IAAI;AACxC,UAAI,IAAI;AAAU,sBAAc,IAAI,SAAS,WAAW,IAAI;AAG5D,UAAI,IAAI,UAAU;AAChB,sBAAc,IAAI,SAAS,WAAW,IAAI;AAC1C,YAAI,IAAI;AAAa,wBAAc,IAAI,SAAS,gBAAgB,IAAI;AAAA;AAAA;AAKxE,SAAK,aAAa;AAClB,SAAK,WAAW;AAEhB,SAAK,kBAAkB,UAAU;AAAA;AAAA,EAGnC,oBAAoB;AAClB,SAAK,aAAa;AAClB,SAAK,WAAW,EAAE,MAAM,IAAI,WAAW;AAAA;AAAA;AAI3C,OAAO,UAAU;AACjB,OAAO,QAAQ,oBAAoB;AACnC,OAAO,QAAQ,UAAU;",
+  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst momentTz = require('moment-timezone');\nconst { promisify } = require('util');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  async connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\n          'statement_timeout',\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\n          'query_timeout',\n          // Number of milliseconds to wait for connection, default is no timeout.\n          'connectionTimeoutMillis',\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\n          'idle_in_transaction_session_timeout',\n          // Maximum wait time for lock requests in milliseconds. Added in pg v8.8.0.\n          'lock_timeout',\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\n          'options',\n          // The stream acts as a user-defined socket factory for postgres. In particular, it enables IAM autentication\n          // with Google Cloud SQL. see: https://github.com/sequelize/sequelize/issues/16001#issuecomment-1561136388\n          'stream',\n        ]));\n    }\n\n    const connection = await new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.dialect.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    });\n\n    // Don't let a Postgres restart (or error) to take down the whole app\n    connection.on('error', error => {\n      connection._invalid = true;\n      debug(`connection error ${error.code || error.message}`);\n      this.pool.destroy(connection);\n    });\n\n    let query = '';\n\n    if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n      // Disable escape characters in strings\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n      query += 'SET standard_conforming_strings=on;';\n    }\n\n    if (this.sequelize.options.clientMinMessages !== undefined) {\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\n    }\n\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\n    // If no option, the default value in sequelize is 'warning'\n    if ( !( config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore' ||\n            this.sequelize.options.clientMinMessages === false ) ) {\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\n      query += `SET client_min_messages TO ${clientMinMessages};`;\n\n    }\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      const isZone = !!momentTz.tz.zone(this.sequelize.options.timezone);\n      if (isZone) {\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n      } else {\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n      }\n    }\n\n    if (query) {\n      await connection.query(query);\n    }\n    if (Object.keys(this.nameOidMap).length === 0 &&\n      this.enumOids.oids.length === 0 &&\n      this.enumOids.arrayOids.length === 0) {\n      await this._refreshDynamicOIDs(connection);\n    }\n\n    return connection;\n  }\n\n  async disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return;\n    }\n\n    return await promisify(callback => connection.end(callback))();\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  async _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return;\n    }\n\n    const results = await (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    );\n\n    let result = Array.isArray(results) ? results.pop() : results;\n\n    // When searchPath is prepended then two statements are executed and the result is\n    // an array of those two statements. First one is the SET search_path and second is\n    // the SELECT query result.\n    if (Array.isArray(result)) {\n      if (result[0].command === 'SET') {\n        result = result.pop();\n      }\n    }\n\n    const newNameOidMap = {};\n    const newEnumOids = { oids: [], arrayOids: [] };\n\n    for (const row of result.rows) {\n      // Mapping enums, handled separatedly\n      if (row.typtype === 'e') {\n        newEnumOids.oids.push(row.oid);\n        if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n        continue;\n      }\n\n      // Mapping base types and their arrays\n      newNameOidMap[row.typname] = { oid: row.oid };\n      if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n      // Mapping ranges(of base types) and their arrays\n      if (row.rngtypid) {\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\n        if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n      }\n    }\n\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\n    this.nameOidMap = newNameOidMap;\n    this.enumOids = newEnumOids;\n\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],
+  "mappings": "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",
   "names": []
 }
Index: backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use strict\";\r\nvar __defProp = Object.defineProperty;\r\nvar __defProps = Object.defineProperties;\r\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp.call(b, prop))\r\n      __defNormalProp(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(b)) {\r\n      if (__propIsEnum.call(b, prop))\r\n        __defNormalProp(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\r\nvar __objRest = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\nconst DataTypes = require(\"../../data-types\");\r\nconst QueryTypes = require(\"../../query-types\");\r\nconst { QueryInterface } = require(\"../abstract/query-interface\");\r\nconst Utils = require(\"../../utils\");\r\nconst Deferrable = require(\"../../deferrable\");\r\nclass PostgresQueryInterface extends QueryInterface {\r\n  async ensureEnums(tableName, attributes, options, model) {\r\n    const keys = Object.keys(attributes);\r\n    const keyLen = keys.length;\r\n    let sql = \"\";\r\n    let promises = [];\r\n    let i = 0;\r\n    for (i = 0; i < keyLen; i++) {\r\n      const attribute = attributes[keys[i]];\r\n      const type = attribute.type;\r\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\r\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\r\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { plain: true, raw: true, type: QueryTypes.SELECT })));\r\n      }\r\n    }\r\n    const results = await Promise.all(promises);\r\n    promises = [];\r\n    let enumIdx = 0;\r\n    const addEnumValue = (field, value, relativeValue, position = \"before\", spliceStart = promises.length) => {\r\n      const valueOptions = __spreadValues({}, options);\r\n      valueOptions.before = null;\r\n      valueOptions.after = null;\r\n      switch (position) {\r\n        case \"after\":\r\n          valueOptions.after = relativeValue;\r\n          break;\r\n        case \"before\":\r\n        default:\r\n          valueOptions.before = relativeValue;\r\n          break;\r\n      }\r\n      promises.splice(spliceStart, 0, () => {\r\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\r\n      });\r\n    };\r\n    for (i = 0; i < keyLen; i++) {\r\n      const attribute = attributes[keys[i]];\r\n      const type = attribute.type;\r\n      const enumType = type.type || type;\r\n      const field = attribute.field || keys[i];\r\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {\r\n        if (!results[enumIdx]) {\r\n          promises.push(() => {\r\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), { raw: true }));\r\n          });\r\n        } else if (!!results[enumIdx] && !!model) {\r\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\r\n          const vals = enumType.values;\r\n          let lastOldEnumValue;\r\n          let rightestPosition = -1;\r\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\r\n            const enumVal = enumVals[oldIndex];\r\n            const newIdx = vals.indexOf(enumVal);\r\n            lastOldEnumValue = enumVal;\r\n            if (newIdx === -1) {\r\n              continue;\r\n            }\r\n            const newValuesBefore = vals.slice(0, newIdx);\r\n            const promisesLength = promises.length;\r\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\r\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\r\n                break;\r\n              }\r\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\r\n            }\r\n            if (newIdx > rightestPosition) {\r\n              rightestPosition = newIdx;\r\n            }\r\n          }\r\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\r\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\r\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\r\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, \"after\");\r\n            }\r\n          }\r\n          enumIdx++;\r\n        }\r\n      }\r\n    }\r\n    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\r\n    if (promises.length) {\r\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\r\n    }\r\n    return result;\r\n  }\r\n  async getForeignKeyReferencesForTable(table, options) {\r\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\r\n      type: QueryTypes.FOREIGNKEYS\r\n    });\r\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);\r\n    const result = await this.sequelize.query(query, queryOptions);\r\n    return result.map((fkMeta) => {\r\n      const _a = Utils.camelizeObjectKeys(fkMeta), { initiallyDeferred, isDeferrable } = _a, remaining = __objRest(_a, [\"initiallyDeferred\", \"isDeferrable\"]);\r\n      return __spreadProps(__spreadValues({}, remaining), {\r\n        deferrable: isDeferrable === \"NO\" ? Deferrable.NOT : initiallyDeferred === \"NO\" ? Deferrable.INITIALLY_IMMEDIATE : Deferrable.INITIALLY_DEFERRED\r\n      });\r\n    });\r\n  }\r\n  async dropEnum(enumName, options) {\r\n    options = options || {};\r\n    return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), { raw: true }));\r\n  }\r\n  async dropAllEnums(options) {\r\n    options = options || {};\r\n    const enums = await this.pgListEnums(null, options);\r\n    return await Promise.all(enums.map((result) => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), { raw: true }))));\r\n  }\r\n  async pgListEnums(tableName, options) {\r\n    options = options || {};\r\n    const sql = this.queryGenerator.pgListEnums(tableName);\r\n    return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { plain: false, raw: true, type: QueryTypes.SELECT }));\r\n  }\r\n  async dropTable(tableName, options) {\r\n    await super.dropTable(tableName, options);\r\n    const promises = [];\r\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: \"tableName\" });\r\n    if (!instanceTable) {\r\n      return;\r\n    }\r\n    const getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : `${options.schema}_`) + tableName;\r\n    const keys = Object.keys(instanceTable.rawAttributes);\r\n    const keyLen = keys.length;\r\n    for (let i = 0; i < keyLen; i++) {\r\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\r\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\r\n        options.supportsSearchPath = false;\r\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), { raw: true })));\r\n      }\r\n    }\r\n    await Promise.all(promises);\r\n  }\r\n}\r\nexports.PostgresQueryInterface = PostgresQueryInterface;\r\n//# sourceMappingURL=query-interface.js.map\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js b/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js
--- a/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js	(date 1713648521565)
@@ -124,7 +124,7 @@
     const queryOptions = __spreadProps(__spreadValues({}, options), {
       type: QueryTypes.FOREIGNKEYS
     });
-    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database);
+    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database, table.schema);
     const result = await this.sequelize.query(query, queryOptions);
     return result.map((fkMeta) => {
       const _a = Utils.camelizeObjectKeys(fkMeta), { initiallyDeferred, isDeferrable } = _a, remaining = __objRest(_a, ["initiallyDeferred", "isDeferrable"]);
Index: backend/node_modules/sequelize/types/transaction.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Deferrable } from './deferrable';\r\nimport { Logging } from './model';\r\nimport { Sequelize } from './sequelize';\r\n\r\n/**\r\n * The transaction object is used to identify a running transaction. It is created by calling\r\n * `Sequelize.transaction()`.\r\n *\r\n * To run a query under a transaction, you should pass the transaction in the options object.\r\n */\r\nexport class Transaction {\r\n  constructor(sequelize: Sequelize, options: TransactionOptions);\r\n\r\n  /**\r\n   * Commit the transaction\r\n   */\r\n  public commit(): Promise<void>;\r\n\r\n  /**\r\n   * Rollback (abort) the transaction\r\n   */\r\n  public rollback(): Promise<void>;\r\n\r\n  /**\r\n   * Adds hook that is run after a transaction is committed\r\n   */\r\n  public afterCommit(fn: (transaction: this) => void | Promise<void>): void;\r\n\r\n  /**\r\n   * Returns possible options for row locking\r\n   */\r\n  static get LOCK(): typeof LOCK;\r\n\r\n  /**\r\n   * Same as its static version, but can also be called on instances of\r\n   * transactions to get possible options for row locking directly from the\r\n   * instance.\r\n   */\r\n  get LOCK(): typeof LOCK;\r\n}\r\n\r\n// tslint:disable-next-line no-namespace\r\nexport namespace Transaction {\r\n  /**\r\n   * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\r\n   * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.\r\n   *\r\n   * The possible isolations levels to use when starting a transaction:\r\n   *\r\n   * ```js\r\n   * {\r\n   *   READ_UNCOMMITTED: \"READ UNCOMMITTED\",\r\n   *   READ_COMMITTED: \"READ COMMITTED\",\r\n   *   REPEATABLE_READ: \"REPEATABLE READ\",\r\n   *   SERIALIZABLE: \"SERIALIZABLE\"\r\n   * }\r\n   * ```\r\n   *\r\n   * Pass in the desired level as the first argument:\r\n   *\r\n   * ```js\r\n   * try {\r\n   *   await sequelize.transaction({isolationLevel: Sequelize.Transaction.SERIALIZABLE}, transaction => {\r\n   *      // your transactions\r\n   *   });\r\n   *   // transaction has been committed. Do something after the commit if required.\r\n   * } catch(err) {\r\n   *   // do something with the err.\r\n   * }\r\n   * ```\r\n   */\r\n  enum ISOLATION_LEVELS {\r\n    READ_UNCOMMITTED = 'READ UNCOMMITTED',\r\n    READ_COMMITTED = 'READ COMMITTED',\r\n    REPEATABLE_READ = 'REPEATABLE READ',\r\n    SERIALIZABLE = 'SERIALIZABLE',\r\n  }\r\n\r\n  enum TYPES {\r\n    DEFERRED = 'DEFERRED',\r\n    IMMEDIATE = 'IMMEDIATE',\r\n    EXCLUSIVE = 'EXCLUSIVE',\r\n  }\r\n}\r\n\r\n/**\r\n * Possible options for row locking. Used in conjunction with `find` calls:\r\n *\r\n * ```js\r\n * t1 // is a transaction\r\n * t1.LOCK.UPDATE,\r\n * t1.LOCK.SHARE,\r\n * t1.LOCK.KEY_SHARE, // Postgres 9.3+ only\r\n * t1.LOCK.NO_KEY_UPDATE // Postgres 9.3+ only\r\n * ```\r\n *\r\n * Usage:\r\n * ```js\r\n * t1 // is a transaction\r\n * Model.findAll({\r\n *   where: ...,\r\n *   transaction: t1,\r\n *   lock: t1.LOCK...\r\n * });\r\n * ```\r\n *\r\n * Postgres also supports specific locks while eager loading by using OF:\r\n * ```js\r\n * UserModel.findAll({\r\n *   where: ...,\r\n *   include: [TaskModel, ...],\r\n *   transaction: t1,\r\n *   lock: {\r\n *   level: t1.LOCK...,\r\n *   of: UserModel\r\n *   }\r\n * });\r\n * ```\r\n * UserModel will be locked but TaskModel won't!\r\n */\r\nexport enum LOCK {\r\n  UPDATE = 'UPDATE',\r\n  SHARE = 'SHARE',\r\n  /**\r\n   * Postgres 9.3+ only\r\n   */\r\n  KEY_SHARE = 'KEY SHARE',\r\n  /**\r\n   * Postgres 9.3+ only\r\n   */\r\n  NO_KEY_UPDATE = 'NO KEY UPDATE',\r\n}\r\n\r\n/**\r\n * Options provided when the transaction is created\r\n */\r\nexport interface TransactionOptions extends Logging {\r\n  autocommit?: boolean;\r\n  isolationLevel?: Transaction.ISOLATION_LEVELS;\r\n  type?: Transaction.TYPES;\r\n  deferrable?: string | Deferrable;\r\n  /**\r\n   * Parent transaction.\r\n   */\r\n  transaction?: Transaction | null;\r\n}\r\n\r\nexport default Transaction;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/types/transaction.d.ts b/backend/node_modules/sequelize/types/transaction.d.ts
--- a/backend/node_modules/sequelize/types/transaction.d.ts	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/types/transaction.d.ts	(date 1713648521755)
@@ -139,6 +139,7 @@
   isolationLevel?: Transaction.ISOLATION_LEVELS;
   type?: Transaction.TYPES;
   deferrable?: string | Deferrable;
+  readOnly?: boolean;
   /**
    * Parent transaction.
    */
Index: backend/node_modules/sequelize/types/model.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import IndexHints = require('./index-hints');\r\nimport { Association, BelongsTo, BelongsToMany, BelongsToManyOptions, BelongsToOptions, HasMany, HasManyOptions, HasOne, HasOneOptions } from './associations/index';\r\nimport { DataType } from './data-types';\r\nimport { Deferrable } from './deferrable';\r\nimport { HookReturn, Hooks, ModelHooks } from './hooks';\r\nimport { ValidationOptions } from './instance-validator';\r\nimport { IndexesOptions, QueryOptions, TableName } from './dialects/abstract/query-interface';\r\nimport { Sequelize, SyncOptions } from './sequelize';\r\nimport { Col, Fn, Literal, Where, MakeNullishOptional, AnyFunction, Cast, Json } from './utils';\r\nimport { LOCK, Transaction, Op, Optional } from './index';\r\nimport { SetRequired } from './utils/set-required';\r\n\r\n// Backport of https://github.com/sequelize/sequelize/blob/a68b439fb3ea748d3f3d37356d9fe610f86184f6/src/utils/index.ts#L85\r\nexport type AllowReadonlyArray<T> = T | readonly T[];\r\n\r\nexport interface Logging {\r\n  /**\r\n   * A function that gets executed while running the query to log the sql.\r\n   */\r\n  logging?: boolean | ((sql: string, timing?: number) => void);\r\n\r\n  /**\r\n   * Pass query execution time in milliseconds as second argument to logging function (options.logging).\r\n   */\r\n  benchmark?: boolean;\r\n}\r\n\r\nexport interface Poolable {\r\n  /**\r\n   * Force the query to use the write pool, regardless of the query type.\r\n   *\r\n   * @default false\r\n   */\r\n  useMaster?: boolean;\r\n}\r\n\r\nexport interface Transactionable {\r\n  /**\r\n   * Transaction to run query under\r\n   */\r\n  transaction?: Transaction | null;\r\n}\r\n\r\nexport interface SearchPathable {\r\n  /**\r\n   * An optional parameter to specify the schema search_path (Postgres only)\r\n   */\r\n  searchPath?: string;\r\n}\r\n\r\nexport interface Filterable<TAttributes = any> {\r\n  /**\r\n   * Attribute has to be matched for rows to be selected for the given action.\r\n   */\r\n  where?: WhereOptions<TAttributes>;\r\n}\r\n\r\nexport interface Projectable {\r\n  /**\r\n   * A list of the attributes that you want to select. To rename an attribute, you can pass an array, with\r\n   * two elements - the first is the name of the attribute in the DB (or some kind of expression such as\r\n   * `Sequelize.literal`, `Sequelize.fn` and so on), and the second is the name you want the attribute to\r\n   * have in the returned instance\r\n   */\r\n  attributes?: FindAttributeOptions;\r\n}\r\n\r\nexport interface Paranoid {\r\n  /**\r\n   * If true, only non-deleted records will be returned. If false, both deleted and non-deleted records will\r\n   * be returned. Only applies if `options.paranoid` is true for the model.\r\n   */\r\n  paranoid?: boolean;\r\n}\r\n\r\nexport type GroupOption = string | Fn | Col | (string | Fn | Col)[];\r\n\r\n/**\r\n * Options to pass to Model on drop\r\n */\r\nexport interface DropOptions extends Logging {\r\n  /**\r\n   * Also drop all objects depending on this table, such as views. Only works in postgres\r\n   */\r\n  cascade?: boolean;\r\n}\r\n\r\n/**\r\n * Schema Options provided for applying a schema to a model\r\n */\r\nexport interface SchemaOptions extends Logging {\r\n  /**\r\n   * The character(s) that separates the schema name from the table name\r\n   */\r\n  schemaDelimiter?: string;\r\n}\r\n\r\n/**\r\n * Scope Options for Model.scope\r\n */\r\nexport interface ScopeOptions {\r\n  /**\r\n   * The scope(s) to apply. Scopes can either be passed as consecutive arguments, or as an array of arguments.\r\n   * To apply simple scopes and scope functions with no arguments, pass them as strings. For scope function,\r\n   * pass an object, with a `method` property. The value can either be a string, if the method does not take\r\n   * any arguments, or an array, where the first element is the name of the method, and consecutive elements\r\n   * are arguments to that method. Pass null to remove all scopes, including the default.\r\n   */\r\n  method: string | readonly [string, ...unknown[]];\r\n}\r\n\r\ntype InvalidInSqlArray = ColumnReference | Fn | Cast | null | Literal;\r\n\r\n/**\r\n * This type allows using `Op.or`, `Op.and`, and `Op.not` recursively around another type.\r\n * It also supports using a plain Array as an alias for `Op.and`. (unlike {@link AllowNotOrAndRecursive}).\r\n *\r\n * Example of plain-array treated as `Op.and`:\r\n * User.findAll({ where: [{ id: 1 }, { id: 2 }] });\r\n *\r\n * Meant to be used by {@link WhereOptions}.\r\n */\r\ntype AllowNotOrAndWithImplicitAndArrayRecursive<T> = AllowArray<\r\n  // this is the equivalent of Op.and\r\n  | T\r\n  | { [Op.or]: AllowArray<AllowNotOrAndWithImplicitAndArrayRecursive<T>> }\r\n  | { [Op.and]: AllowArray<AllowNotOrAndWithImplicitAndArrayRecursive<T>> }\r\n  | { [Op.not]: AllowNotOrAndWithImplicitAndArrayRecursive<T> }\r\n>;\r\n\r\n/**\r\n * This type allows using `Op.or`, `Op.and`, and `Op.not` recursively around another type.\r\n * Unlike {@link AllowNotOrAndWithImplicitAndArrayRecursive}, it does not allow the 'implicit AND Array'.\r\n *\r\n * Example of plain-array NOT treated as Op.and:\r\n * User.findAll({ where: { id: [1, 2] } });\r\n *\r\n * Meant to be used by {@link WhereAttributeHashValue}.\r\n */\r\ntype AllowNotOrAndRecursive<T> =\r\n  | T\r\n  | { [Op.or]: AllowArray<AllowNotOrAndRecursive<T>> }\r\n  | { [Op.and]: AllowArray<AllowNotOrAndRecursive<T>> }\r\n  | { [Op.not]: AllowNotOrAndRecursive<T> };\r\n\r\ntype AllowArray<T> = T | T[];\r\ntype AllowAnyAll<T> =\r\n  | T\r\n  // Op.all: [x, z] results in ALL (ARRAY[x, z])\r\n  // Some things cannot go in ARRAY. Op.values must be used to support them.\r\n  | { [Op.all]: Exclude<T, InvalidInSqlArray>[] | Literal | { [Op.values]: Array<T | DynamicValues<T>> } }\r\n  | { [Op.any]: Exclude<T, InvalidInSqlArray>[] | Literal | { [Op.values]: Array<T | DynamicValues<T>> } };\r\n\r\n/**\r\n * The type accepted by every `where` option\r\n */\r\nexport type WhereOptions<TAttributes = any> = AllowNotOrAndWithImplicitAndArrayRecursive<\r\n  | WhereAttributeHash<TAttributes>\r\n  | Literal\r\n  | Fn\r\n  | Where\r\n  | Json\r\n>;\r\n\r\n/**\r\n * @deprecated unused\r\n */\r\nexport interface AnyOperator {\r\n  [Op.any]: readonly (string | number | Date | Literal)[] | Literal;\r\n}\r\n\r\n/** @deprecated unused */\r\nexport interface AllOperator {\r\n  [Op.all]: readonly (string | number | Date | Literal)[] | Literal;\r\n}\r\n\r\n// number is always allowed because -Infinity & +Infinity are valid\r\nexport type Rangable<T> = readonly [\r\n  lower: T | RangePart<T | number> | number | null,\r\n  higher: T | RangePart<T | number> | number | null\r\n] | EmptyRange;\r\n\r\n/**\r\n * This type represents the output of the {@link RANGE} data type.\r\n */\r\n// number is always allowed because -Infinity & +Infinity are valid\r\nexport type Range<T> = readonly [lower: RangePart<T | number>, higher: RangePart<T | number>] | EmptyRange;\r\n\r\ntype EmptyRange = [];\r\n\r\ntype RangePart<T> = { value: T, inclusive: boolean };\r\n\r\n/**\r\n * Internal type - prone to changes. Do not export.\r\n * @private\r\n */\r\nexport type ColumnReference = Col | { [Op.col]: string };\r\n\r\n/**\r\n * Internal type - prone to changes. Do not export.\r\n * @private\r\n */\r\ntype WhereSerializableValue = boolean | string | number | Buffer | Date;\r\n\r\n/**\r\n * Internal type - prone to changes. Do not export.\r\n * @private\r\n */\r\ntype OperatorValues<AcceptableValues> =\r\n  | StaticValues<AcceptableValues>\r\n  | DynamicValues<AcceptableValues>;\r\n\r\n/**\r\n * Represents acceptable Dynamic values.\r\n *\r\n * Dynamic values, as opposed to {@link StaticValues}. i.e. column references, functions, etc...\r\n */\r\ntype DynamicValues<AcceptableValues> =\r\n  | Literal\r\n  | ColumnReference\r\n  | Fn\r\n  | Cast\r\n  // where() can only be used on boolean attributes\r\n  | (AcceptableValues extends boolean ? Where : never)\r\n\r\n/**\r\n * Represents acceptable Static values.\r\n *\r\n * Static values, as opposed to {@link DynamicValues}. i.e. booleans, strings, etc...\r\n */\r\ntype StaticValues<Type> =\r\n  Type extends Range<infer RangeType> ? [lower: RangeType | RangePart<RangeType>, higher: RangeType | RangePart<RangeType>]\r\n  : Type extends any[] ? { readonly [Key in keyof Type]: StaticValues<Type[Key]>}\r\n  : Type extends null ? Type | WhereSerializableValue | null\r\n  : Type | WhereSerializableValue;\r\n\r\n/**\r\n * Operators that can be used in {@link WhereOptions}\r\n *\r\n * @typeParam AttributeType - The JS type of the attribute the operator is operating on.\r\n *\r\n * See https://sequelize.org/master/en/v3/docs/querying/#operators\r\n */\r\n// TODO: default to something more strict than `any` which lists serializable values\r\nexport interface WhereOperators<AttributeType = any> {\r\n   /**\r\n    * @example: `[Op.eq]: 6,` becomes `= 6`\r\n    * @example: `[Op.eq]: [6, 7]` becomes `= ARRAY[6, 7]`\r\n    * @example: `[Op.eq]: null` becomes `IS NULL`\r\n    * @example: `[Op.eq]: true` becomes `= true`\r\n    * @example: `[Op.eq]: literal('raw sql')` becomes `= raw sql`\r\n    * @example: `[Op.eq]: col('column')` becomes `= \"column\"`\r\n    * @example: `[Op.eq]: fn('NOW')` becomes `= NOW()`\r\n    */\r\n  [Op.eq]?: AllowAnyAll<OperatorValues<AttributeType>>;\r\n\r\n  /**\r\n   * @example: `[Op.ne]: 20,` becomes `!= 20`\r\n   * @example: `[Op.ne]: [20, 21]` becomes `!= ARRAY[20, 21]`\r\n   * @example: `[Op.ne]: null` becomes `IS NOT NULL`\r\n   * @example: `[Op.ne]: true` becomes `!= true`\r\n   * @example: `[Op.ne]: literal('raw sql')` becomes `!= raw sql`\r\n   * @example: `[Op.ne]: col('column')` becomes `!= \"column\"`\r\n   * @example: `[Op.ne]: fn('NOW')` becomes `!= NOW()`\r\n   */\r\n  [Op.ne]?: WhereOperators<AttributeType>[typeof Op.eq]; // accepts the same types as Op.eq\r\n\r\n  /**\r\n   * @example: `[Op.is]: null` becomes `IS NULL`\r\n   * @example: `[Op.is]: true` becomes `IS TRUE`\r\n   * @example: `[Op.is]: literal('value')` becomes `IS value`\r\n   */\r\n  [Op.is]?: Extract<AttributeType, null | boolean> | Literal;\r\n\r\n  /**\r\n   * @example: `[Op.not]: true` becomes `IS NOT TRUE`\r\n   * @example: `{ col: { [Op.not]: { [Op.gt]: 5 } } }` becomes `NOT (col > 5)`\r\n   */\r\n  [Op.not]?: WhereOperators<AttributeType>[typeof Op.eq]; // accepts the same types as Op.eq ('Op.not' is not strictly the opposite of 'Op.is' due to legacy reasons)\r\n\r\n  /** @example: `[Op.gte]: 6` becomes `>= 6` */\r\n  [Op.gte]?: AllowAnyAll<OperatorValues<NonNullable<AttributeType>>>;\r\n\r\n  /** @example: `[Op.lte]: 10` becomes `<= 10` */\r\n  [Op.lte]?: WhereOperators<AttributeType>[typeof Op.gte]; // accepts the same types as Op.gte\r\n\r\n  /** @example: `[Op.lt]: 10` becomes `< 10` */\r\n  [Op.lt]?: WhereOperators<AttributeType>[typeof Op.gte]; // accepts the same types as Op.gte\r\n\r\n  /** @example: `[Op.gt]: 6` becomes `> 6` */\r\n  [Op.gt]?: WhereOperators<AttributeType>[typeof Op.gte]; // accepts the same types as Op.gte\r\n\r\n  /**\r\n   * @example: `[Op.between]: [6, 10],` becomes `BETWEEN 6 AND 10`\r\n   */\r\n  [Op.between]?:\r\n    | [\r\n      lowerInclusive: OperatorValues<NonNullable<AttributeType>>,\r\n      higherInclusive: OperatorValues<NonNullable<AttributeType>>,\r\n    ]\r\n    | Literal;\r\n\r\n  /** @example: `[Op.notBetween]: [11, 15],` becomes `NOT BETWEEN 11 AND 15` */\r\n  [Op.notBetween]?: WhereOperators<AttributeType>[typeof Op.between];\r\n\r\n  /** @example: `[Op.in]: [1, 2],` becomes `IN (1, 2)` */\r\n  [Op.in]?: ReadonlyArray<OperatorValues<NonNullable<AttributeType>>> | Literal;\r\n\r\n  /** @example: `[Op.notIn]: [1, 2],` becomes `NOT IN (1, 2)` */\r\n  [Op.notIn]?: WhereOperators<AttributeType>[typeof Op.in];\r\n\r\n  /**\r\n   * @example: `[Op.like]: '%hat',` becomes `LIKE '%hat'`\r\n   * @example: `[Op.like]: { [Op.any]: ['cat', 'hat'] }` becomes `LIKE ANY ARRAY['cat', 'hat']`\r\n   */\r\n  [Op.like]?: AllowAnyAll<OperatorValues<Extract<AttributeType, string>>>;\r\n\r\n  /**\r\n   * @example: `[Op.notLike]: '%hat'` becomes `NOT LIKE '%hat'`\r\n   * @example: `[Op.notLike]: { [Op.any]: ['cat', 'hat']}` becomes `NOT LIKE ANY ARRAY['cat', 'hat']`\r\n   */\r\n  [Op.notLike]?: WhereOperators<AttributeType>[typeof Op.like];\r\n\r\n  /**\r\n   * case insensitive PG only\r\n   *\r\n   * @example: `[Op.iLike]: '%hat'` becomes `ILIKE '%hat'`\r\n   * @example: `[Op.iLike]: { [Op.any]: ['cat', 'hat']}` becomes `ILIKE ANY ARRAY['cat', 'hat']`\r\n   */\r\n  [Op.iLike]?: WhereOperators<AttributeType>[typeof Op.like];\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * @example: `[Op.notILike]: '%hat'` becomes `NOT ILIKE '%hat'`\r\n   * @example: `[Op.notLike]: ['cat', 'hat']` becomes `LIKE ANY ARRAY['cat', 'hat']`\r\n   */\r\n  [Op.notILike]?: WhereOperators<AttributeType>[typeof Op.like];\r\n\r\n  /**\r\n   * PG array & range 'overlaps' operator\r\n   *\r\n   * @example: `[Op.overlap]: [1, 2]` becomes `&& [1, 2]`\r\n   */\r\n  // https://www.postgresql.org/docs/14/functions-range.html range && range\r\n  // https://www.postgresql.org/docs/14/functions-array.html array && array\r\n  [Op.overlap]?: AllowAnyAll<\r\n    | (\r\n      // RANGE && RANGE\r\n      AttributeType extends Range<infer RangeType> ? Rangable<RangeType>\r\n      // ARRAY && ARRAY\r\n      : AttributeType extends any[] ? StaticValues<NonNullable<AttributeType>>\r\n      : never\r\n    )\r\n    | DynamicValues<AttributeType>\r\n  >;\r\n\r\n  /**\r\n   * PG array & range 'contains' operator\r\n   *\r\n   * @example: `[Op.contains]: [1, 2]` becomes `@> [1, 2]`\r\n   */\r\n  // https://www.postgresql.org/docs/14/functions-json.html jsonb @> jsonb\r\n  // https://www.postgresql.org/docs/14/functions-range.html range @> range ; range @> element\r\n  // https://www.postgresql.org/docs/14/functions-array.html array @> array\r\n  [Op.contains]?:\r\n    // RANGE @> ELEMENT\r\n    | AttributeType extends Range<infer RangeType> ? OperatorValues<OperatorValues<NonNullable<RangeType>>> : never\r\n    // ARRAY @> ARRAY ; RANGE @> RANGE\r\n    | WhereOperators<AttributeType>[typeof Op.overlap];\r\n\r\n  /**\r\n   * PG array & range 'contained by' operator\r\n   *\r\n   * @example: `[Op.contained]: [1, 2]` becomes `<@ [1, 2]`\r\n   */\r\n  [Op.contained]?:\r\n    AttributeType extends any[]\r\n      // ARRAY <@ ARRAY ; RANGE <@ RANGE\r\n      ? WhereOperators<AttributeType>[typeof Op.overlap]\r\n      // ELEMENT <@ RANGE\r\n      : AllowAnyAll<OperatorValues<Rangable<AttributeType>>>;\r\n\r\n  /**\r\n   * Strings starts with value.\r\n   */\r\n  [Op.startsWith]?: OperatorValues<Extract<AttributeType, string>>;\r\n\r\n  /**\r\n   * String ends with value.\r\n   */\r\n  [Op.endsWith]?: WhereOperators<AttributeType>[typeof Op.startsWith];\r\n  /**\r\n   * String contains value.\r\n   */\r\n  [Op.substring]?: WhereOperators<AttributeType>[typeof Op.startsWith];\r\n\r\n  /**\r\n   * MySQL/PG only\r\n   *\r\n   * Matches regular expression, case sensitive\r\n   *\r\n   * @example: `[Op.regexp]: '^[h|a|t]'` becomes `REGEXP/~ '^[h|a|t]'`\r\n   */\r\n  [Op.regexp]?: AllowAnyAll<OperatorValues<Extract<AttributeType, string>>>;\r\n\r\n  /**\r\n   * MySQL/PG only\r\n   *\r\n   * Does not match regular expression, case sensitive\r\n   *\r\n   * @example: `[Op.notRegexp]: '^[h|a|t]'` becomes `NOT REGEXP/!~ '^[h|a|t]'`\r\n   */\r\n  [Op.notRegexp]?: WhereOperators<AttributeType>[typeof Op.regexp];\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Matches regular expression, case insensitive\r\n   *\r\n   * @example: `[Op.iRegexp]: '^[h|a|t]'` becomes `~* '^[h|a|t]'`\r\n   */\r\n  [Op.iRegexp]?: WhereOperators<AttributeType>[typeof Op.regexp];\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Does not match regular expression, case insensitive\r\n   *\r\n   * @example: `[Op.notIRegexp]: '^[h|a|t]'` becomes `!~* '^[h|a|t]'`\r\n   */\r\n  [Op.notIRegexp]?: WhereOperators<AttributeType>[typeof Op.regexp];\r\n\r\n  /** @example: `[Op.match]: Sequelize.fn('to_tsquery', 'fat & rat')` becomes `@@ to_tsquery('fat & rat')` */\r\n  [Op.match]?: AllowAnyAll<DynamicValues<AttributeType>>;\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Whether the range is strictly left of the other range.\r\n   *\r\n   * @example:\r\n   * ```typescript\r\n   * { rangeAttribute: { [Op.strictLeft]: [1, 2] } }\r\n   * // results in\r\n   * // \"rangeAttribute\" << [1, 2)\r\n   * ```\r\n   *\r\n   * https://www.postgresql.org/docs/14/functions-range.html\r\n   */\r\n  [Op.strictLeft]?:\r\n    | AttributeType extends Range<infer RangeType> ? Rangable<RangeType> : never\r\n    | DynamicValues<AttributeType>;\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Whether the range is strictly right of the other range.\r\n   *\r\n   * @example:\r\n   * ```typescript\r\n   * { rangeAttribute: { [Op.strictRight]: [1, 2] } }\r\n   * // results in\r\n   * // \"rangeAttribute\" >> [1, 2)\r\n   * ```\r\n   *\r\n   * https://www.postgresql.org/docs/14/functions-range.html\r\n   */\r\n  [Op.strictRight]?: WhereOperators<AttributeType>[typeof Op.strictLeft];\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Whether the range extends to the left of the other range.\r\n   *\r\n   * @example:\r\n   * ```typescript\r\n   * { rangeAttribute: { [Op.noExtendLeft]: [1, 2] } }\r\n   * // results in\r\n   * // \"rangeAttribute\" &> [1, 2)\r\n   * ```\r\n   *\r\n   * https://www.postgresql.org/docs/14/functions-range.html\r\n   */\r\n  [Op.noExtendLeft]?: WhereOperators<AttributeType>[typeof Op.strictLeft];\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Whether the range extends to the right of the other range.\r\n   *\r\n   * @example:\r\n   * ```typescript\r\n   * { rangeAttribute: { [Op.noExtendRight]: [1, 2] } }\r\n   * // results in\r\n   * // \"rangeAttribute\" &< [1, 2)\r\n   * ```\r\n   *\r\n   * https://www.postgresql.org/docs/14/functions-range.html\r\n   */\r\n  [Op.noExtendRight]?: WhereOperators<AttributeType>[typeof Op.strictLeft];\r\n\r\n  /**\r\n   * PG only\r\n   *\r\n   * Whether the two ranges are adjacent.\r\n   *\r\n   * @example:\r\n   * ```typescript\r\n   * { rangeAttribute: { [Op.adjacent]: [1, 2] } }\r\n   * // results in\r\n   * // \"rangeAttribute\" -|- [1, 2)\r\n   * ```\r\n   *\r\n   * https://www.postgresql.org/docs/14/functions-range.html\r\n   */\r\n  [Op.adjacent]?: WhereOperators<AttributeType>[typeof Op.strictLeft];\r\n}\r\n\r\n/**\r\n * Example: `[Op.or]: [{a: 5}, {a: 6}]` becomes `(a = 5 OR a = 6)`\r\n *\r\n * @deprecated do not use me!\r\n */\r\n// TODO [>6]: Remove me\r\nexport interface OrOperator<TAttributes = any> {\r\n  [Op.or]: WhereOptions<TAttributes> | readonly WhereOptions<TAttributes>[] | WhereValue<TAttributes> | readonly WhereValue<TAttributes>[];\r\n}\r\n\r\n/**\r\n * Example: `[Op.and]: {a: 5}` becomes `AND (a = 5)`\r\n *\r\n * @deprecated do not use me!\r\n */\r\n// TODO [>6]: Remove me\r\nexport interface AndOperator<TAttributes = any> {\r\n  [Op.and]: WhereOptions<TAttributes> | readonly WhereOptions<TAttributes>[] | WhereValue<TAttributes> | readonly WhereValue<TAttributes>[];\r\n}\r\n\r\n/**\r\n * Where Geometry Options\r\n */\r\nexport interface WhereGeometryOptions {\r\n  type: string;\r\n  coordinates: readonly (number[] | number)[];\r\n}\r\n\r\n/**\r\n * Used for the right hand side of WhereAttributeHash.\r\n * WhereAttributeHash is in there for JSON columns.\r\n *\r\n * @deprecated do not use me\r\n */\r\n// TODO [>6]: remove this\r\nexport type WhereValue<TAttributes = any> =\r\n  | string\r\n  | number\r\n  | bigint\r\n  | boolean\r\n  | Date\r\n  | Buffer\r\n  | null\r\n  | WhereAttributeHash<any> // for JSON columns\r\n  | Col // reference another column\r\n  | Fn\r\n  | WhereGeometryOptions\r\n\r\n/**\r\n * A hash of attributes to describe your search.\r\n *\r\n * Possible key values:\r\n *\r\n * - An attribute name: `{ id: 1 }`\r\n * - A nested attribute: `{ '$projects.id$': 1 }`\r\n * - A JSON key: `{ 'object.key': 1 }`\r\n * - A cast: `{ 'id::integer': 1 }`\r\n *\r\n * - A combination of the above: `{ '$join.attribute$.json.path::integer': 1 }`\r\n */\r\nexport type WhereAttributeHash<TAttributes = any> = {\r\n  // support 'attribute' & '$attribute$'\r\n  [AttributeName in keyof TAttributes as AttributeName extends string ? AttributeName | `$${AttributeName}$` : never]?: WhereAttributeHashValue<TAttributes[AttributeName]>;\r\n} & {\r\n  [AttributeName in keyof TAttributes as AttributeName extends string ?\r\n    // support 'json.path', '$json$.path'\r\n    | `${AttributeName}.${string}` | `$${AttributeName}$.${string}`\r\n    // support 'attribute::cast', '$attribute$::cast', 'json.path::cast' & '$json$.path::cast'\r\n    | `${AttributeName | `$${AttributeName}$` | `${AttributeName}.${string}` | `$${AttributeName}$.${string}`}::${string}`\r\n  : never]?: WhereAttributeHashValue<any>;\r\n} & {\r\n  // support '$nested.attribute$', '$nested.attribute$::cast', '$nested.attribute$.json.path', & '$nested.attribute$.json.path::cast'\r\n  // TODO [2022-05-26]: Remove this ts-ignore once we drop support for TS < 4.4\r\n  // TypeScript < 4.4 does not support using a Template Literal Type as a key.\r\n  //  note: this *must* be a ts-ignore, as it works in ts >= 4.4\r\n  // @ts-ignore\r\n  [attribute: `$${string}.${string}$` | `$${string}.${string}$::${string}` | `$${string}.${string}$.${string}` | `$${string}.${string}$.${string}::${string}`]: WhereAttributeHashValue<any>;\r\n}\r\n\r\n/**\r\n * Types that can be compared to an attribute in a WHERE context.\r\n */\r\nexport type WhereAttributeHashValue<AttributeType> =\r\n  | AllowNotOrAndRecursive<\r\n    // if the right-hand side is an array, it will be equal to Op.in\r\n    // otherwise it will be equal to Op.eq\r\n    // Exception: array attribtues always use Op.eq, never Op.in.\r\n    | AttributeType extends any[]\r\n      ? WhereOperators<AttributeType>[typeof Op.eq] | WhereOperators<AttributeType>\r\n      : (\r\n        | WhereOperators<AttributeType>[typeof Op.in]\r\n        | WhereOperators<AttributeType>[typeof Op.eq]\r\n        | WhereOperators<AttributeType>\r\n      )\r\n    >\r\n  // TODO: this needs a simplified version just for JSON columns\r\n  | WhereAttributeHash<any> // for JSON columns\r\n\r\n/**\r\n * Through options for Include Options\r\n */\r\nexport interface IncludeThroughOptions extends Filterable<any>, Projectable {\r\n  /**\r\n   * The alias of the relation, in case the model you want to eagerly load is aliassed. For `hasOne` /\r\n   * `belongsTo`, this should be the singular name, and for `hasMany`, it should be the plural\r\n   */\r\n  as?: string;\r\n\r\n  /**\r\n   * If true, only non-deleted records will be returned from the join table.\r\n   * If false, both deleted and non-deleted records will be returned.\r\n   * Only applies if through model is paranoid.\r\n   */\r\n  paranoid?: boolean;\r\n}\r\n\r\n/**\r\n * Options for eager-loading associated models, also allowing for all associations to be loaded at once\r\n */\r\nexport type Includeable = ModelType | Association | IncludeOptions | { all: true, nested?: true } | string;\r\n\r\n/**\r\n * Complex include options\r\n */\r\nexport interface IncludeOptions extends Filterable<any>, Projectable, Paranoid {\r\n  /**\r\n   * Mark the include as duplicating, will prevent a subquery from being used.\r\n   */\r\n  duplicating?: boolean;\r\n  /**\r\n   * The model you want to eagerly load\r\n   */\r\n  model?: ModelType;\r\n\r\n  /**\r\n   * The alias of the relation, in case the model you want to eagerly load is aliassed. For `hasOne` /\r\n   * `belongsTo`, this should be the singular name, and for `hasMany`, it should be the plural\r\n   */\r\n  as?: string;\r\n\r\n  /**\r\n   * The association you want to eagerly load. (This can be used instead of providing a model/as pair)\r\n   */\r\n  association?: Association | string;\r\n\r\n  /**\r\n   * Custom `on` clause, overrides default.\r\n   */\r\n  on?: WhereOptions<any>;\r\n\r\n  /**\r\n   * Note that this converts the eager load to an inner join,\r\n   * unless you explicitly set `required: false`\r\n   */\r\n  where?: WhereOptions<any>;\r\n\r\n  /**\r\n   * If true, converts to an inner join, which means that the parent model will only be loaded if it has any\r\n   * matching children. True if `include.where` is set, false otherwise.\r\n   */\r\n  required?: boolean;\r\n\r\n  /**\r\n   * If true, converts to a right join if dialect support it. Ignored if `include.required` is true.\r\n   */\r\n  right?: boolean;\r\n\r\n  /**\r\n   * Limit include. Only available when setting `separate` to true.\r\n   */\r\n  limit?: number;\r\n\r\n  /**\r\n   * Run include in separate queries.\r\n   */\r\n  separate?: boolean;\r\n\r\n  /**\r\n   * Through Options\r\n   */\r\n  through?: IncludeThroughOptions;\r\n\r\n  /**\r\n   * Load further nested related models\r\n   */\r\n  include?: Includeable[];\r\n\r\n  /**\r\n   * Order include. Only available when setting `separate` to true.\r\n   */\r\n  order?: Order;\r\n\r\n  /**\r\n   * Use sub queries. This should only be used if you know for sure the query does not result in a cartesian product.\r\n   */\r\n  subQuery?: boolean;\r\n}\r\n\r\ntype OrderItemAssociation = Association | ModelStatic<Model> | { model: ModelStatic<Model>; as: string } | string\r\ntype OrderItemColumn = string | Col | Fn | Literal\r\nexport type OrderItem =\r\n  | string\r\n  | Fn\r\n  | Col\r\n  | Literal\r\n  | [OrderItemColumn, string]\r\n  | [OrderItemAssociation, OrderItemColumn]\r\n  | [OrderItemAssociation, OrderItemColumn, string]\r\n  | [OrderItemAssociation, OrderItemAssociation, OrderItemColumn]\r\n  | [OrderItemAssociation, OrderItemAssociation, OrderItemColumn, string]\r\n  | [OrderItemAssociation, OrderItemAssociation, OrderItemAssociation, OrderItemColumn]\r\n  | [OrderItemAssociation, OrderItemAssociation, OrderItemAssociation, OrderItemColumn, string]\r\n  | [OrderItemAssociation, OrderItemAssociation, OrderItemAssociation, OrderItemAssociation, OrderItemColumn]\r\n  | [OrderItemAssociation, OrderItemAssociation, OrderItemAssociation, OrderItemAssociation, OrderItemColumn, string]\r\nexport type Order = Fn | Col | Literal | OrderItem[];\r\n\r\n/**\r\n * Please note if this is used the aliased property will not be available on the model instance\r\n * as a property but only via `instance.get('alias')`.\r\n */\r\nexport type ProjectionAlias = readonly [string | Literal | Fn | Col, string];\r\n\r\nexport type FindAttributeOptions =\r\n  | (string | ProjectionAlias)[]\r\n  | {\r\n    exclude: string[];\r\n    include?: (string | ProjectionAlias)[];\r\n  }\r\n  | {\r\n    exclude?: string[];\r\n    include: (string | ProjectionAlias)[];\r\n  };\r\n\r\nexport interface IndexHint {\r\n  type: IndexHints;\r\n  values: string[];\r\n}\r\n\r\nexport interface IndexHintable {\r\n  /**\r\n   * MySQL only.\r\n   */\r\n  indexHints?: IndexHint[];\r\n}\r\n\r\n/**\r\n * Options that are passed to any model creating a SELECT query\r\n *\r\n * A hash of options to describe the scope of the search\r\n */\r\nexport interface FindOptions<TAttributes = any>\r\n  extends QueryOptions, Filterable<TAttributes>, Projectable, Paranoid, IndexHintable\r\n{\r\n  /**\r\n   * A list of associations to eagerly load using a left join (a single association is also supported). Supported is either\r\n   * `{ include: Model1 }`, `{ include: [ Model1, Model2, ...]}`, `{ include: [{ model: Model1, as: 'Alias' }]}` or\r\n   * `{ include: [{ all: true }]}`.\r\n   * If your association are set up with an `as` (eg. `X.hasMany(Y, { as: 'Z' }`, you need to specify Z in\r\n   * the as attribute when eager loading Y).\r\n   */\r\n  include?: Includeable | Includeable[];\r\n\r\n  /**\r\n   * Specifies an ordering. If a string is provided, it will be escaped. Using an array, you can provide\r\n   * several columns / functions to order by. Each element can be further wrapped in a two-element array. The\r\n   * first element is the column / function to order by, the second is the direction. For example:\r\n   * `order: [['name', 'DESC']]`. In this way the column will be escaped, but the direction will not.\r\n   */\r\n  order?: Order;\r\n\r\n  /**\r\n   * GROUP BY in sql\r\n   */\r\n  group?: GroupOption;\r\n\r\n  /**\r\n   * Limits how many items will be retrieved by the operation.\r\n   *\r\n   * If `limit` and `include` are used together, Sequelize will turn the `subQuery` option on by default.\r\n   * This is done to ensure that `limit` only impacts the Model on the same level as the `limit` option.\r\n   *\r\n   * You can disable this behavior by explicitly setting `subQuery: false`, however `limit` will then\r\n   * affect the total count of returned values, including eager-loaded associations, instead of just one table.\r\n   *\r\n   * @example\r\n   * // in the following query, `limit` only affects the \"User\" model.\r\n   * // This will return 2 users, each including all of their projects.\r\n   * User.findAll({\r\n   *   limit: 2,\r\n   *   include: [User.associations.projects],\r\n   * });\r\n   *\r\n   * @example\r\n   * // in the following query, `limit` affects the total number of returned values, eager-loaded associations included.\r\n   * // This may return 2 users, each with one project,\r\n   * //  or 1 user with 2 projects.\r\n   * User.findAll({\r\n   *   limit: 2,\r\n   *   include: [User.associations.projects],\r\n   *   subQuery: false,\r\n   * });\r\n   */\r\n  limit?: number;\r\n\r\n  // TODO: document this - this is an undocumented property but it exists and there are tests for it.\r\n  groupedLimit?: unknown;\r\n\r\n  /**\r\n   * Skip the results;\r\n   */\r\n  offset?: number;\r\n\r\n  /**\r\n   * Lock the selected rows. Possible options are transaction.LOCK.UPDATE and transaction.LOCK.SHARE.\r\n   * Postgres also supports transaction.LOCK.KEY_SHARE, transaction.LOCK.NO_KEY_UPDATE and specific model\r\n   * locks with joins. See [transaction.LOCK for an example](transaction#lock)\r\n   */\r\n  lock?:\r\n  | LOCK\r\n  | { level: LOCK; of: ModelStatic<Model> }\r\n  | boolean;\r\n  /**\r\n   * Skip locked rows. Only supported in Postgres.\r\n   */\r\n  skipLocked?: boolean;\r\n\r\n  /**\r\n   * Return raw result. See sequelize.query for more information.\r\n   */\r\n  raw?: boolean;\r\n\r\n  /**\r\n   * Select group rows after groups and aggregates are computed.\r\n   */\r\n  having?: WhereOptions<any>;\r\n\r\n  /**\r\n   * Use sub queries (internal).\r\n   *\r\n   * If unspecified, this will `true` by default if `limit` is specified, and `false` otherwise.\r\n   * See {@link FindOptions#limit} for more information.\r\n   */\r\n  subQuery?: boolean;\r\n}\r\n\r\nexport interface NonNullFindOptions<TAttributes = any> extends FindOptions<TAttributes> {\r\n  /**\r\n   * Throw if nothing was found.\r\n   */\r\n  rejectOnEmpty: boolean | Error;\r\n}\r\n\r\n/**\r\n * Options for Model.count method\r\n */\r\nexport interface CountOptions<TAttributes = any>\r\n  extends Logging, Transactionable, Filterable<TAttributes>, Projectable, Paranoid, Poolable\r\n{\r\n  /**\r\n   * Include options. See `find` for details\r\n   */\r\n  include?: Includeable | Includeable[];\r\n\r\n  /**\r\n   * Apply COUNT(DISTINCT(col))\r\n   */\r\n  distinct?: boolean;\r\n\r\n  /**\r\n   * GROUP BY in sql\r\n   * Used in conjunction with `attributes`.\r\n   *\r\n   * @see Projectable\r\n   */\r\n  group?: GroupOption;\r\n\r\n  /**\r\n   * The column to aggregate on.\r\n   */\r\n  col?: string;\r\n}\r\n\r\n/**\r\n * Options for Model.count when GROUP BY is used\r\n */\r\nexport type CountWithOptions<TAttributes = any> = SetRequired<CountOptions<TAttributes>, 'group'>\r\n\r\nexport interface FindAndCountOptions<TAttributes = any> extends CountOptions<TAttributes>, FindOptions<TAttributes> { }\r\n\r\nexport interface GroupedCountResultItem {\r\n  [key: string]: unknown // projected attributes\r\n  count: number // the count for each group\r\n}\r\n\r\n/**\r\n * Options for Model.build method\r\n */\r\nexport interface BuildOptions {\r\n  /**\r\n   * If set to true, values will ignore field and virtual setters.\r\n   */\r\n  raw?: boolean;\r\n\r\n  /**\r\n   * Is this record new\r\n   */\r\n  isNewRecord?: boolean;\r\n\r\n  /**\r\n   * An array of include options. A single option is also supported - Used to build prefetched/included model instances. See `set`\r\n   *\r\n   * TODO: See set\r\n   */\r\n  include?: Includeable | Includeable[];\r\n}\r\n\r\nexport interface Silent {\r\n  /**\r\n   * If true, the updatedAt timestamp will not be updated.\r\n   *\r\n   * @default false\r\n   */\r\n  silent?: boolean;\r\n}\r\n\r\n/**\r\n * Options for Model.create method\r\n */\r\nexport interface CreateOptions<TAttributes = any> extends BuildOptions, Logging, Silent, Transactionable, Hookable {\r\n  /**\r\n   * If set, only columns matching those in fields will be saved\r\n   */\r\n  fields?: (keyof TAttributes)[];\r\n\r\n  /**\r\n   * dialect specific ON CONFLICT DO NOTHING / INSERT IGNORE\r\n   */\r\n  ignoreDuplicates?: boolean;\r\n\r\n  /**\r\n   * Return the affected rows (only for postgres)\r\n   */\r\n  returning?: boolean | (keyof TAttributes)[];\r\n\r\n  /**\r\n   * If false, validations won't be run.\r\n   *\r\n   * @default true\r\n   */\r\n  validate?: boolean;\r\n\r\n}\r\n\r\nexport interface Hookable {\r\n\r\n  /**\r\n   * If `false` the applicable hooks will not be called.\r\n   * The default value depends on the context.\r\n   */\r\n  hooks?: boolean\r\n\r\n}\r\n\r\n/**\r\n * Options for Model.findOrCreate method\r\n */\r\nexport interface FindOrCreateOptions<TAttributes = any, TCreationAttributes = TAttributes>\r\n  extends FindOptions<TAttributes>, CreateOptions<TAttributes>\r\n{\r\n  /**\r\n   * Default values to use if building a new instance\r\n   */\r\n  defaults?: TCreationAttributes;\r\n}\r\n\r\n/**\r\n * Options for Model.findOrBuild method\r\n */\r\nexport interface FindOrBuildOptions<TAttributes = any, TCreationAttributes = TAttributes>\r\n  extends FindOptions<TAttributes>, BuildOptions\r\n{\r\n  /**\r\n   * Default values to use if building a new instance\r\n   */\r\n  defaults?: TCreationAttributes;\r\n}\r\n\r\n/**\r\n * Options for Model.upsert method\r\n */\r\nexport interface UpsertOptions<TAttributes = any> extends Logging, Transactionable, SearchPathable, Hookable {\r\n  /**\r\n   * The fields to insert / update. Defaults to all fields\r\n   */\r\n  fields?: (keyof TAttributes)[];\r\n\r\n  /**\r\n   * Return the affected rows (only for postgres)\r\n   */\r\n  returning?: boolean | (keyof TAttributes)[];\r\n\r\n  /**\r\n   * Run validations before the row is inserted\r\n   */\r\n  validate?: boolean;\r\n  /**\r\n   * An optional parameter that specifies a where clause for the `ON CONFLICT` part of the query\r\n   * (in particular: for applying to partial unique indexes).\r\n   * Only supported in Postgres >= 9.5 and SQLite >= 3.24.0\r\n   */\r\n  conflictWhere?: WhereOptions<TAttributes>;\r\n  /**\r\n   * Optional override for the conflict fields in the ON CONFLICT part of the query.\r\n   * Only supported in Postgres >= 9.5 and SQLite >= 3.24.0\r\n   */\r\n   conflictFields?: (keyof TAttributes)[];\r\n}\r\n\r\n/**\r\n * Options for Model.bulkCreate method\r\n */\r\nexport interface BulkCreateOptions<TAttributes = any> extends Logging, Transactionable, Hookable, SearchPathable {\r\n  /**\r\n   * Fields to insert (defaults to all fields)\r\n   */\r\n  fields?: (keyof TAttributes)[];\r\n\r\n  /**\r\n   * Should each row be subject to validation before it is inserted. The whole insert will fail if one row\r\n   * fails validation\r\n   */\r\n  validate?: boolean;\r\n\r\n  /**\r\n   * Run before / after create hooks for each individual Instance? BulkCreate hooks will still be run if\r\n   * options.hooks is true.\r\n   */\r\n  individualHooks?: boolean;\r\n\r\n  /**\r\n   * Ignore duplicate values for primary keys?\r\n   *\r\n   * @default false\r\n   */\r\n  ignoreDuplicates?: boolean;\r\n\r\n  /**\r\n   * Fields to update if row key already exists (on duplicate key update)? (only supported by MySQL,\r\n   * MariaDB, SQLite >= 3.24.0 & Postgres >= 9.5).\r\n   */\r\n  updateOnDuplicate?: (keyof TAttributes)[];\r\n\r\n  /**\r\n   * Include options. See `find` for details\r\n   */\r\n  include?: Includeable | Includeable[];\r\n\r\n  /**\r\n   * Return all columns or only the specified columns for the affected rows (only for postgres)\r\n   */\r\n  returning?: boolean | (keyof TAttributes)[];\r\n  /**\r\n   * An optional parameter to specify a where clause for partial unique indexes\r\n   * (note: `ON CONFLICT WHERE` not `ON CONFLICT DO UPDATE WHERE`).\r\n   * Only supported in Postgres >= 9.5 and sqlite >= 9.5\r\n   */\r\n    conflictWhere?: WhereOptions<TAttributes>;\r\n  /**\r\n   * Optional override for the conflict fields in the ON CONFLICT part of the query.\r\n   * Only supported in Postgres >= 9.5 and SQLite >= 3.24.0\r\n   */\r\n  conflictAttributes?: Array<keyof TAttributes>;\r\n}\r\n\r\n/**\r\n * The options passed to Model.destroy in addition to truncate\r\n */\r\nexport interface TruncateOptions<TAttributes = any> extends Logging, Transactionable, Filterable<TAttributes>, Hookable {\r\n  /**\r\n   * Only used in conjuction with TRUNCATE. Truncates  all tables that have foreign-key references to the\r\n   * named table, or to any tables added to the group due to CASCADE.\r\n   *\r\n   * @default false;\r\n   */\r\n  cascade?: boolean;\r\n\r\n  /**\r\n   * If set to true, destroy will SELECT all records matching the where parameter and will execute before /\r\n   * after destroy hooks on each row\r\n   */\r\n  individualHooks?: boolean;\r\n\r\n  /**\r\n   * How many rows to delete\r\n   */\r\n  limit?: number;\r\n\r\n  /**\r\n   * Delete instead of setting deletedAt to current timestamp (only applicable if `paranoid` is enabled)\r\n   */\r\n  force?: boolean;\r\n\r\n  /**\r\n   * Only used in conjunction with `truncate`.\r\n   * Automatically restart sequences owned by columns of the truncated table\r\n   */\r\n  restartIdentity?: boolean;\r\n}\r\n\r\n/**\r\n * Options used for Model.destroy\r\n */\r\nexport interface DestroyOptions<TAttributes = any> extends TruncateOptions<TAttributes> {\r\n  /**\r\n   * If set to true, dialects that support it will use TRUNCATE instead of DELETE FROM. If a table is\r\n   * truncated the where and limit options are ignored\r\n   */\r\n  truncate?: boolean;\r\n}\r\n\r\n/**\r\n * Options for Model.restore\r\n */\r\nexport interface RestoreOptions<TAttributes = any> extends Logging, Transactionable, Filterable<TAttributes>, Hookable {\r\n\r\n  /**\r\n   * If set to true, restore will find all records within the where parameter and will execute before / after\r\n   * bulkRestore hooks on each row\r\n   */\r\n  individualHooks?: boolean;\r\n\r\n  /**\r\n   * How many rows to undelete\r\n   */\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Options used for Model.update\r\n */\r\nexport interface UpdateOptions<TAttributes = any> extends Logging, Transactionable, Paranoid, Hookable {\r\n  /**\r\n   * Options to describe the scope of the search.\r\n   */\r\n  where: WhereOptions<TAttributes>;\r\n\r\n  /**\r\n   * Fields to update (defaults to all fields)\r\n   */\r\n  fields?: (keyof TAttributes)[];\r\n\r\n  /**\r\n   * Should each row be subject to validation before it is inserted. The whole insert will fail if one row\r\n   * fails validation.\r\n   *\r\n   * @default true\r\n   */\r\n  validate?: boolean;\r\n\r\n  /**\r\n   * Whether or not to update the side effects of any virtual setters.\r\n   *\r\n   * @default true\r\n   */\r\n  sideEffects?: boolean;\r\n\r\n  /**\r\n   * Run before / after update hooks?. If true, this will execute a SELECT followed by individual UPDATEs.\r\n   * A select is needed, because the row data needs to be passed to the hooks\r\n   *\r\n   * @default false\r\n   */\r\n  individualHooks?: boolean;\r\n\r\n  /**\r\n   * Return the affected rows (only for postgres)\r\n   */\r\n  returning?: boolean | (keyof TAttributes)[];\r\n\r\n  /**\r\n   * How many rows to update (only for mysql and mariadb)\r\n   */\r\n  limit?: number;\r\n\r\n  /**\r\n   * If true, the updatedAt timestamp will not be updated.\r\n   */\r\n  silent?: boolean;\r\n}\r\n\r\n/**\r\n * Options used for Model.aggregate\r\n */\r\nexport interface AggregateOptions<T extends DataType | unknown, TAttributes = any>\r\n  extends QueryOptions, Filterable<TAttributes>, Paranoid\r\n{\r\n  /**\r\n   * The type of the result. If `field` is a field in this Model, the default will be the type of that field,\r\n   * otherwise defaults to float.\r\n   */\r\n  dataType?: string | T;\r\n\r\n  /**\r\n   * Applies DISTINCT to the field being aggregated over\r\n   */\r\n  distinct?: boolean;\r\n}\r\n\r\n// instance\r\n\r\n/**\r\n * Options used for Instance.increment method\r\n */\r\nexport interface IncrementDecrementOptions<TAttributes = any>\r\n  extends Logging, Transactionable, Silent, SearchPathable, Filterable<TAttributes> { }\r\n\r\n/**\r\n * Options used for Instance.increment method\r\n */\r\nexport interface IncrementDecrementOptionsWithBy<TAttributes = any> extends IncrementDecrementOptions<TAttributes> {\r\n  /**\r\n   * The number to increment by\r\n   *\r\n   * @default 1\r\n   */\r\n  by?: number;\r\n}\r\n\r\n/**\r\n * Options used for Instance.restore method\r\n */\r\nexport interface InstanceRestoreOptions extends Logging, Transactionable { }\r\n\r\n/**\r\n * Options used for Instance.destroy method\r\n */\r\nexport interface InstanceDestroyOptions extends Logging, Transactionable, Hookable {\r\n  /**\r\n   * If set to true, paranoid models will actually be deleted\r\n   */\r\n  force?: boolean;\r\n}\r\n\r\n/**\r\n * Options used for Instance.update method\r\n */\r\nexport interface InstanceUpdateOptions<TAttributes = any> extends\r\n  SaveOptions<TAttributes>, SetOptions, Filterable<TAttributes> { }\r\n\r\n/**\r\n * Options used for Instance.set method\r\n */\r\nexport interface SetOptions {\r\n  /**\r\n   * If set to true, field and virtual setters will be ignored\r\n   */\r\n  raw?: boolean;\r\n\r\n  /**\r\n   * Clear all previously set data values\r\n   */\r\n  reset?: boolean;\r\n}\r\n\r\n/**\r\n * Options used for Instance.save method\r\n */\r\nexport interface SaveOptions<TAttributes = any> extends Logging, Transactionable, Silent, Hookable {\r\n  /**\r\n   * An optional array of strings, representing database columns. If fields is provided, only those columns\r\n   * will be validated and saved.\r\n   */\r\n  fields?: (keyof TAttributes)[];\r\n\r\n  /**\r\n   * If false, validations won't be run.\r\n   *\r\n   * @default true\r\n   */\r\n  validate?: boolean;\r\n\r\n  /**\r\n   * A flag that defines if null values should be passed as values or not.\r\n   *\r\n   * @default false\r\n   */\r\n  omitNull?: boolean;\r\n}\r\n\r\n/**\r\n * Model validations, allow you to specify format/content/inheritance validations for each attribute of the\r\n * model.\r\n *\r\n * Validations are automatically run on create, update and save. You can also call validate() to manually\r\n * validate an instance.\r\n *\r\n * The validations are implemented by validator.js.\r\n */\r\nexport interface ModelValidateOptions {\r\n  /**\r\n   * - `{ is: ['^[a-z]+$','i'] }` will only allow letters\r\n   * - `{ is: /^[a-z]+$/i }` also only allows letters\r\n   */\r\n  is?: string | readonly (string | RegExp)[] | RegExp | { msg: string; args: string | readonly (string | RegExp)[] | RegExp };\r\n\r\n  /**\r\n   * - `{ not: ['[a-z]','i'] }` will not allow letters\r\n   */\r\n  not?: string | readonly (string | RegExp)[] | RegExp | { msg: string; args: string | readonly (string | RegExp)[] | RegExp };\r\n\r\n  /**\r\n   * checks for email format (foo@bar.com)\r\n   */\r\n  isEmail?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for url format (http://foo.com)\r\n   */\r\n  isUrl?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for IPv4 (129.89.23.1) or IPv6 format\r\n   */\r\n  isIP?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for IPv4 (129.89.23.1)\r\n   */\r\n  isIPv4?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for IPv6 format\r\n   */\r\n  isIPv6?: boolean | { msg: string };\r\n\r\n  /**\r\n   * will only allow letters\r\n   */\r\n  isAlpha?: boolean | { msg: string };\r\n\r\n  /**\r\n   * will only allow alphanumeric characters, so \"_abc\" will fail\r\n   */\r\n  isAlphanumeric?: boolean | { msg: string };\r\n\r\n  /**\r\n   * will only allow numbers\r\n   */\r\n  isNumeric?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for valid integers\r\n   */\r\n  isInt?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for valid floating point numbers\r\n   */\r\n  isFloat?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for any numbers\r\n   */\r\n  isDecimal?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for lowercase\r\n   */\r\n  isLowercase?: boolean | { msg: string };\r\n\r\n  /**\r\n   * checks for uppercase\r\n   */\r\n  isUppercase?: boolean | { msg: string };\r\n\r\n  /**\r\n   * won't allow null\r\n   */\r\n  notNull?: boolean | { msg: string };\r\n\r\n  /**\r\n   * only allows null\r\n   */\r\n  isNull?: boolean | { msg: string };\r\n\r\n  /**\r\n   * don't allow empty strings\r\n   */\r\n  notEmpty?: boolean | { msg: string };\r\n\r\n  /**\r\n   * only allow a specific value\r\n   */\r\n  equals?: string | { msg: string };\r\n\r\n  /**\r\n   * force specific substrings\r\n   */\r\n  contains?: string | { msg: string };\r\n\r\n  /**\r\n   * check the value is not one of these\r\n   */\r\n  notIn?: ReadonlyArray<readonly any[]> | { msg: string; args: ReadonlyArray<readonly any[]> };\r\n\r\n  /**\r\n   * check the value is one of these\r\n   */\r\n  isIn?: ReadonlyArray<readonly any[]> | { msg: string; args: ReadonlyArray<readonly any[]> };\r\n\r\n  /**\r\n   * don't allow specific substrings\r\n   */\r\n  notContains?: readonly string[] | string | { msg: string; args: readonly string[] | string };\r\n\r\n  /**\r\n   * only allow values with length between 2 and 10\r\n   */\r\n  len?: readonly [number, number] | { msg: string; args: readonly [number, number] };\r\n\r\n  /**\r\n   * only allow uuids\r\n   */\r\n  isUUID?: number | { msg: string; args: number };\r\n\r\n  /**\r\n   * only allow date strings\r\n   */\r\n  isDate?: boolean | { msg: string; args: boolean };\r\n\r\n  /**\r\n   * only allow date strings after a specific date\r\n   */\r\n  isAfter?: string | { msg: string; args: string };\r\n\r\n  /**\r\n   * only allow date strings before a specific date\r\n   */\r\n  isBefore?: string | { msg: string; args: string };\r\n\r\n  /**\r\n   * only allow values\r\n   */\r\n  max?: number | { msg: string; args: readonly [number] };\r\n\r\n  /**\r\n   * only allow values >= 23\r\n   */\r\n  min?: number | { msg: string; args: readonly [number] };\r\n\r\n  /**\r\n   * only allow arrays\r\n   */\r\n  isArray?: boolean | { msg: string; args: boolean };\r\n\r\n  /**\r\n   * check for valid credit card numbers\r\n   */\r\n  isCreditCard?: boolean | { msg: string; args: boolean };\r\n\r\n  // TODO: Enforce 'rest' indexes to have type `(value: unknown) => boolean`\r\n  // Blocked by: https://github.com/microsoft/TypeScript/issues/7765\r\n  /**\r\n   * Custom validations are also possible\r\n   */\r\n  [name: string]: unknown;\r\n}\r\n\r\n/**\r\n * Interface for indexes property in InitOptions\r\n */\r\nexport type ModelIndexesOptions = IndexesOptions\r\n\r\n/**\r\n * Interface for name property in InitOptions\r\n */\r\nexport interface ModelNameOptions {\r\n  /**\r\n   * Singular model name\r\n   */\r\n  singular?: string;\r\n\r\n  /**\r\n   * Plural model name\r\n   */\r\n  plural?: string;\r\n}\r\n\r\n/**\r\n * Interface for getterMethods in InitOptions\r\n */\r\nexport interface ModelGetterOptions<M extends Model = Model> {\r\n  [name: string]: (this: M) => unknown;\r\n}\r\n\r\n/**\r\n * Interface for setterMethods in InitOptions\r\n */\r\nexport interface ModelSetterOptions<M extends Model = Model> {\r\n  [name: string]: (this: M, val: any) => void;\r\n}\r\n\r\n/**\r\n * Interface for Define Scope Options\r\n */\r\nexport interface ModelScopeOptions<TAttributes = any> {\r\n  /**\r\n   * Name of the scope and it's query\r\n   */\r\n  [scopeName: string]: FindOptions<TAttributes> | ((...args: readonly any[]) => FindOptions<TAttributes>);\r\n}\r\n\r\n/**\r\n * General column options\r\n */\r\nexport interface ColumnOptions {\r\n  /**\r\n   * If false, the column will have a NOT NULL constraint, and a not null validation will be run before an\r\n   * instance is saved.\r\n   *\r\n   * @default true\r\n   */\r\n  allowNull?: boolean;\r\n\r\n  /**\r\n   *  If set, sequelize will map the attribute name to a different name in the database\r\n   */\r\n  field?: string;\r\n\r\n  /**\r\n   * A literal default value, a JavaScript function, or an SQL function (see `sequelize.fn`)\r\n   */\r\n  defaultValue?: unknown;\r\n}\r\n\r\n/**\r\n * References options for the column's attributes\r\n */\r\nexport interface ModelAttributeColumnReferencesOptions {\r\n  /**\r\n   * If this column references another table, provide it here as a Model, or a string\r\n   */\r\n  model?: TableName | ModelType;\r\n\r\n  /**\r\n   * The column of the foreign table that this column references\r\n   */\r\n  key?: string;\r\n\r\n  /**\r\n   * When to check for the foreign key constraing\r\n   *\r\n   * PostgreSQL only\r\n   */\r\n  deferrable?: Deferrable;\r\n}\r\n\r\n/**\r\n * Column options for the model schema attributes\r\n */\r\nexport interface ModelAttributeColumnOptions<M extends Model = Model> extends ColumnOptions {\r\n  /**\r\n   * A string or a data type\r\n   */\r\n  type: DataType;\r\n\r\n  /**\r\n   * If true, the column will get a unique constraint. If a string is provided, the column will be part of a\r\n   * composite unique index. If multiple columns have the same string, they will be part of the same unique\r\n   * index\r\n   */\r\n  unique?: boolean | string | { name: string; msg: string };\r\n\r\n  /**\r\n   * Primary key flag\r\n   */\r\n  primaryKey?: boolean;\r\n\r\n  /**\r\n   * Is this field an auto increment field\r\n   */\r\n  autoIncrement?: boolean;\r\n\r\n  /**\r\n   * If this field is a Postgres auto increment field, use Postgres `GENERATED BY DEFAULT AS IDENTITY` instead of `SERIAL`. Postgres 10+ only.\r\n   */\r\n  autoIncrementIdentity?: boolean;\r\n\r\n  /**\r\n   * Comment for the database\r\n   */\r\n  comment?: string;\r\n\r\n  /**\r\n   * An object with reference configurations or the column name as string\r\n   */\r\n  references?: string | ModelAttributeColumnReferencesOptions;\r\n\r\n  /**\r\n   * What should happen when the referenced key is updated. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or\r\n   * NO ACTION\r\n   */\r\n  onUpdate?: string;\r\n\r\n  /**\r\n   * What should happen when the referenced key is deleted. One of CASCADE, RESTRICT, SET DEFAULT, SET NULL or\r\n   * NO ACTION\r\n   */\r\n  onDelete?: string;\r\n\r\n\r\n  /**\r\n   * An object of validations to execute for this column every time the model is saved. Can be either the\r\n   * name of a validation provided by validator.js, a validation function provided by extending validator.js\r\n   * (see the\r\n   * `DAOValidator` property for more details), or a custom validation function. Custom validation functions\r\n   * are called with the value of the field, and can possibly take a second callback argument, to signal that\r\n   * they are asynchronous. If the validator is sync, it should throw in the case of a failed validation, it\r\n   * it is async, the callback should be called with the error text.\r\n   */\r\n  validate?: ModelValidateOptions;\r\n\r\n  /**\r\n   * Usage in object notation\r\n   *\r\n   * ```js\r\n   * class MyModel extends Model {}\r\n   * MyModel.init({\r\n   *   states: {\r\n   *     type:   Sequelize.ENUM,\r\n   *     values: ['active', 'pending', 'deleted']\r\n   *   }\r\n   * }, { sequelize })\r\n   * ```\r\n   */\r\n  values?: readonly string[];\r\n\r\n  /**\r\n   * Provide a custom getter for this column. Use `this.getDataValue(String)` to manipulate the underlying\r\n   * values.\r\n   */\r\n  get?(this: M): unknown;\r\n\r\n  /**\r\n   * Provide a custom setter for this column. Use `this.setDataValue(String, Value)` to manipulate the\r\n   * underlying values.\r\n   */\r\n  set?(this: M, val: unknown): void;\r\n}\r\n\r\n/**\r\n * Interface for Attributes provided for all columns in a model\r\n */\r\nexport type ModelAttributes<M extends Model = Model, TAttributes = any> = {\r\n  /**\r\n   * The description of a database column\r\n   */\r\n  [name in keyof TAttributes]: DataType | ModelAttributeColumnOptions<M>;\r\n}\r\n\r\n/**\r\n * Possible types for primary keys\r\n */\r\nexport type Identifier = number | bigint | string | Buffer;\r\n\r\n/**\r\n * Options for model definition\r\n */\r\nexport interface ModelOptions<M extends Model = Model> {\r\n  /**\r\n   * Define the default search scope to use for this model. Scopes have the same form as the options passed to\r\n   * find / findAll.\r\n   */\r\n  defaultScope?: FindOptions<Attributes<M>>;\r\n\r\n  /**\r\n   * More scopes, defined in the same way as defaultScope above. See `Model.scope` for more information about\r\n   * how scopes are defined, and what you can do with them\r\n   */\r\n  scopes?: ModelScopeOptions<Attributes<M>>;\r\n\r\n  /**\r\n   * Don't persits null values. This means that all columns with null values will not be saved.\r\n   */\r\n  omitNull?: boolean;\r\n\r\n  /**\r\n   * Adds createdAt and updatedAt timestamps to the model. Default true.\r\n   */\r\n  timestamps?: boolean;\r\n\r\n  /**\r\n   * Calling destroy will not delete the model, but instead set a deletedAt timestamp if this is true. Needs\r\n   * timestamps=true to work. Default false.\r\n   */\r\n  paranoid?: boolean;\r\n\r\n  /**\r\n   * Converts all camelCased columns to underscored if true. Default false.\r\n   */\r\n  underscored?: boolean;\r\n\r\n  /**\r\n   * Indicates if the model's table has a trigger associated with it. Default false.\r\n   */\r\n  hasTrigger?: boolean;\r\n\r\n  /**\r\n   * If freezeTableName is true, sequelize will not try to alter the DAO name to get the table name.\r\n   * Otherwise, the dao name will be pluralized. Default false.\r\n   */\r\n  freezeTableName?: boolean;\r\n\r\n  /**\r\n   * An object with two attributes, `singular` and `plural`, which are used when this model is associated to\r\n   * others.\r\n   */\r\n  name?: ModelNameOptions;\r\n\r\n  /**\r\n   * Set name of the model. By default its same as Class name.\r\n   */\r\n  modelName?: string;\r\n\r\n  /**\r\n   * Indexes for the provided database table\r\n   */\r\n  indexes?: readonly ModelIndexesOptions[];\r\n\r\n  /**\r\n   * Override the name of the createdAt column if a string is provided, or disable it if false. Timestamps\r\n   * must be true. Not affected by underscored setting.\r\n   */\r\n  createdAt?: string | boolean;\r\n\r\n  /**\r\n   * Override the name of the deletedAt column if a string is provided, or disable it if false. Timestamps\r\n   * must be true. Not affected by underscored setting.\r\n   */\r\n  deletedAt?: string | boolean;\r\n\r\n  /**\r\n   * Override the name of the updatedAt column if a string is provided, or disable it if false. Timestamps\r\n   * must be true. Not affected by underscored setting.\r\n   */\r\n  updatedAt?: string | boolean;\r\n\r\n  /**\r\n   * @default pluralized model name, unless freezeTableName is true, in which case it uses model name\r\n   * verbatim\r\n   */\r\n  tableName?: string;\r\n\r\n  schema?: string;\r\n\r\n  /**\r\n   * You can also change the database engine, e.g. to MyISAM. InnoDB is the default.\r\n   */\r\n  engine?: string;\r\n\r\n  charset?: string;\r\n\r\n  /**\r\n   * Finaly you can specify a comment for the table in MySQL and PG\r\n   */\r\n  comment?: string;\r\n\r\n  collate?: string;\r\n\r\n  /**\r\n   * Set the initial AUTO_INCREMENT value for the table in MySQL.\r\n   */\r\n  initialAutoIncrement?: string;\r\n\r\n  /**\r\n   * An object of hook function that are called before and after certain lifecycle events.\r\n   * See Hooks for more information about hook\r\n   * functions and their signatures. Each property can either be a function, or an array of functions.\r\n   */\r\n  hooks?: Partial<ModelHooks<M, Attributes<M>>>;\r\n\r\n  /**\r\n   * An object of model wide validations. Validations have access to all model values via `this`. If the\r\n   * validator function takes an argument, it is asumed to be async, and is called with a callback that\r\n   * accepts an optional error.\r\n   */\r\n  validate?: ModelValidateOptions;\r\n\r\n  /**\r\n   * Allows defining additional setters that will be available on model instances.\r\n   */\r\n  setterMethods?: ModelSetterOptions<M>;\r\n\r\n  /**\r\n   * Allows defining additional getters that will be available on model instances.\r\n   */\r\n  getterMethods?: ModelGetterOptions<M>;\r\n\r\n  /**\r\n   * Enable optimistic locking.\r\n   * When enabled, sequelize will add a version count attribute to the model and throw an\r\n   * OptimisticLockingError error when stale instances are saved.\r\n   * - If string: Uses the named attribute.\r\n   * - If boolean: Uses `version`.\r\n   *\r\n   * @default false\r\n   */\r\n  version?: boolean | string;\r\n\r\n  /**\r\n   * Specify the scopes merging strategy (default 'overwrite'). Valid values are 'and' and 'overwrite'.\r\n   * When the 'and' strategy is set, scopes will be grouped using the Op.and operator.\r\n   * For instance merging scopes containing `{ where: { myField: 1 }}` and `{ where: { myField: 2 }}` will result in\r\n   * `{ where: { [Op.and]: [{ myField: 1 }, { myField: 2 }] } }`.\r\n   * When the 'overwrite' strategy is set, scopes containing the same attribute in a where clause will be overwritten by the lastly defined one.\r\n   * For instance merging scopes containing `{ where: { myField: 1 }}` and `{ where: { myField: 2 }}` will result in\r\n   * `{ where: { myField: 2 } }`.\r\n   *\r\n   * @default false\r\n   */\r\n  whereMergeStrategy?: 'and' | 'overwrite';\r\n}\r\n\r\n/**\r\n * Options passed to [[Model.init]]\r\n */\r\nexport interface InitOptions<M extends Model = Model> extends ModelOptions<M> {\r\n  /**\r\n   * The sequelize connection. Required ATM.\r\n   */\r\n  sequelize: Sequelize;\r\n}\r\n\r\n/**\r\n * AddScope Options for Model.addScope\r\n */\r\nexport interface AddScopeOptions {\r\n  /**\r\n   * If a scope of the same name already exists, should it be overwritten?\r\n   */\r\n  override: boolean;\r\n}\r\n\r\nexport abstract class Model<TModelAttributes extends {} = any, TCreationAttributes extends {} = TModelAttributes>\r\n  extends Hooks<Model<TModelAttributes, TCreationAttributes>, TModelAttributes, TCreationAttributes>\r\n{\r\n  /**\r\n   * A dummy variable that doesn't exist on the real object. This exists so\r\n   * Typescript can infer the type of the attributes in static functions. Don't\r\n   * try to access this!\r\n   *\r\n   * Before using these, I'd tried typing out the functions without them, but\r\n   * Typescript fails to infer `TAttributes` in signatures like the below.\r\n   *\r\n   * ```ts\r\n   * public static findOne<M extends Model<TAttributes>, TAttributes>(\r\n   *   this: { new(): M },\r\n   *   options: NonNullFindOptions<TAttributes>\r\n   * ): Promise<M>;\r\n   * ```\r\n   *\r\n   * @deprecated This property will become a Symbol in v7 to prevent collisions.\r\n   * Use Attributes<Model> instead of this property to be forward-compatible.\r\n   */\r\n  _attributes: TModelAttributes; // TODO [>6]: make this a non-exported symbol (same as the one in hooks.d.ts)\r\n\r\n  /**\r\n   * Object that contains underlying model data\r\n   */\r\n  dataValues: TModelAttributes;\r\n\r\n  /**\r\n   * A similar dummy variable that doesn't exist on the real object. Do not\r\n   * try to access this in real code.\r\n   *\r\n   * @deprecated This property will become a Symbol in v7 to prevent collisions.\r\n   * Use CreationAttributes<Model> instead of this property to be forward-compatible.\r\n   */\r\n  _creationAttributes: TCreationAttributes; // TODO [>6]: make this a non-exported symbol (same as the one in hooks.d.ts)\r\n\r\n  /** The name of the database table */\r\n  public static readonly tableName: string;\r\n\r\n  /**\r\n   * The name of the primary key attribute\r\n   */\r\n  public static readonly primaryKeyAttribute: string;\r\n\r\n  /**\r\n   * The name of the primary key attributes\r\n   */\r\n  public static readonly primaryKeyAttributes: readonly string[];\r\n\r\n  /**\r\n   * An object hash from alias to association object\r\n   */\r\n  public static readonly associations: {\r\n    [key: string]: Association;\r\n  };\r\n\r\n  /**\r\n   * The options that the model was initialized with\r\n   */\r\n  public static readonly options: InitOptions;\r\n\r\n  // TODO [>7]: Remove `rawAttributes` in v8\r\n  /**\r\n   * The attributes of the model.\r\n   *\r\n   * @deprecated use {@link Model.getAttributes} for better typings.\r\n   */\r\n  public static readonly rawAttributes: { [attribute: string]: ModelAttributeColumnOptions };\r\n\r\n  /**\r\n   * Returns the attributes of the model\r\n   */\r\n  public static getAttributes<M extends Model>(this: ModelStatic<M>): {\r\n    readonly [Key in keyof Attributes<M>]: ModelAttributeColumnOptions\r\n  };\r\n\r\n  /**\r\n   * Reference to the sequelize instance the model was initialized with\r\n   */\r\n  public static readonly sequelize?: Sequelize;\r\n\r\n  /**\r\n   * Initialize a model, representing a table in the DB, with attributes and options.\r\n   *\r\n   * The table columns are define by the hash that is given as the second argument. Each attribute of the hash represents a column. A short table definition might look like this:\r\n   *\r\n   * ```js\r\n   * Project.init({\r\n   *   columnA: {\r\n   *     type: Sequelize.BOOLEAN,\r\n   *     validate: {\r\n   *       is: ['[a-z]','i'],        // will only allow letters\r\n   *       max: 23,                  // only allow values <= 23\r\n   *       isIn: {\r\n   *         args: [['en', 'zh']],\r\n   *         msg: \"Must be English or Chinese\"\r\n   *       }\r\n   *     },\r\n   *     field: 'column_a'\r\n   *     // Other attributes here\r\n   *   },\r\n   *   columnB: Sequelize.STRING,\r\n   *   columnC: 'MY VERY OWN COLUMN TYPE'\r\n   * }, {sequelize})\r\n   *\r\n   * sequelize.models.modelName // The model will now be available in models under the class name\r\n   * ```\r\n   *\r\n   * As shown above, column definitions can be either strings, a reference to one of the datatypes that are predefined on the Sequelize constructor, or an object that allows you to specify both the type of the column, and other attributes such as default values, foreign key constraints and custom setters and getters.\r\n   *\r\n   * For a list of possible data types, see https://sequelize.org/master/en/latest/docs/models-definition/#data-types\r\n   *\r\n   * For more about getters and setters, see https://sequelize.org/master/en/latest/docs/models-definition/#getters-setters\r\n   *\r\n   * For more about instance and class methods, see https://sequelize.org/master/en/latest/docs/models-definition/#expansion-of-models\r\n   *\r\n   * For more about validation, see https://sequelize.org/master/en/latest/docs/models-definition/#validations\r\n   *\r\n   * @param attributes\r\n   *  An object, where each attribute is a column of the table. Each column can be either a DataType, a\r\n   *  string or a type-description object, with the properties described below:\r\n   * @param options These options are merged with the default define options provided to the Sequelize constructor\r\n   * @returns Return the initialized model\r\n   */\r\n  public static init<MS extends ModelStatic<Model>, M extends InstanceType<MS>>(\r\n    this: MS,\r\n    attributes: ModelAttributes<\r\n      M,\r\n      // 'foreign keys' are optional in Model.init as they are added by association declaration methods\r\n      Optional<Attributes<M>, BrandedKeysOf<Attributes<M>, typeof ForeignKeyBrand>>\r\n    >,\r\n    options: InitOptions<M>\r\n  ): MS;\r\n\r\n  /**\r\n   * Remove attribute from model definition\r\n   *\r\n   * @param attribute\r\n   */\r\n  public static removeAttribute(attribute: string): void;\r\n\r\n  /**\r\n   * Sync this Model to the DB, that is create the table. Upon success, the callback will be called with the\r\n   * model instance (this)\r\n   */\r\n  public static sync<M extends Model>(options?: SyncOptions): Promise<M>;\r\n\r\n  /**\r\n   * Drop the table represented by this Model\r\n   *\r\n   * @param options\r\n   */\r\n  public static drop(options?: DropOptions): Promise<void>;\r\n\r\n  /**\r\n   * Apply a schema to this model. For postgres, this will actually place the schema in front of the table\r\n   * name\r\n   * - `\"schema\".\"tableName\"`, while the schema will be prepended to the table name for mysql and\r\n   * sqlite - `'schema.tablename'`.\r\n   *\r\n   * @param schema The name of the schema\r\n   * @param options\r\n   */\r\n  public static schema<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    schema: string,\r\n    options?: SchemaOptions\r\n  ): ModelCtor<M>;\r\n\r\n  /**\r\n   * Get the tablename of the model, taking schema into account. The method will return The name as a string\r\n   * if the model has no schema, or an object with `tableName`, `schema` and `delimiter` properties.\r\n   *\r\n   * @param options The hash of options from any query. You can use one model to access tables with matching\r\n   *     schemas by overriding `getTableName` and using custom key/values to alter the name of the table.\r\n   *     (eg.\r\n   *     subscribers_1, subscribers_2)\r\n   */\r\n  public static getTableName(): string | {\r\n    tableName: string;\r\n    schema: string;\r\n    delimiter: string;\r\n  };\r\n\r\n  /**\r\n   * Apply a scope created in `define` to the model. First let's look at how to create scopes:\r\n   * ```js\r\n   * class MyModel extends Model {}\r\n   * MyModel.init(attributes, {\r\n   *   defaultScope: {\r\n   *     where: {\r\n   *       username: 'dan'\r\n   *     },\r\n   *     limit: 12\r\n   *   },\r\n   *   scopes: {\r\n   *     isALie: {\r\n   *       where: {\r\n   *         stuff: 'cake'\r\n   *       }\r\n   *     },\r\n   *     complexFunction(email, accessLevel) {\r\n   *       return {\r\n   *         where: {\r\n   *           email: {\r\n   *             [Op.like]: email\r\n   *           },\r\n   *           accesss_level {\r\n   *             [Op.gte]: accessLevel\r\n   *           }\r\n   *         }\r\n   *       }\r\n   *     }\r\n   *   },\r\n   *   sequelize,\r\n   * })\r\n   * ```\r\n   * Now, since you defined a default scope, every time you do Model.find, the default scope is appended to\r\n   * your query. Here's a couple of examples:\r\n   * ```js\r\n   * Model.findAll() // WHERE username = 'dan'\r\n   * Model.findAll({ where: { age: { gt: 12 } } }) // WHERE age > 12 AND username = 'dan'\r\n   * ```\r\n   *\r\n   * To invoke scope functions you can do:\r\n   * ```js\r\n   * Model.scope({ method: ['complexFunction' 'dan@sequelize.com', 42]}).findAll()\r\n   * // WHERE email like 'dan@sequelize.com%' AND access_level >= 42\r\n   * ```\r\n   *\r\n   * @returns Model A reference to the model, with the scope(s) applied. Calling scope again on the returned\r\n   *  model will clear the previous scope.\r\n   */\r\n  public static scope<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: string | ScopeOptions | readonly (string | ScopeOptions)[] | WhereAttributeHash<M>\r\n  ): ModelCtor<M>;\r\n\r\n  /**\r\n   * Add a new scope to the model\r\n   *\r\n   * This is especially useful for adding scopes with includes, when the model you want to\r\n   * include is not available at the time this model is defined. By default this will throw an\r\n   * error if a scope with that name already exists. Pass `override: true` in the options\r\n   * object to silence this error.\r\n   */\r\n  public static addScope<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    scope: FindOptions<Attributes<M>>,\r\n    options?: AddScopeOptions\r\n  ): void;\r\n  public static addScope<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    scope: (...args: readonly any[]) => FindOptions<Attributes<M>>,\r\n    options?: AddScopeOptions\r\n  ): void;\r\n\r\n  /**\r\n   * Search for multiple instances.\r\n   *\r\n   * __Simple search using AND and =__\r\n   * ```js\r\n   * Model.findAll({\r\n   *   where: {\r\n   *     attr1: 42,\r\n   *     attr2: 'cake'\r\n   *   }\r\n   * })\r\n   * ```\r\n   * ```sql\r\n   * WHERE attr1 = 42 AND attr2 = 'cake'\r\n   * ```\r\n   *\r\n   * __Using greater than, less than etc.__\r\n   * ```js\r\n   *\r\n   * Model.findAll({\r\n   *   where: {\r\n   *     attr1: {\r\n   *       gt: 50\r\n   *     },\r\n   *     attr2: {\r\n   *       lte: 45\r\n   *     },\r\n   *     attr3: {\r\n   *       in: [1,2,3]\r\n   *     },\r\n   *     attr4: {\r\n   *       ne: 5\r\n   *     }\r\n   *   }\r\n   * })\r\n   * ```\r\n   * ```sql\r\n   * WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5\r\n   * ```\r\n   * Possible options are: `[Op.ne], [Op.in], [Op.not], [Op.notIn], [Op.gte], [Op.gt], [Op.lte], [Op.lt], [Op.like], [Op.ilike]/[Op.iLike], [Op.notLike],\r\n   * [Op.notILike], '..'/[Op.between], '!..'/[Op.notBetween], '&&'/[Op.overlap], '@>'/[Op.contains], '<@'/[Op.contained]`\r\n   *\r\n   * __Queries using OR__\r\n   * ```js\r\n   * Model.findAll({\r\n   *   where: Sequelize.and(\r\n   *     { name: 'a project' },\r\n   *     Sequelize.or(\r\n   *       { id: [1,2,3] },\r\n   *       { id: { gt: 10 } }\r\n   *     )\r\n   *   )\r\n   * })\r\n   * ```\r\n   * ```sql\r\n   * WHERE name = 'a project' AND (id` IN (1,2,3) OR id > 10)\r\n   * ```\r\n   *\r\n   * The success listener is called with an array of instances if the query succeeds.\r\n   *\r\n   * @see {Sequelize#query}\r\n   */\r\n  public static findAll<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: FindOptions<Attributes<M>>): Promise<M[]>;\r\n\r\n  /**\r\n   * Search for a single instance by its primary key. This applies LIMIT 1, so the listener will\r\n   * always be called with a single instance.\r\n   */\r\n  public static findByPk<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    identifier: Identifier,\r\n    options: Omit<NonNullFindOptions<Attributes<M>>, 'where'>\r\n  ): Promise<M>;\r\n  public static findByPk<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    identifier?: Identifier,\r\n    options?: Omit<FindOptions<Attributes<M>>, 'where'>\r\n  ): Promise<M | null>;\r\n\r\n  /**\r\n   * Search for a single instance. Returns the first instance found, or null if none can be found.\r\n   */\r\n  public static findOne<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options: NonNullFindOptions<Attributes<M>>\r\n  ): Promise<M>;\r\n  public static findOne<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: FindOptions<Attributes<M>>\r\n  ): Promise<M | null>;\r\n\r\n  /**\r\n   * Run an aggregation method on the specified field\r\n   *\r\n   * @param field The field to aggregate over. Can be a field name or *\r\n   * @param aggregateFunction The function to use for aggregation, e.g. sum, max etc.\r\n   * @param options Query options. See sequelize.query for full options\r\n   * @returns Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in\r\n   *     which case the complete data result is returned.\r\n   */\r\n  public static aggregate<T, M extends Model>(\r\n    this: ModelStatic<M>,\r\n    field: keyof Attributes<M> | '*',\r\n    aggregateFunction: string,\r\n    options?: AggregateOptions<T, Attributes<M>>\r\n  ): Promise<T>;\r\n\r\n  /**\r\n   * Count number of records if group by is used\r\n   *\r\n   * @returns Returns count for each group and the projected attributes.\r\n   */\r\n  public static count<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options: CountWithOptions<Attributes<M>>\r\n  ): Promise<GroupedCountResultItem[]>;\r\n\r\n  /**\r\n   * Count the number of records matching the provided where clause.\r\n   *\r\n   * If you provide an `include` option, the number of matching associations will be counted instead.\r\n   *\r\n   * @returns Returns count for each group and the projected attributes.\r\n   */\r\n  public static count<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: Omit<CountOptions<Attributes<M>>, 'group'>\r\n  ): Promise<number>;\r\n\r\n  /**\r\n   * Find all the rows matching your query, within a specified offset / limit, and get the total number of\r\n   * rows matching your query. This is very useful for paging\r\n   *\r\n   * ```js\r\n   * Model.findAndCountAll({\r\n   *   where: ...,\r\n   *   limit: 12,\r\n   *   offset: 12\r\n   * }).then(result => {\r\n   *   ...\r\n   * })\r\n   * ```\r\n   * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return\r\n   * the\r\n   * total number of rows that matched your query.\r\n   *\r\n   * When you add includes, only those which are required (either because they have a where clause, or\r\n   * because\r\n   * `required` is explicitly set to true on the include) will be added to the count part.\r\n   *\r\n   * Suppose you want to find all users who have a profile attached:\r\n   * ```js\r\n   * User.findAndCountAll({\r\n   *   include: [\r\n   *      { model: Profile, required: true}\r\n   *   ],\r\n   *   limit: 3\r\n   * });\r\n   * ```\r\n   * Because the include for `Profile` has `required` set it will result in an inner join, and only the users\r\n   * who have a profile will be counted. If we remove `required` from the include, both users with and\r\n   * without\r\n   * profiles will be counted\r\n   *\r\n   * This function also support grouping, when `group` is provided, the count will be an array of objects\r\n   * containing the count for each group and the projected attributes.\r\n   * ```js\r\n   * User.findAndCountAll({\r\n   *   group: 'type'\r\n   * });\r\n   * ```\r\n   */\r\n  public static findAndCountAll<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: Omit<FindAndCountOptions<Attributes<M>>, 'group'>\r\n  ): Promise<{ rows: M[]; count: number }>;\r\n  public static findAndCountAll<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options: SetRequired<FindAndCountOptions<Attributes<M>>, 'group'>\r\n  ): Promise<{ rows: M[]; count: GroupedCountResultItem[] }>;\r\n\r\n  /**\r\n   * Find the maximum value of field\r\n   */\r\n  public static max<T extends DataType | unknown, M extends Model>(\r\n    this: ModelStatic<M>,\r\n    field: keyof Attributes<M>,\r\n    options?: AggregateOptions<T, Attributes<M>>\r\n  ): Promise<T>;\r\n\r\n  /**\r\n   * Find the minimum value of field\r\n   */\r\n  public static min<T extends DataType | unknown, M extends Model>(\r\n    this: ModelStatic<M>,\r\n    field: keyof Attributes<M>,\r\n    options?: AggregateOptions<T, Attributes<M>>\r\n  ): Promise<T>;\r\n\r\n  /**\r\n   * Find the sum of field\r\n   */\r\n  public static sum<T extends DataType | unknown, M extends Model>(\r\n    this: ModelStatic<M>,\r\n    field: keyof Attributes<M>,\r\n    options?: AggregateOptions<T, Attributes<M>>\r\n  ): Promise<number>;\r\n\r\n  /**\r\n   * Builds a new model instance. Values is an object of key value pairs, must be defined but can be empty.\r\n   */\r\n  public static build<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    record?: CreationAttributes<M>,\r\n    options?: BuildOptions\r\n  ): M;\r\n\r\n  /**\r\n   * Undocumented bulkBuild\r\n   */\r\n  public static bulkBuild<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    records: ReadonlyArray<CreationAttributes<M>>,\r\n    options?: BuildOptions\r\n  ): M[];\r\n\r\n  /**\r\n   * Builds a new model instance and calls save on it.\r\n   */\r\n  public static create<\r\n    M extends Model,\r\n    O extends CreateOptions<Attributes<M>> = CreateOptions<Attributes<M>>\r\n  >(\r\n    this: ModelStatic<M>,\r\n    values?: CreationAttributes<M>,\r\n    options?: O\r\n  ): Promise<O extends { returning: false } | { ignoreDuplicates: true } ? void : M>;\r\n\r\n  /**\r\n   * Find a row that matches the query, or build (but don't save) the row if none is found.\r\n   * The successful result of the promise will be (instance, initialized) - Make sure to use `.then(([...]))`\r\n   */\r\n  public static findOrBuild<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options: FindOrBuildOptions<\r\n      Attributes<M>,\r\n      CreationAttributes<M>\r\n    >\r\n  ): Promise<[M, boolean]>;\r\n\r\n  /**\r\n   * Find a row that matches the query, or build and save the row if none is found\r\n   * The successful result of the promise will be (instance, created) - Make sure to use `.then(([...]))`\r\n   *\r\n   * If no transaction is passed in the `options` object, a new transaction will be created internally, to\r\n   * prevent the race condition where a matching row is created by another connection after the find but\r\n   * before the insert call. However, it is not always possible to handle this case in SQLite, specifically\r\n   * if one transaction inserts and another tries to select before the first one has comitted. In this case,\r\n   * an instance of sequelize.TimeoutError will be thrown instead. If a transaction is created, a savepoint\r\n   * will be created instead, and any unique constraint violation will be handled internally.\r\n   */\r\n  public static findOrCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options: FindOrCreateOptions<Attributes<M>, CreationAttributes<M>>\r\n  ): Promise<[M, boolean]>;\r\n\r\n  /**\r\n   * A more performant findOrCreate that will not work under a transaction (at least not in postgres)\r\n   * Will execute a find call, if empty then attempt to create, if unique constraint then attempt to find again\r\n   */\r\n  public static findCreateFind<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options: FindOrCreateOptions<Attributes<M>, CreationAttributes<M>>\r\n  ): Promise<[M, boolean]>;\r\n\r\n  /**\r\n   * Insert or update a single row. An update will be executed if a row which matches the supplied values on\r\n   * either the primary key or a unique key is found. Note that the unique index must be defined in your\r\n   * sequelize model and not just in the table. Otherwise you may experience a unique constraint violation,\r\n   * because sequelize fails to identify the row that should be updated.\r\n   *\r\n   * **Implementation details:**\r\n   *\r\n   * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`\r\n   * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN\r\n   *   unique_constraint UPDATE\r\n   * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed\r\n   * regardless\r\n   *   of whether the row already existed or not\r\n   *\r\n   * **Note** that SQLite returns null for created, no matter if the row was created or updated. This is\r\n   * because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know\r\n   * whether the row was inserted or not.\r\n   */\r\n  public static upsert<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    values: CreationAttributes<M>,\r\n    options?: UpsertOptions<Attributes<M>>\r\n  ): Promise<[M, boolean | null]>;\r\n\r\n  /**\r\n   * Create and insert multiple instances in bulk.\r\n   *\r\n   * The success handler is passed an array of instances, but please notice that these may not completely\r\n   * represent the state of the rows in the DB. This is because MySQL and SQLite do not make it easy to\r\n   * obtain\r\n   * back automatically generated IDs and other default values in a way that can be mapped to multiple\r\n   * records. To obtain Instances for the newly created values, you will need to query for them again.\r\n   *\r\n   * @param records List of objects (key/value pairs) to create instances from\r\n   */\r\n  public static bulkCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    records: ReadonlyArray<CreationAttributes<M>>,\r\n    options?: BulkCreateOptions<Attributes<M>>\r\n  ): Promise<M[]>;\r\n\r\n  /**\r\n   * Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).\r\n   */\r\n  public static truncate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: TruncateOptions<Attributes<M>>\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Delete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.\r\n   *\r\n   * @returns Promise<number> The number of destroyed rows\r\n   */\r\n  public static destroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: DestroyOptions<Attributes<M>>\r\n  ): Promise<number>;\r\n\r\n  /**\r\n   * Restore multiple instances if `paranoid` is enabled.\r\n   */\r\n  public static restore<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    options?: RestoreOptions<Attributes<M>>\r\n  ): Promise<void>;\r\n\r\n  /**\r\n   * Update multiple instances that match the where options. The promise returns an array with one or two\r\n   * elements. The first element is always the number of affected rows, while the second element is the actual\r\n   * affected rows (only supported in postgres and mssql with `options.returning` true.)\r\n   */\r\n  public static update<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    values: {\r\n        [key in keyof Attributes<M>]?: Attributes<M>[key] | Fn | Col | Literal;\r\n    },\r\n    options: Omit<UpdateOptions<Attributes<M>>, 'returning'>\r\n      & { returning: Exclude<UpdateOptions<Attributes<M>>['returning'], undefined | false> }\r\n  ): Promise<[affectedCount: number, affectedRows: M[]]>;\r\n\r\n  /**\r\n   * Update multiple instances that match the where options. The promise returns an array with one or two\r\n   * elements. The first element is always the number of affected rows, while the second element is the actual\r\n   * affected rows (only supported in postgres and mssql with `options.returning` true.)\r\n   */\r\n   public static update<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    values: {\r\n        [key in keyof Attributes<M>]?: Attributes<M>[key] | Fn | Col | Literal;\r\n    },\r\n    options: UpdateOptions<Attributes<M>>\r\n  ): Promise<[affectedCount: number]>;\r\n\r\n  /**\r\n   * Increments the value of one or more attributes.\r\n   *\r\n   * The increment is done using a `SET column = column + X WHERE foo = 'bar'` query.\r\n   *\r\n   * @example <caption>increment number by 1</caption>\r\n   * ```javascript\r\n   * Model.increment('number', { where: { foo: 'bar' });\r\n   * ```\r\n   *\r\n   * @example <caption>increment number and count by 2</caption>\r\n   * ```javascript\r\n   * Model.increment(['number', 'count'], { by: 2, where: { foo: 'bar' } });\r\n   * ```\r\n   *\r\n   * @example <caption>increment answer by 42, and decrement tries by 1</caption>\r\n   * ```javascript\r\n   * // `by` cannot be used, as each attribute specifies its own value\r\n   * Model.increment({ answer: 42, tries: -1}, { where: { foo: 'bar' } });\r\n   * ```\r\n   *\r\n   * @param fields If a string is provided, that column is incremented by the\r\n   *   value of `by` given in options. If an array is provided, the same is true for each column.\r\n   *   If an object is provided, each key is incremented by the corresponding value, `by` is ignored.\r\n   *\r\n   * @returns an array of affected rows or with affected count if `options.returning` is true, whenever supported by dialect\r\n   */\r\n  static increment<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fields: AllowReadonlyArray<keyof Attributes<M>>,\r\n    options: IncrementDecrementOptionsWithBy<Attributes<M>>\r\n  ): Promise<[affectedRows: M[], affectedCount?: number]>;\r\n  static increment<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fields: { [key in keyof Attributes<M>]?: number },\r\n    options: IncrementDecrementOptions<Attributes<M>>\r\n  ): Promise<[affectedRows: M[], affectedCount?: number]>;\r\n\r\n  /**\r\n   * Decrements the value of one or more attributes.\r\n   *\r\n   * Works like {@link Model.increment}\r\n   *\r\n   * @param fields If a string is provided, that column is incremented by the\r\n   *   value of `by` given in options. If an array is provided, the same is true for each column.\r\n   *   If an object is provided, each key is incremented by the corresponding value, `by` is ignored.\r\n   *\r\n   * @returns an array of affected rows or with affected count if `options.returning` is true, whenever supported by dialect\r\n   *\r\n   * @since 4.36.0\r\n   */\r\n  static decrement<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fields: AllowReadonlyArray<keyof Attributes<M>>,\r\n    options: IncrementDecrementOptionsWithBy<Attributes<M>>\r\n  ): Promise<[affectedRows: M[], affectedCount?: number]>;\r\n  static decrement<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fields: { [key in keyof Attributes<M>]?: number },\r\n    options: IncrementDecrementOptions<Attributes<M>>\r\n  ): Promise<[affectedRows: M[], affectedCount?: number]>;\r\n\r\n  /**\r\n   * Run a describe query on the table. The result will be return to the listener as a hash of attributes and\r\n   * their types.\r\n   */\r\n  public static describe(): Promise<object>;\r\n\r\n  /**\r\n   * Unscope the model\r\n   */\r\n  public static unscoped<M extends ModelType>(this: M): M;\r\n\r\n  /**\r\n   * A hook that is run before validation\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static beforeValidate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: ValidationOptions) => HookReturn\r\n  ): void;\r\n  public static beforeValidate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: ValidationOptions) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after validation\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static afterValidate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: ValidationOptions) => HookReturn\r\n  ): void;\r\n  public static afterValidate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: ValidationOptions) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before creating a single instance\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with attributes, options\r\n   */\r\n  public static beforeCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: CreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: CreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after creating a single instance\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with attributes, options\r\n   */\r\n  public static afterCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: CreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: CreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before destroying a single instance\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static beforeDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: InstanceDestroyOptions) => HookReturn\r\n  ): void;\r\n  public static beforeDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: InstanceDestroyOptions) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after destroying a single instance\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static afterDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: InstanceDestroyOptions) => HookReturn\r\n  ): void;\r\n  public static afterDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: InstanceDestroyOptions) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before updating a single instance\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static beforeUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after updating a single instance\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static afterUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static beforeSave<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>> | SaveOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeSave<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>> | SaveOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instance, options\r\n   */\r\n  public static afterSave<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>> | SaveOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterSave<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instance: M, options: UpdateOptions<Attributes<M>> | SaveOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before creating instances in bulk\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instances, options\r\n   */\r\n  public static beforeBulkCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instances: M[], options: BulkCreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeBulkCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instances: M[], options: BulkCreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after creating instances in bulk\r\n   *\r\n   * @param name\r\n   * @param fn A callback function that is called with instances, options\r\n   */\r\n  public static afterBulkCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instances: readonly M[], options: BulkCreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterBulkCreate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instances: readonly M[], options: BulkCreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before destroying instances in bulk\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static beforeBulkDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: BulkCreateOptions<Attributes<M>>) => HookReturn): void;\r\n  public static beforeBulkDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: BulkCreateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after destroying instances in bulk\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static afterBulkDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: DestroyOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterBulkDestroy<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: DestroyOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after updating instances in bulk\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static beforeBulkUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeBulkUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run after updating instances in bulk\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static afterBulkUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterBulkUpdate<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: UpdateOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before a find (select) query\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static beforeFind<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeFind<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before a count query\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static beforeCount<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: CountOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeCount<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: CountOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static beforeFindAfterExpandIncludeAll<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeFindAfterExpandIncludeAll<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before a find (select) query, after all option parsing is complete\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with options\r\n   */\r\n  public static beforeFindAfterOptions<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string, fn: (options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static beforeFindAfterOptions<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (options: FindOptions<Attributes<M>>) => void\r\n  ): HookReturn;\r\n\r\n  /**\r\n   * A hook that is run after a find (select) query\r\n   *\r\n   * @param name\r\n   * @param fn   A callback function that is called with instance(s), options\r\n   */\r\n  public static afterFind<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    name: string,\r\n    fn: (instancesOrInstance: readonly M[] | M | null, options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n  public static afterFind<M extends Model>(\r\n    this: ModelStatic<M>,\r\n    fn: (instancesOrInstance: readonly M[] | M | null, options: FindOptions<Attributes<M>>) => HookReturn\r\n  ): void;\r\n\r\n  /**\r\n   * A hook that is run before sequelize.sync call\r\n   *\r\n   * @param fn   A callback function that is called with options passed to sequelize.sync\r\n   */\r\n  public static beforeBulkSync(name: string, fn: (options: SyncOptions) => HookReturn): void;\r\n  public static beforeBulkSync(fn: (options: SyncOptions) => HookReturn): void;\r\n\r\n  /**\r\n   * A hook that is run after sequelize.sync call\r\n   *\r\n   * @param fn   A callback function that is called with options passed to sequelize.sync\r\n   */\r\n  public static afterBulkSync(name: string, fn: (options: SyncOptions) => HookReturn): void;\r\n  public static afterBulkSync(fn: (options: SyncOptions) => HookReturn): void;\r\n\r\n  /**\r\n   * A hook that is run before Model.sync call\r\n   *\r\n   * @param fn   A callback function that is called with options passed to Model.sync\r\n   */\r\n  public static beforeSync(name: string, fn: (options: SyncOptions) => HookReturn): void;\r\n  public static beforeSync(fn: (options: SyncOptions) => HookReturn): void;\r\n\r\n  /**\r\n   * A hook that is run after Model.sync call\r\n   *\r\n   * @param fn   A callback function that is called with options passed to Model.sync\r\n   */\r\n  public static afterSync(name: string, fn: (options: SyncOptions) => HookReturn): void;\r\n  public static afterSync(fn: (options: SyncOptions) => HookReturn): void;\r\n\r\n  /**\r\n   * Creates an association between this (the source) and the provided target. The foreign key is added\r\n   * on the target.\r\n   *\r\n   * Example: `User.hasOne(Profile)`. This will add userId to the profile table.\r\n   *\r\n   * @param target The model that will be associated with hasOne relationship\r\n   * @param options Options for the association\r\n   */\r\n  public static hasOne<M extends Model, T extends Model>(\r\n    this: ModelStatic<M>, target: ModelStatic<T>, options?: HasOneOptions\r\n  ): HasOne<M, T>;\r\n\r\n  /**\r\n   * Creates an association between this (the source) and the provided target. The foreign key is added on the\r\n   * source.\r\n   *\r\n   * Example: `Profile.belongsTo(User)`. This will add userId to the profile table.\r\n   *\r\n   * @param target The model that will be associated with hasOne relationship\r\n   * @param options Options for the association\r\n   */\r\n  public static belongsTo<M extends Model, T extends Model>(\r\n    this: ModelStatic<M>, target: ModelStatic<T>, options?: BelongsToOptions\r\n  ): BelongsTo<M, T>;\r\n\r\n  /**\r\n   * Create an association that is either 1:m or n:m.\r\n   *\r\n   * ```js\r\n   * // Create a 1:m association between user and project\r\n   * User.hasMany(Project)\r\n   * ```\r\n   * ```js\r\n   * // Create a n:m association between user and project\r\n   * User.hasMany(Project)\r\n   * Project.hasMany(User)\r\n   * ```\r\n   * By default, the name of the join table will be source+target, so in this case projectsusers. This can be\r\n   * overridden by providing either a string or a Model as `through` in the options. If you use a through\r\n   * model with custom attributes, these attributes can be set when adding / setting new associations in two\r\n   * ways. Consider users and projects from before with a join table that stores whether the project has been\r\n   * started yet:\r\n   * ```js\r\n   * class UserProjects extends Model {}\r\n   * UserProjects.init({\r\n   *   started: Sequelize.BOOLEAN\r\n   * }, { sequelize })\r\n   * User.hasMany(Project, { through: UserProjects })\r\n   * Project.hasMany(User, { through: UserProjects })\r\n   * ```\r\n   * ```js\r\n   * jan.addProject(homework, { started: false }) // The homework project is not started yet\r\n   * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner have been\r\n   * started\r\n   * ```\r\n   *\r\n   * If you want to set several target instances, but with different attributes you have to set the\r\n   * attributes on the instance, using a property with the name of the through model:\r\n   *\r\n   * ```js\r\n   * p1.userprojects {\r\n   *   started: true\r\n   * }\r\n   * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.\r\n   * ```\r\n   *\r\n   * Similarily, when fetching through a join table with custom attributes, these attributes will be\r\n   * available as an object with the name of the through model.\r\n   * ```js\r\n   * user.getProjects().then(projects => {\r\n   *   const p1 = projects[0]\r\n   *   p1.userprojects.started // Is this project started yet?\r\n   * })\r\n   * ```\r\n   *\r\n   * @param target The model that will be associated with hasOne relationship\r\n   * @param options Options for the association\r\n   */\r\n  public static hasMany<M extends Model, T extends Model>(\r\n    this: ModelStatic<M>, target: ModelStatic<T>, options?: HasManyOptions\r\n  ): HasMany<M, T>;\r\n\r\n  /**\r\n   * Create an N:M association with a join table\r\n   *\r\n   * ```js\r\n   * User.belongsToMany(Project)\r\n   * Project.belongsToMany(User)\r\n   * ```\r\n   * By default, the name of the join table will be source+target, so in this case projectsusers. This can be\r\n   * overridden by providing either a string or a Model as `through` in the options.\r\n   *\r\n   * If you use a through model with custom attributes, these attributes can be set when adding / setting new\r\n   * associations in two ways. Consider users and projects from before with a join table that stores whether\r\n   * the project has been started yet:\r\n   * ```js\r\n   * class UserProjects extends Model {}\r\n   * UserProjects.init({\r\n   *   started: Sequelize.BOOLEAN\r\n   * }, { sequelize });\r\n   * User.belongsToMany(Project, { through: UserProjects })\r\n   * Project.belongsToMany(User, { through: UserProjects })\r\n   * ```\r\n   * ```js\r\n   * jan.addProject(homework, { started: false }) // The homework project is not started yet\r\n   * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner has been started\r\n   * ```\r\n   *\r\n   * If you want to set several target instances, but with different attributes you have to set the\r\n   * attributes on the instance, using a property with the name of the through model:\r\n   *\r\n   * ```js\r\n   * p1.userprojects {\r\n   *   started: true\r\n   * }\r\n   * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.\r\n   * ```\r\n   *\r\n   * Similarily, when fetching through a join table with custom attributes, these attributes will be\r\n   * available as an object with the name of the through model.\r\n   * ```js\r\n   * user.getProjects().then(projects => {\r\n   *   const p1 = projects[0]\r\n   *   p1.userprojects.started // Is this project started yet?\r\n   * })\r\n   * ```\r\n   *\r\n   * @param target The model that will be associated with hasOne relationship\r\n   * @param options Options for the association\r\n   *\r\n   */\r\n  public static belongsToMany<M extends Model, T extends Model>(\r\n    this: ModelStatic<M>, target: ModelStatic<T>, options: BelongsToManyOptions\r\n  ): BelongsToMany<M, T>;\r\n\r\n  /**\r\n   * Returns true if this instance has not yet been persisted to the database\r\n   */\r\n  public isNewRecord: boolean;\r\n\r\n  /**\r\n   * A reference to the sequelize instance\r\n   */\r\n  public sequelize: Sequelize;\r\n\r\n  /**\r\n   * Builds a new model instance.\r\n   *\r\n   * @param values an object of key value pairs\r\n   */\r\n  constructor(values?: MakeNullishOptional<TCreationAttributes>, options?: BuildOptions);\r\n\r\n  /**\r\n   * Get an object representing the query for this instance, use with `options.where`\r\n   */\r\n  public where(): object;\r\n\r\n  /**\r\n   * Get the value of the underlying data value\r\n   */\r\n  public getDataValue<K extends keyof TModelAttributes>(key: K): TModelAttributes[K];\r\n\r\n  /**\r\n   * Update the underlying data value\r\n   */\r\n  public setDataValue<K extends keyof TModelAttributes>(key: K, value: TModelAttributes[K]): void;\r\n\r\n  /**\r\n   * If no key is given, returns all values of the instance, also invoking virtual getters.\r\n   *\r\n   * If key is given and a field or virtual getter is present for the key it will call that getter - else it\r\n   * will return the value for key.\r\n   *\r\n   * @param options.plain If set to true, included instances will be returned as plain objects\r\n   */\r\n  public get(options?: { plain?: boolean; clone?: boolean }): TModelAttributes;\r\n  public get<K extends keyof this>(key: K, options?: { plain?: boolean; clone?: boolean }): this[K];\r\n  public get(key: string, options?: { plain?: boolean; clone?: boolean }): unknown;\r\n\r\n  /**\r\n   * Set is used to update values on the instance (the sequelize representation of the instance that is,\r\n   * remember that nothing will be persisted before you actually call `save`). In its most basic form `set`\r\n   * will update a value stored in the underlying `dataValues` object. However, if a custom setter function\r\n   * is defined for the key, that function will be called instead. To bypass the setter, you can pass `raw:\r\n   * true` in the options object.\r\n   *\r\n   * If set is called with an object, it will loop over the object, and call set recursively for each key,\r\n   * value pair. If you set raw to true, the underlying dataValues will either be set directly to the object\r\n   * passed, or used to extend dataValues, if dataValues already contain values.\r\n   *\r\n   * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).\r\n   *\r\n   * Set can also be used to build instances for associations, if you have values for those.\r\n   * When using set with associations you need to make sure the property key matches the alias of the\r\n   * association while also making sure that the proper include options have been set (from .build() or\r\n   * .findOne())\r\n   *\r\n   * If called with a dot.seperated key on a JSON/JSONB attribute it will set the value nested and flag the\r\n   * entire object as changed.\r\n   *\r\n   * @param options.raw If set to true, field and virtual setters will be ignored\r\n   * @param options.reset Clear all previously set data values\r\n   */\r\n  public set<K extends keyof TModelAttributes>(key: K, value: TModelAttributes[K], options?: SetOptions): this;\r\n  public set(keys: Partial<TModelAttributes>, options?: SetOptions): this;\r\n  public setAttributes<K extends keyof TModelAttributes>(key: K, value: TModelAttributes[K], options?: SetOptions): this;\r\n  public setAttributes(keys: Partial<TModelAttributes>, options?: SetOptions): this;\r\n\r\n  /**\r\n   * If changed is called with a string it will return a boolean indicating whether the value of that key in\r\n   * `dataValues` is different from the value in `_previousDataValues`.\r\n   *\r\n   * If changed is called without an argument, it will return an array of keys that have changed.\r\n   *\r\n   * If changed is called with two arguments, it will set the property to `dirty`.\r\n   *\r\n   * If changed is called without an argument and no keys have changed, it will return `false`.\r\n   */\r\n  public changed<K extends keyof this>(key: K): boolean;\r\n  public changed<K extends keyof this>(key: K, dirty: boolean): void;\r\n  public changed(): false | string[];\r\n\r\n  /**\r\n   * Returns the previous value for key from `_previousDataValues`.\r\n   */\r\n  public previous(): Partial<TModelAttributes>;\r\n  public previous<K extends keyof TModelAttributes>(key: K): TModelAttributes[K] | undefined;\r\n\r\n  /**\r\n   * Validates this instance, and if the validation passes, persists it to the database.\r\n   *\r\n   * Returns a Promise that resolves to the saved instance (or rejects with a `Sequelize.ValidationError`, which will have a property for each of the fields for which the validation failed, with the error message for that field).\r\n   *\r\n   * This method is optimized to perform an UPDATE only into the fields that changed. If nothing has changed, no SQL query will be performed.\r\n   *\r\n   * This method is not aware of eager loaded associations. In other words, if some other model instance (child) was eager loaded with this instance (parent), and you change something in the child, calling `save()` will simply ignore the change that happened on the child.\r\n   */\r\n  public save(options?: SaveOptions<TModelAttributes>): Promise<this>;\r\n\r\n  /**\r\n   * Refresh the current instance in-place, i.e. update the object with current data from the DB and return\r\n   * the same object. This is different from doing a `find(Instance.id)`, because that would create and\r\n   * return a new instance. With this method, all references to the Instance are updated with the new data\r\n   * and no new objects are created.\r\n   */\r\n  public reload(options?: FindOptions<TModelAttributes>): Promise<this>;\r\n\r\n  /**\r\n   * Validate the attribute of this instance according to validation rules set in the model definition.\r\n   *\r\n   * Emits null if and only if validation successful; otherwise an Error instance containing\r\n   * { field name : [error msgs] } entries.\r\n   *\r\n   * @param options.skip An array of strings. All properties that are in this array will not be validated\r\n   */\r\n  public validate(options?: ValidationOptions): Promise<void>;\r\n\r\n  /**\r\n   * This is the same as calling `set` and then calling `save`.\r\n   */\r\n  public update<K extends keyof TModelAttributes>(key: K, value: TModelAttributes[K] | Col | Fn | Literal, options?: InstanceUpdateOptions<TModelAttributes>): Promise<this>;\r\n  public update(\r\n    keys: {\r\n        [key in keyof TModelAttributes]?: TModelAttributes[key] | Fn | Col | Literal;\r\n    },\r\n    options?: InstanceUpdateOptions<TModelAttributes>\r\n  ): Promise<this>;\r\n\r\n  /**\r\n   * Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will\r\n   * either be completely deleted, or have its deletedAt timestamp set to the current time.\r\n   */\r\n  public destroy(options?: InstanceDestroyOptions): Promise<void>;\r\n\r\n  /**\r\n   * Restore the row corresponding to this instance. Only available for paranoid models.\r\n   */\r\n  public restore(options?: InstanceRestoreOptions): Promise<void>;\r\n\r\n  /**\r\n   * Increment the value of one or more columns. This is done in the database, which means it does not use\r\n   * the values currently stored on the Instance. The increment is done using a\r\n   * ```sql\r\n   * SET column = column + X\r\n   * ```\r\n   * query. To get the correct value after an increment into the Instance you should do a reload.\r\n   *\r\n   * ```js\r\n   * instance.increment('number') // increment number by 1\r\n   * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2\r\n   * instance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.\r\n   *                                                        // `by` is ignored, since each column has its own\r\n   *                                                        // value\r\n   * ```\r\n   *\r\n   * @param fields If a string is provided, that column is incremented by the value of `by` given in options.\r\n   *               If an array is provided, the same is true for each column.\r\n   *               If and object is provided, each column is incremented by the value given.\r\n   */\r\n  public increment<K extends keyof TModelAttributes>(\r\n    fields: K | readonly K[] | Partial<TModelAttributes>,\r\n    options?: IncrementDecrementOptionsWithBy<TModelAttributes>\r\n  ): Promise<this>;\r\n\r\n  /**\r\n   * Decrement the value of one or more columns. This is done in the database, which means it does not use\r\n   * the values currently stored on the Instance. The decrement is done using a\r\n   * ```sql\r\n   * SET column = column - X\r\n   * ```\r\n   * query. To get the correct value after an decrement into the Instance you should do a reload.\r\n   *\r\n   * ```js\r\n   * instance.decrement('number') // decrement number by 1\r\n   * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2\r\n   * instance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.\r\n   *                                                        // `by` is ignored, since each column has its own\r\n   *                                                        // value\r\n   * ```\r\n   *\r\n   * @param fields If a string is provided, that column is decremented by the value of `by` given in options.\r\n   *               If an array is provided, the same is true for each column.\r\n   *               If and object is provided, each column is decremented by the value given\r\n   */\r\n  public decrement<K extends keyof TModelAttributes>(\r\n    fields: K | readonly K[] | Partial<TModelAttributes>,\r\n    options?: IncrementDecrementOptionsWithBy<TModelAttributes>\r\n  ): Promise<this>;\r\n\r\n  /**\r\n   * Check whether all values of this and `other` Instance are the same\r\n   */\r\n  public equals(other: this): boolean;\r\n\r\n  /**\r\n   * Check if this is equal to one of `others` by calling equals\r\n   */\r\n  public equalsOneOf(others: readonly this[]): boolean;\r\n\r\n  /**\r\n   * Convert the instance to a JSON representation. Proxies to calling `get` with no keys. This means get all\r\n   * values gotten from the DB, and apply all custom getters.\r\n   */\r\n  public toJSON<T extends TModelAttributes>(): T;\r\n  public toJSON(): object;\r\n\r\n  /**\r\n   * Helper method to determine if a instance is \"soft deleted\". This is\r\n   * particularly useful if the implementer renamed the deletedAt attribute to\r\n   * something different. This method requires paranoid to be enabled.\r\n   *\r\n   * Throws an error if paranoid is not enabled.\r\n   */\r\n  public isSoftDeleted(): boolean;\r\n}\r\n\r\n/** @deprecated use ModelStatic */\r\nexport type ModelType<TModelAttributes extends {} = any, TCreationAttributes extends {} = TModelAttributes> = new () => Model<TModelAttributes, TCreationAttributes>;\r\n\r\ntype NonConstructorKeys<T> = ({[P in keyof T]: T[P] extends new () => any ? never : P })[keyof T];\r\ntype NonConstructor<T> = Pick<T, NonConstructorKeys<T>>;\r\n\r\n/** @deprecated use ModelStatic */\r\nexport type ModelCtor<M extends Model> = ModelStatic<M>;\r\n\r\nexport type ModelDefined<S extends {}, T extends {}> = ModelStatic<Model<S, T>>;\r\n\r\n// remove the existing constructor that tries to return `Model<{},{}>` which would be incompatible with models that have typing defined & replace with proper constructor.\r\nexport type ModelStatic<M extends Model> = NonConstructor<typeof Model> & { new(): M };\r\n\r\nexport default Model;\r\n\r\n/**\r\n * Type will be true is T is branded with Brand, false otherwise\r\n */\r\n// How this works:\r\n// - `A extends B` will be true if A has *at least* all the properties of B\r\n// - If we do `A extends Omit<A, Checked>` - the result will only be true if A did not have Checked to begin with\r\n// - So if we want to check if T is branded, we remove the brand, and check if they list of keys is still the same.\r\n// we exclude Null & Undefined so \"field: Brand<value> | null\" is still detected as branded\r\n// this is important because \"Brand<value | null>\" are transformed into \"Brand<value> | null\" to not break null & undefined\r\ntype IsBranded<T, Brand extends symbol> = keyof NonNullable<T> extends keyof Omit<NonNullable<T>, Brand>\r\n  ? false\r\n  : true;\r\n\r\ntype BrandedKeysOf<T, Brand extends symbol> = {\r\n  [P in keyof T]-?: IsBranded<T[P], Brand> extends true ? P : never\r\n}[keyof T];\r\n\r\n/**\r\n * Dummy Symbol used as branding by {@link NonAttribute}.\r\n *\r\n * Do not export, Do not use.\r\n */\r\ndeclare const NonAttributeBrand: unique symbol;\r\n\r\n/**\r\n * This is a Branded Type.\r\n * You can use it to tag fields from your class that are NOT attributes.\r\n * They will be ignored by {@link InferAttributes} and {@link InferCreationAttributes}\r\n */\r\nexport type NonAttribute<T> =\r\n  // we don't brand null & undefined as they can't have properties.\r\n  // This means `NonAttribute<null>` will not work, but who makes an attribute that only accepts null?\r\n  // Note that `NonAttribute<string | null>` does work!\r\n  T extends null | undefined ? T\r\n  : (T & { [NonAttributeBrand]?: true });\r\n\r\n/**\r\n * Dummy Symbol used as branding by {@link ForeignKey}.\r\n *\r\n * Do not export, Do not use.\r\n */\r\ndeclare const ForeignKeyBrand: unique symbol;\r\n\r\n/**\r\n * This is a Branded Type.\r\n * You can use it to tag fields from your class that are foreign keys.\r\n * They will become optional in {@link Model.init} (as foreign keys are added by association methods, like {@link Model.hasMany}.\r\n */\r\nexport type ForeignKey<T> =\r\n  // we don't brand null & undefined as they can't have properties.\r\n  // This means `ForeignKey<null>` will not work, but who makes an attribute that only accepts null?\r\n  // Note that `ForeignKey<string | null>` does work!\r\n  T extends null | undefined ? T\r\n  : (T & { [ForeignKeyBrand]?: true });\r\n\r\n/**\r\n * Option bag for {@link InferAttributes}.\r\n *\r\n * - omit: properties to not treat as Attributes.\r\n */\r\ntype InferAttributesOptions<Excluded, > = { omit?: Excluded };\r\n\r\n/**\r\n * Utility type to extract Attributes of a given Model class.\r\n *\r\n * It returns all instance properties defined in the Model, except:\r\n * - those inherited from Model (intermediate inheritance works),\r\n * - the ones whose type is a function,\r\n * - the ones manually excluded using the second parameter.\r\n * - the ones branded using {@link NonAttribute}\r\n *\r\n * It cannot detect whether something is a getter or not, you should use the `Excluded`\r\n * parameter to exclude getter & setters from the attribute list.\r\n *\r\n * @example\r\n * // listed attributes will be 'id' & 'firstName'.\r\n * class User extends Model<InferAttributes<User>> {\r\n *   id: number;\r\n *   firstName: string;\r\n * }\r\n *\r\n * @example\r\n * // listed attributes will be 'id' & 'firstName'.\r\n * // we're excluding the `name` getter & `projects` attribute using the `omit` option.\r\n * class User extends Model<InferAttributes<User, { omit: 'name' | 'projects' }>> {\r\n *   id: number;\r\n *   firstName: string;\r\n *\r\n *   // this is a getter, not an attribute. It should not be listed in attributes.\r\n *   get name(): string { return this.firstName; }\r\n *   // this is an association, it should not be listed in attributes\r\n *   projects?: Project[];\r\n * }\r\n *\r\n * @example\r\n * // listed attributes will be 'id' & 'firstName'.\r\n * // we're excluding the `name` getter & `test` attribute using the `NonAttribute` branded type.\r\n * class User extends Model<InferAttributes<User>> {\r\n *   id: number;\r\n *   firstName: string;\r\n *\r\n *   // this is a getter, not an attribute. It should not be listed in attributes.\r\n *   get name(): NonAttribute<string> { return this.firstName; }\r\n *   // this is an association, it should not be listed in attributes\r\n *   projects?: NonAttribute<Project[]>;\r\n * }\r\n */\r\nexport type InferAttributes<\r\n  M extends Model,\r\n  Options extends InferAttributesOptions<keyof M | never | ''> = { omit: never }\r\n  > = {\r\n  [Key in keyof M as InternalInferAttributeKeysFromFields<M, Key, Options>]: M[Key]\r\n};\r\n\r\n/**\r\n * Dummy Symbol used as branding by {@link CreationOptional}.\r\n *\r\n * Do not export, Do not use.\r\n */\r\ndeclare const CreationAttributeBrand: unique symbol;\r\n\r\n/**\r\n * This is a Branded Type.\r\n * You can use it to tag attributes that can be ommited during Model Creation.\r\n *\r\n * For use with {@link InferCreationAttributes}.\r\n */\r\nexport type CreationOptional<T> =\r\n  // we don't brand null & undefined as they can't have properties.\r\n  // This means `CreationOptional<null>` will not work, but who makes an attribute that only accepts null?\r\n  // Note that `CreationOptional<string | null>` does work!\r\n  T extends null | undefined ? T\r\n  : (T & { [CreationAttributeBrand]?: true });\r\n\r\n/**\r\n * Utility type to extract Creation Attributes of a given Model class.\r\n *\r\n * Works like {@link InferAttributes}, but fields that are tagged using\r\n *  {@link CreationOptional} will be optional.\r\n *\r\n * @example\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   // this attribute is optional in Model#create\r\n *   declare id: CreationOptional<number>;\r\n *\r\n *   // this attribute is mandatory in Model#create\r\n *   declare name: string;\r\n * }\r\n */\r\nexport type InferCreationAttributes<\r\n  M extends Model,\r\n  Options extends InferAttributesOptions<keyof M | never | ''> = { omit: never }\r\n  > = {\r\n  [Key in keyof M as InternalInferAttributeKeysFromFields<M, Key, Options>]: IsBranded<M[Key], typeof CreationAttributeBrand> extends true\r\n    ? (M[Key] | undefined)\r\n    : M[Key]\r\n};\r\n\r\n/**\r\n * @private\r\n *\r\n * Internal type used by {@link InferCreationAttributes} and {@link InferAttributes} to exclude\r\n * attributes that are:\r\n * - functions\r\n * - branded using {@link NonAttribute}\r\n * - inherited from {@link Model}\r\n * - Excluded manually using {@link InferAttributesOptions#omit}\r\n */\r\ntype InternalInferAttributeKeysFromFields<M extends Model, Key extends keyof M, Options extends InferAttributesOptions<keyof M | never | ''>> =\r\n  // fields inherited from Model are all excluded\r\n  Key extends keyof Model ? never\r\n  // functions are always excluded\r\n  : M[Key] extends AnyFunction ? never\r\n  // fields branded with NonAttribute are excluded\r\n  : IsBranded<M[Key], typeof NonAttributeBrand> extends true ? never\r\n  // check 'omit' option is provided & exclude those listed in it\r\n  : Options['omit'] extends string ? (Key extends Options['omit'] ? never : Key)\r\n  : Key;\r\n\r\n// in v7, we should be able to drop InferCreationAttributes and InferAttributes,\r\n//  resolving this confusion.\r\n/**\r\n * Returns the creation attributes of a given Model.\r\n *\r\n * This returns the Creation Attributes of a Model, it does not build them.\r\n * If you need to build them, use {@link InferCreationAttributes}.\r\n *\r\n * @example\r\n * function buildModel<M extends Model>(modelClass: ModelStatic<M>, attributes: CreationAttributes<M>) {}\r\n */\r\nexport type CreationAttributes<M extends Model | Hooks> = MakeNullishOptional<M['_creationAttributes']>;\r\n\r\n/**\r\n * Returns the creation attributes of a given Model.\r\n *\r\n * This returns the Attributes of a Model that have already been defined, it does not build them.\r\n * If you need to build them, use {@link InferAttributes}.\r\n *\r\n * @example\r\n * function getValue<M extends Model>(modelClass: ModelStatic<M>, attribute: keyof Attributes<M>) {}\r\n */\r\nexport type Attributes<M extends Model | Hooks> = M['_attributes'];\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/types/model.d.ts b/backend/node_modules/sequelize/types/model.d.ts
--- a/backend/node_modules/sequelize/types/model.d.ts	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/types/model.d.ts	(date 1713648521745)
@@ -1304,6 +1304,11 @@
    * @default false
    */
   omitNull?: boolean;
+
+  /**
+   * Return the affected rows (only for postgres)
+   */
+  returning?: boolean | Array<keyof TAttributes>;
 }
 
 /**
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c7bf2b6a-53dc-4235-a0b0-fdaa0f57ccdc\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/react-frontend/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/react-frontend/src/App.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/react-frontend/src/ColumnTwo.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/react-frontend/src/ColumnTwo.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/react-frontend/src/ProgressBar.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/react-frontend/src/ProgressBar.js\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\" synchronizationState=\"SYNCHRONIZE\">\r\n    <pharConfigPath>$PROJECT_DIR$/composer.json</pharConfigPath>\r\n    <execution />\r\n  </component>\r\n  <component name=\"Git.Rebase.Settings\">\r\n    <option name=\"NEW_BASE\" value=\"origin/express-version\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\">\r\n    <include_path>\r\n      <path value=\"$PROJECT_DIR$/vendor/phar-io/manifest\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/hamcrest/hamcrest-php\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phar-io/version\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/log\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/event-dispatcher\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/http-message\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/http-client\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/container\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/http-factory\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/clock\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/simple-cache\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/filp/whoops\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/vlucas/phpdotenv\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/composer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/object-reflector\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/code-unit-reverse-lookup\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/global-state\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/environment\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/recursion-context\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/myclabs/deep-copy\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/complexity\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/version\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/exporter\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/cli-parser\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/code-unit\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/comparator\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/object-enumerator\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/lines-of-code\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/diff\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/type\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/ralouphie/getallheaders\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpoption/phpoption\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/nette/utils\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/nette/schema\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/guzzlehttp/promises\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/guzzlehttp/guzzle\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/guzzlehttp/psr7\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/graham-campbell/result-type\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/flysystem\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/mime-type-detection\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/commonmark\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/config\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/webmozart/assert\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/mockery/mockery\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/fakerphp/faker\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/dragonmantank/cron-expression\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/voku/portable-ascii\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/tijsverkoyen/css-to-inline-styles\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/serializable-closure\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/tinker\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/sanctum\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/framework\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/sail\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/nesbot/carbon\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psy/psysh\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/inflector\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/lexer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpunit/php-code-coverage\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpunit/phpunit\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpunit/php-text-template\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpunit/php-invoker\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpunit/php-file-iterator\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpunit/php-timer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/monolog/monolog\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/theseer/tokenizer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/ramsey/uuid\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/ramsey/collection\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/nunomaduro/collision\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/nikic/php-parser\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/egulias/email-validator\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/process\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/translation\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/yaml\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/string\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/service-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/translation-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-kernel\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-foundation\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/var-dumper\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/console\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/dflydev/dot-access-data\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php72\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/error-handler\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-ctype\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/mime\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/brick/math\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php80\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/css-selector\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/routing\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/deprecation-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-mbstring\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/finder\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-iconv\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/fruitcake/laravel-cors\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/instantiator\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/facade/flare-client-php\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/facade/ignition\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/facade/ignition-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/swiftmailer/swiftmailer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/asm89/stack-cors\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/sebastian/resource-operations\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/opis/closure\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php73\" />\r\n    </include_path>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2WqQ1DJxgx8j4YAMTbb5bWX9Pu1\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"develop\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"js.linters.configure.manually.selectedeslint\": \"true\",\r\n    \"last_opened_file_path\": \"//wsl.localhost/Ubuntu-22.04/home/igorhaf/nexabuild/react-frontend/src/redux/reducers\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.standard\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"\\\\\\\\wsl$\\\\Ubuntu-22.04\\\\home\\\\igorhaf\\\\nexabuild\\\\react-frontend\\\\node_modules\\\\eslint\",\r\n    \"node.js.selected.package.standard\": \"\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"ssh.settings\",\r\n    \"ts.external.directory.path\": \"C:\\\\Program Files\\\\JetBrains\\\\PhpStorm 2023.3.6\\\\plugins\\\\javascript-impl\\\\jsLanguageServicesImpl\\\\external\",\r\n    \"two.files.diff.last.used.file\": \"//wsl$/Ubuntu-22.04/home/igorhaf/nexabuild/resources/js/components/treeview2\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"postgresql\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"\\\\wsl.localhost\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\react-frontend\\src\\redux\\reducers\" />\r\n      <recent name=\"\\\\wsl.localhost\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\react-frontend\\src\\redux\\actions\" />\r\n      <recent name=\"\\\\wsl.localhost\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\" />\r\n      <recent name=\"\\\\wsl.localhost\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\react-frontend\\src\\components\" />\r\n      <recent name=\"\\\\wsl$\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\react-frontend\\src\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"\\\\wsl.localhost\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\react-frontend\\src\\components\" />\r\n      <recent name=\"\\\\wsl.localhost\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\react-frontend\\src\" />\r\n      <recent name=\"\\\\wsl$\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\" />\r\n      <recent name=\"\\\\wsl$\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\frontend\\src\\services\" />\r\n      <recent name=\"\\\\wsl$\\Ubuntu-22.04\\home\\igorhaf\\nexabuild\\frontend\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"PHPUnitRunConfigurationType\" factoryName=\"PHPUnit\">\r\n      <TestRunner configuration_file=\"$PROJECT_DIR$/phpunit.xml\" scope=\"XML\" use_alternative_configuration_file=\"true\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-php-predefined-ba97393d7c68-6f8e3395a2b4-com.jetbrains.php.sharedIndexes-PS-233.15026.12\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c7bf2b6a-53dc-4235-a0b0-fdaa0f57ccdc\" name=\"Changes\" comment=\"\" />\r\n      <created>1697457412407</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1697457412407</updated>\r\n      <workItem from=\"1697457413724\" duration=\"1472000\" />\r\n      <workItem from=\"1697460578286\" duration=\"101797000\" />\r\n      <workItem from=\"1697847197248\" duration=\"55678000\" />\r\n      <workItem from=\"1698204326394\" duration=\"74000\" />\r\n      <workItem from=\"1698204424525\" duration=\"2320000\" />\r\n      <workItem from=\"1698206802365\" duration=\"10000\" />\r\n      <workItem from=\"1698360703206\" duration=\"66000\" />\r\n      <workItem from=\"1698360825006\" duration=\"12508000\" />\r\n      <workItem from=\"1698579829743\" duration=\"797000\" />\r\n      <workItem from=\"1698581030735\" duration=\"657000\" />\r\n      <workItem from=\"1698584907656\" duration=\"6880000\" />\r\n      <workItem from=\"1698667025338\" duration=\"5000\" />\r\n      <workItem from=\"1698862866495\" duration=\"3694000\" />\r\n      <workItem from=\"1702687558146\" duration=\"39998000\" />\r\n      <workItem from=\"1703300727240\" duration=\"10909000\" />\r\n      <workItem from=\"1703471540311\" duration=\"130428000\" />\r\n      <workItem from=\"1704503093434\" duration=\"37347000\" />\r\n      <workItem from=\"1704888202583\" duration=\"73550000\" />\r\n      <workItem from=\"1705464245390\" duration=\"7707000\" />\r\n      <workItem from=\"1705591325303\" duration=\"258000\" />\r\n      <workItem from=\"1705591834880\" duration=\"6000\" />\r\n      <workItem from=\"1711562755418\" duration=\"69000\" />\r\n      <workItem from=\"1711562826312\" duration=\"1783000\" />\r\n      <workItem from=\"1712242490765\" duration=\"27408000\" />\r\n      <workItem from=\"1712714113611\" duration=\"31901000\" />\r\n      <workItem from=\"1712796191928\" duration=\"9872000\" />\r\n      <workItem from=\"1713065422279\" duration=\"9741000\" />\r\n      <workItem from=\"1713203877567\" duration=\"33246000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"dependencySupport\" implementationName=\"executable:docker\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:tailwindcss\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"executable:kubectl\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:vue\" />\r\n    <option featureType=\"dependencySupport\" implementationName=\"javascript:npm:postcss\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.History.Properties\">\r\n    <option name=\"COLUMN_ID_ORDER\">\r\n      <list>\r\n        <option value=\"Default.Root\" />\r\n        <option value=\"Default.Author\" />\r\n        <option value=\"Default.Date\" />\r\n        <option value=\"Default.Subject\" />\r\n        <option value=\"Space.CommitStatus\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"e6ef8f47-607e-4e42-8463-46fed154a102\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"e6ef8f47-607e-4e42-8463-46fed154a102\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"structure\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"dir://wsl$/Ubuntu-22.04/home/igorhaf/nexabuild/resources\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/.idea/workspace.xml	(date 1713650233411)
@@ -5,10 +5,312 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c7bf2b6a-53dc-4235-a0b0-fdaa0f57ccdc" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/react-frontend/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/react-frontend/src/App.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/react-frontend/src/ColumnTwo.js" beforeDir="false" afterPath="$PROJECT_DIR$/react-frontend/src/ColumnTwo.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/react-frontend/src/ProgressBar.js" beforeDir="false" afterPath="$PROJECT_DIR$/react-frontend/src/ProgressBar.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/app.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/app.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/LICENSE" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/LICENSE" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/base.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/base.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/base.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/base.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to-many.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to-many.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to-many.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to-many.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/belongs-to.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-many.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-many.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-many.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-many.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-one.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-one.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-one.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/has-one.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/helpers.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/helpers.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/helpers.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/helpers.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/mixin.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/mixin.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/mixin.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/associations/mixin.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/deferrable.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/deferrable.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/deferrable.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/deferrable.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/operators.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/abstract/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/db2/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mariadb/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/async-queue.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/async-queue.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/async-queue.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/async-queue.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mssql/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/mysql/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/oracle/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/parserStore.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/parserStore.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/parserStore.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/parserStore.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/hstore.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/hstore.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/hstore.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/hstore.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/range.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/range.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/range.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/postgres/range.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/snowflake/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/connection-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/data-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/data-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/data-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/data-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-generator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-generator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-generator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-generator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-interface.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-interface.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-interface.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query-interface.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/query.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/sqlite-utils.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/sqlite-utils.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/sqlite-utils.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/dialects/sqlite/sqlite-utils.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/aggregate-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/aggregate-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/aggregate-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/aggregate-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/association-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/association-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/association-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/association-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/base-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/base-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/base-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/base-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/bulk-record-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/bulk-record-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/bulk-record-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/bulk-record-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/access-denied-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/access-denied-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/access-denied-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/access-denied-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-acquire-timeout-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-acquire-timeout-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-acquire-timeout-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-acquire-timeout-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-refused-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-refused-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-refused-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-refused-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-timed-out-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-timed-out-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-timed-out-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/connection-timed-out-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-found-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-found-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-found-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-found-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-reachable-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-reachable-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-reachable-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/host-not-reachable-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/invalid-connection-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/invalid-connection-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/invalid-connection-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/connection/invalid-connection-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/exclusion-constraint-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/exclusion-constraint-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/exclusion-constraint-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/exclusion-constraint-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/foreign-key-constraint-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/foreign-key-constraint-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/foreign-key-constraint-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/foreign-key-constraint-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/timeout-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/timeout-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/timeout-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/timeout-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/unknown-constraint-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/unknown-constraint-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/unknown-constraint-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/database/unknown-constraint-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/eager-loading-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/eager-loading-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/eager-loading-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/eager-loading-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/empty-result-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/empty-result-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/empty-result-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/empty-result-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/instance-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/instance-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/instance-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/instance-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/optimistic-lock-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/optimistic-lock-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/optimistic-lock-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/optimistic-lock-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/query-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/query-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/query-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/query-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/sequelize-scope-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/sequelize-scope-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/sequelize-scope-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/sequelize-scope-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation/unique-constraint-error.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation/unique-constraint-error.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation/unique-constraint-error.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/errors/validation/unique-constraint-error.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/falsy.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/falsy.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/falsy.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/falsy.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/sql-fragment.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/sql-fragment.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/sql-fragment.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/generic/sql-fragment.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/hooks.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/hooks.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/hooks.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/hooks.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index-hints.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index-hints.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index-hints.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index-hints.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index.mjs" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/index.mjs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/instance-validator.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/instance-validator.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/instance-validator.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/instance-validator.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model-manager.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model-manager.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model-manager.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model-manager.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/model.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/operators.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/operators.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/operators.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/operators.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/query-types.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/query-types.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/query-types.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/query-types.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sequelize.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sequelize.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sequelize.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sequelize.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sql-string.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sql-string.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sql-string.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/sql-string.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/table-hints.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/table-hints.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/table-hints.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/table-hints.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/transaction.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/transaction.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/transaction.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/transaction.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/class-to-invokable.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/class-to-invokable.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/class-to-invokable.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/class-to-invokable.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/deprecations.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/deprecations.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/deprecations.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/deprecations.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/join-sql-fragments.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/join-sql-fragments.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/join-sql-fragments.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/join-sql-fragments.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/logger.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/logger.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/logger.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/logger.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/sql.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/sql.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/sql.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/sql.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/validator-extras.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/validator-extras.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/validator-extras.js.map" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/lib/utils/validator-extras.js.map" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/package.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/base.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/base.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/belongs-to-many.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/belongs-to-many.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/belongs-to.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/belongs-to.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/has-many.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/has-many.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/has-one.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/has-one.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/index.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/associations/index.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/data-types.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/data-types.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/deferrable.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/deferrable.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/connection-manager.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/connection-manager.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/index.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/index.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/query-interface.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/query-interface.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/query.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/abstract/query.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/mssql/async-queue.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/mssql/async-queue.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/sqlite/sqlite-utils.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/dialects/sqlite/sqlite-utils.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/aggregate-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/aggregate-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/association-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/association-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/base-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/base-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/bulk-record-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/bulk-record-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/access-denied-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/access-denied-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/connection-acquire-timeout-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/connection-acquire-timeout-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/connection-refused-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/connection-refused-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/connection-timed-out-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/connection-timed-out-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/host-not-found-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/host-not-found-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/host-not-reachable-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/host-not-reachable-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/invalid-connection-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/connection/invalid-connection-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/exclusion-constraint-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/exclusion-constraint-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/foreign-key-constraint-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/foreign-key-constraint-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/timeout-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/timeout-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/unknown-constraint-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/database/unknown-constraint-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/eager-loading-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/eager-loading-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/empty-result-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/empty-result-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/index.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/index.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/instance-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/instance-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/optimistic-lock-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/optimistic-lock-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/query-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/query-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/sequelize-scope-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/sequelize-scope-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/validation-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/validation-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/validation/unique-constraint-error.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/errors/validation/unique-constraint-error.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/generic/falsy.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/generic/falsy.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/generic/sql-fragment.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/generic/sql-fragment.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/hooks.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/hooks.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/index-hints.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/index-hints.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/index.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/index.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/instance-validator.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/instance-validator.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/model-manager.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/model-manager.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/model.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/model.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/operators.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/operators.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/query-types.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/query-types.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/query.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/query.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/sequelize.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/sequelize.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/sql-string.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/sql-string.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/table-hints.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/table-hints.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/transaction.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/transaction.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/class-to-invokable.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/class-to-invokable.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/deprecations.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/deprecations.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/join-sql-fragments.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/join-sql-fragments.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/logger.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/logger.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/set-required.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/set-required.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/sql.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/sql.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/validator-extras.d.ts" beforeDir="false" afterPath="$PROJECT_DIR$/backend/node_modules/sequelize/types/utils/validator-extras.d.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/backend/routes/api.js" beforeDir="false" afterPath="$PROJECT_DIR$/backend/routes/graphsRoutes.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/react-frontend/src/MxGraphComponent.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/react-frontend/src/MxGraphComponent.jsx" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -156,7 +458,7 @@
     "git-widget-placeholder": "develop",
     "ignore.virus.scanning.warn.message": "true",
     "js.linters.configure.manually.selectedeslint": "true",
-    "last_opened_file_path": "//wsl.localhost/Ubuntu-22.04/home/igorhaf/nexabuild/react-frontend/src/redux/reducers",
+    "last_opened_file_path": "//wsl.localhost/Ubuntu-22.04/home/igorhaf/nexabuild/react-frontend/src/api",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.standard": "true",
     "node.js.detected.package.tslint": "true",
@@ -177,11 +479,11 @@
 }]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild\react-frontend\src\api" />
+      <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild\backend\routes" />
       <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild\react-frontend\src\redux\reducers" />
       <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild\react-frontend\src\redux\actions" />
       <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild" />
-      <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild\react-frontend\src\components" />
-      <recent name="\\wsl$\Ubuntu-22.04\home\igorhaf\nexabuild\react-frontend\src" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="\\wsl.localhost\Ubuntu-22.04\home\igorhaf\nexabuild\react-frontend\src\components" />
@@ -239,7 +541,7 @@
       <workItem from="1712714113611" duration="31901000" />
       <workItem from="1712796191928" duration="9872000" />
       <workItem from="1713065422279" duration="9741000" />
-      <workItem from="1713203877567" duration="33246000" />
+      <workItem from="1713203877567" duration="41159000" />
     </task>
     <servers />
   </component>
Index: backend/node_modules/sequelize/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"sequelize\",\r\n  \"_id\": \"sequelize@6.35.2\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-EdzLaw2kK4/aOnWQ7ed/qh3B6/g+1DvmeXr66RwbcqSm/+QRS9X0LDI5INBibsy4eNJHWIRPo3+QK0zL+IPBHg==\",\r\n  \"_location\": \"/sequelize\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"tag\",\r\n    \"registry\": true,\r\n    \"raw\": \"sequelize\",\r\n    \"name\": \"sequelize\",\r\n    \"escapedName\": \"sequelize\",\r\n    \"rawSpec\": \"\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"latest\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"#USER\",\r\n    \"/\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/sequelize/-/sequelize-6.35.2.tgz\",\r\n  \"_shasum\": \"9276d24055a9a07bd6812c89ab402659f5853e70\",\r\n  \"_spec\": \"sequelize\",\r\n  \"_where\": \"/home/igorhaf/nexabuild-express\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/sequelize/sequelize/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"commitlint\": {\r\n    \"extends\": [\r\n      \"@commitlint/config-angular\"\r\n    ],\r\n    \"rules\": {\r\n      \"type-enum\": [\r\n        2,\r\n        \"always\",\r\n        [\r\n          \"build\",\r\n          \"ci\",\r\n          \"docs\",\r\n          \"feat\",\r\n          \"fix\",\r\n          \"perf\",\r\n          \"refactor\",\r\n          \"revert\",\r\n          \"style\",\r\n          \"test\",\r\n          \"meta\"\r\n        ]\r\n      ]\r\n    }\r\n  },\r\n  \"dependencies\": {\r\n    \"@types/debug\": \"^4.1.8\",\r\n    \"@types/validator\": \"^13.7.17\",\r\n    \"debug\": \"^4.3.4\",\r\n    \"dottie\": \"^2.0.6\",\r\n    \"inflection\": \"^1.13.4\",\r\n    \"lodash\": \"^4.17.21\",\r\n    \"moment\": \"^2.29.4\",\r\n    \"moment-timezone\": \"^0.5.43\",\r\n    \"pg-connection-string\": \"^2.6.1\",\r\n    \"retry-as-promised\": \"^7.0.4\",\r\n    \"semver\": \"^7.5.4\",\r\n    \"sequelize-pool\": \"^7.1.0\",\r\n    \"toposort-class\": \"^1.0.1\",\r\n    \"uuid\": \"^8.3.2\",\r\n    \"validator\": \"^13.9.0\",\r\n    \"wkx\": \"^0.5.0\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift and Snowflake’s Data Cloud. It features solid transaction support, relations, eager and lazy loading, read replication and more.\",\r\n  \"devDependencies\": {\r\n    \"@commitlint/cli\": \"^15.0.0\",\r\n    \"@commitlint/config-angular\": \"^15.0.0\",\r\n    \"@octokit/rest\": \"^18.12.0\",\r\n    \"@octokit/types\": \"^6.34.0\",\r\n    \"@types/chai\": \"^4.3.0\",\r\n    \"@types/lodash\": \"4.14.197\",\r\n    \"@types/mocha\": \"^9.0.0\",\r\n    \"@types/node\": \"^16.11.17\",\r\n    \"@types/sinon\": \"^10.0.6\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^5.8.1\",\r\n    \"@typescript-eslint/parser\": \"^5.8.1\",\r\n    \"acorn\": \"^8.7.0\",\r\n    \"chai\": \"^4.3.7\",\r\n    \"chai-as-promised\": \"^7.1.1\",\r\n    \"chai-datetime\": \"^1.8.0\",\r\n    \"cheerio\": \"^1.0.0-rc.10\",\r\n    \"cls-hooked\": \"^4.2.2\",\r\n    \"copyfiles\": \"^2.4.1\",\r\n    \"cross-env\": \"^7.0.3\",\r\n    \"delay\": \"^5.0.0\",\r\n    \"esbuild\": \"0.14.3\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^8.5.0\",\r\n    \"eslint-plugin-jsdoc\": \"^37.4.0\",\r\n    \"eslint-plugin-mocha\": \"^9.0.0\",\r\n    \"expect-type\": \"^0.12.0\",\r\n    \"fast-glob\": \"^3.2.7\",\r\n    \"fs-jetpack\": \"^4.3.0\",\r\n    \"husky\": \"^7.0.4\",\r\n    \"ibm_db\": \"^2.8.1\",\r\n    \"js-combinatorics\": \"^0.6.1\",\r\n    \"lcov-result-merger\": \"^3.1.0\",\r\n    \"lint-staged\": \"^12.1.4\",\r\n    \"mariadb\": \"^2.5.5\",\r\n    \"markdownlint-cli\": \"^0.30.0\",\r\n    \"mocha\": \"^7.2.0\",\r\n    \"module-alias\": \"^2.2.2\",\r\n    \"mysql2\": \"^2.3.3\",\r\n    \"node-hook\": \"^1.0.0\",\r\n    \"nyc\": \"^15.1.0\",\r\n    \"oracledb\": \"^5.5.0\",\r\n    \"p-map\": \"^4.0.0\",\r\n    \"p-props\": \"^4.0.0\",\r\n    \"p-settle\": \"^4.1.1\",\r\n    \"p-timeout\": \"^4.0.0\",\r\n    \"pg\": \"^8.7.1\",\r\n    \"pg-hstore\": \"^2.3.4\",\r\n    \"rimraf\": \"^3.0.2\",\r\n    \"semantic-release\": \"^18.0.1\",\r\n    \"semantic-release-fail-on-major-bump\": \"^1.0.0\",\r\n    \"sinon\": \"^12.0.1\",\r\n    \"sinon-chai\": \"^3.7.0\",\r\n    \"snowflake-sdk\": \"^1.6.6\",\r\n    \"source-map-support\": \"^0.5.21\",\r\n    \"sqlite3\": \"^5.1.6\",\r\n    \"tedious\": \"8.3.0\",\r\n    \"typescript\": \"^4.5.4\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=10.0.0\"\r\n  },\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./types/index.d.ts\",\r\n      \"import\": \"./lib/index.mjs\",\r\n      \"require\": \"./lib/index.js\"\r\n    },\r\n    \"./lib/*\": {\r\n      \"types\": \"./types/*.d.ts\",\r\n      \"default\": \"./lib/*.js\"\r\n    },\r\n    \"./lib/errors\": {\r\n      \"types\": \"./types/errors/index.d.ts\",\r\n      \"default\": \"./lib/errors/index.js\"\r\n    },\r\n    \"./package.json\": \"./package.json\",\r\n    \"./types/*\": {\r\n      \"types\": \"./types/*.d.ts\"\r\n    }\r\n  },\r\n  \"files\": [\r\n    \"lib\",\r\n    \"types\",\r\n    \"index.js\"\r\n  ],\r\n  \"funding\": [\r\n    {\r\n      \"type\": \"opencollective\",\r\n      \"url\": \"https://opencollective.com/sequelize\"\r\n    }\r\n  ],\r\n  \"homepage\": \"https://sequelize.org/\",\r\n  \"keywords\": [\r\n    \"mysql\",\r\n    \"mariadb\",\r\n    \"sqlite\",\r\n    \"postgresql\",\r\n    \"postgres\",\r\n    \"pg\",\r\n    \"mssql\",\r\n    \"db2\",\r\n    \"ibm_db\",\r\n    \"sql\",\r\n    \"oracledb\",\r\n    \"sqlserver\",\r\n    \"snowflake\",\r\n    \"orm\",\r\n    \"nodejs\",\r\n    \"object relational mapper\",\r\n    \"database\",\r\n    \"db\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"lint-staged\": {\r\n    \"*!(d).[tj]s\": \"eslint\"\r\n  },\r\n  \"main\": \"./lib/index.js\",\r\n  \"name\": \"sequelize\",\r\n  \"peerDependenciesMeta\": {\r\n    \"pg\": {\r\n      \"optional\": true\r\n    },\r\n    \"pg-hstore\": {\r\n      \"optional\": true\r\n    },\r\n    \"mysql2\": {\r\n      \"optional\": true\r\n    },\r\n    \"ibm_db\": {\r\n      \"optional\": true\r\n    },\r\n    \"snowflake-sdk\": {\r\n      \"optional\": true\r\n    },\r\n    \"mariadb\": {\r\n      \"optional\": true\r\n    },\r\n    \"sqlite3\": {\r\n      \"optional\": true\r\n    },\r\n    \"tedious\": {\r\n      \"optional\": true\r\n    },\r\n    \"oracledb\": {\r\n      \"optional\": true\r\n    }\r\n  },\r\n  \"publishConfig\": {\r\n    \"tag\": \"latest\"\r\n  },\r\n  \"release\": {\r\n    \"plugins\": [\r\n      \"@semantic-release/commit-analyzer\",\r\n      \"semantic-release-fail-on-major-bump\",\r\n      \"@semantic-release/release-notes-generator\",\r\n      \"@semantic-release/npm\",\r\n      \"@semantic-release/github\"\r\n    ],\r\n    \"branches\": [\r\n      \"v6\",\r\n      {\r\n        \"name\": \"v6-beta\",\r\n        \"prerelease\": \"beta\"\r\n      }\r\n    ]\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/sequelize/sequelize.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"----------------------------------------- coverage ------------------------------------------------\": \"\",\r\n    \"----------------------------------------- development ---------------------------------------------\": \"\",\r\n    \"----------------------------------------- documentation -------------------------------------------\": \"\",\r\n    \"----------------------------------------- local test dbs ------------------------------------------\": \"\",\r\n    \"----------------------------------------- local tests ---------------------------------------------\": \"\",\r\n    \"----------------------------------------- static analysis -----------------------------------------\": \"\",\r\n    \"----------------------------------------- tests ---------------------------------------------------\": \"\",\r\n    \"---------------------------------------------------------------------------------------------------\": \"\",\r\n    \"build\": \"node ./build.js\",\r\n    \"cover\": \"rimraf coverage && npm run teaser && npm run cover-integration && npm run cover-unit && npm run merge-coverage\",\r\n    \"cover-integration\": \"cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \\\"test/integration/**/*.test.[tj]s\\\" && node -e \\\"require('fs').renameSync('coverage/lcov.info', 'coverage/integration.info')\\\"\",\r\n    \"cover-unit\": \"cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \\\"test/unit/**/*.test.[tj]s\\\" && node -e \\\"require('fs').renameSync('coverage/lcov.info', 'coverage/unit.info')\\\"\",\r\n    \"docs\": \"sh docs.sh\",\r\n    \"lint\": \"eslint src test --quiet --fix\",\r\n    \"lint-docs\": \"markdownlint docs\",\r\n    \"merge-coverage\": \"lcov-result-merger \\\"coverage/*.info\\\" \\\"coverage/lcov.info\\\"\",\r\n    \"mocha\": \"mocha -r ./test/registerEsbuild\",\r\n    \"prepare\": \"npm run build && husky install\",\r\n    \"restart-db2\": \"npm run start-db2\",\r\n    \"restart-mariadb\": \"npm run start-mariadb\",\r\n    \"restart-mssql\": \"npm run start-mssql\",\r\n    \"restart-mysql\": \"npm run start-mysql\",\r\n    \"restart-oracle-latest\": \"npm run start-oracle-latest\",\r\n    \"restart-oracle-oldest\": \"npm run start-oracle-oldest\",\r\n    \"restart-postgres\": \"npm run start-postgres\",\r\n    \"sscce\": \"node sscce.js\",\r\n    \"sscce-db2\": \"cross-env DIALECT=db2 node sscce.js\",\r\n    \"sscce-mariadb\": \"cross-env DIALECT=mariadb node sscce.js\",\r\n    \"sscce-mssql\": \"cross-env DIALECT=mssql node sscce.js\",\r\n    \"sscce-mysql\": \"cross-env DIALECT=mysql node sscce.js\",\r\n    \"sscce-oracle\": \"cross-env LD_LIBRARY_PATH=\\\"$PWD/.oracle/instantclient/\\\" DIALECT=oracle UV_THREADPOOL_SIZE=128 node sscce.js\",\r\n    \"sscce-postgres\": \"cross-env DIALECT=postgres node sscce.js\",\r\n    \"sscce-postgres-native\": \"cross-env DIALECT=postgres-native node sscce.js\",\r\n    \"sscce-sqlite\": \"cross-env DIALECT=sqlite node sscce.js\",\r\n    \"start-db2\": \"bash dev/db2/11.5/start.sh\",\r\n    \"start-mariadb\": \"bash dev/mariadb/10.3/start.sh\",\r\n    \"start-mssql\": \"bash dev/mssql/2019/start.sh\",\r\n    \"start-mysql\": \"bash dev/mysql/5.7/start.sh\",\r\n    \"start-mysql-8\": \"bash dev/mysql/8.0/start.sh\",\r\n    \"start-oracle-latest\": \"bash dev/oracle/21-slim/start.sh\",\r\n    \"start-oracle-oldest\": \"bash dev/oracle/18-slim/start.sh\",\r\n    \"start-postgres\": \"bash dev/postgres/10/start.sh\",\r\n    \"stop-db2\": \"bash dev/db2/11.5/stop.sh\",\r\n    \"stop-mariadb\": \"bash dev/mariadb/10.3/stop.sh\",\r\n    \"stop-mssql\": \"bash dev/mssql/2019/stop.sh\",\r\n    \"stop-mysql\": \"bash dev/mysql/5.7/stop.sh\",\r\n    \"stop-mysql-8\": \"bash dev/mysql/8.0/stop.sh\",\r\n    \"stop-oracle-latest\": \"bash dev/oracle/21-slim/stop.sh\",\r\n    \"stop-oracle-oldest\": \"bash dev/oracle/18-slim/stop.sh\",\r\n    \"stop-postgres\": \"bash dev/postgres/10/stop.sh\",\r\n    \"teaser\": \"node test/teaser.js\",\r\n    \"test\": \"npm run prepare && npm run test-typings && npm run teaser && npm run test-unit && npm run test-integration\",\r\n    \"test-db2\": \"cross-env DIALECT=db2 npm test\",\r\n    \"test-integration\": \"yarn mocha \\\"test/integration/**/*.test.[tj]s\\\"\",\r\n    \"test-integration-db2\": \"cross-env DIALECT=db2 npm run test-integration\",\r\n    \"test-integration-mariadb\": \"cross-env DIALECT=mariadb npm run test-integration\",\r\n    \"test-integration-mssql\": \"cross-env DIALECT=mssql npm run test-integration\",\r\n    \"test-integration-mysql\": \"cross-env DIALECT=mysql npm run test-integration\",\r\n    \"test-integration-oracle\": \"cross-env LD_LIBRARY_PATH=\\\"$PWD/.oracle/instantclient/\\\" DIALECT=oracle UV_THREADPOOL_SIZE=128 npm run test-integration\",\r\n    \"test-integration-postgres\": \"cross-env DIALECT=postgres npm run test-integration\",\r\n    \"test-integration-postgres-native\": \"cross-env DIALECT=postgres-native npm run test-integration\",\r\n    \"test-integration-snowflake\": \"cross-env DIALECT=snowflake npm run test-integration\",\r\n    \"test-integration-sqlite\": \"cross-env DIALECT=sqlite npm run test-integration\",\r\n    \"test-mariadb\": \"cross-env DIALECT=mariadb npm test\",\r\n    \"test-mssql\": \"cross-env DIALECT=mssql npm test\",\r\n    \"test-mysql\": \"cross-env DIALECT=mysql npm test\",\r\n    \"test-oracle\": \"cross-env LD_LIBRARY_PATH=\\\"$PWD/.oracle/instantclient/\\\" DIALECT=oracle UV_THREADPOOL_SIZE=128 npm test\",\r\n    \"test-postgres\": \"cross-env DIALECT=postgres npm test\",\r\n    \"test-postgres-native\": \"cross-env DIALECT=postgres-native npm test\",\r\n    \"test-sqlite\": \"cross-env DIALECT=sqlite npm test\",\r\n    \"test-typings\": \"tsc --noEmit --emitDeclarationOnly false && tsc -b test/tsconfig.json\",\r\n    \"test-unit\": \"yarn mocha \\\"test/unit/**/*.test.[tj]s\\\"\",\r\n    \"test-unit-all\": \"npm run test-unit-mariadb && npm run test-unit-mysql && npm run test-unit-postgres && npm run test-unit-postgres-native && npm run test-unit-mssql && npm run test-unit-sqlite && npm run test-unit-snowflake && npm run test-unit-db2 && npm run test-unit-oracle\",\r\n    \"test-unit-db2\": \"cross-env DIALECT=db2 npm run test-unit\",\r\n    \"test-unit-mariadb\": \"cross-env DIALECT=mariadb npm run test-unit\",\r\n    \"test-unit-mssql\": \"cross-env DIALECT=mssql npm run test-unit\",\r\n    \"test-unit-mysql\": \"cross-env DIALECT=mysql npm run test-unit\",\r\n    \"test-unit-oracle\": \"cross-env DIALECT=oracle npm run test-unit\",\r\n    \"test-unit-postgres\": \"cross-env DIALECT=postgres npm run test-unit\",\r\n    \"test-unit-postgres-native\": \"cross-env DIALECT=postgres-native npm run test-unit\",\r\n    \"test-unit-snowflake\": \"cross-env DIALECT=snowflake npm run test-unit\",\r\n    \"test-unit-sqlite\": \"cross-env DIALECT=sqlite npm run test-unit\"\r\n  },\r\n  \"support\": true,\r\n  \"type\": \"commonjs\",\r\n  \"types\": \"./types/index.d.ts\",\r\n  \"version\": \"6.35.2\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/node_modules/sequelize/package.json b/backend/node_modules/sequelize/package.json
--- a/backend/node_modules/sequelize/package.json	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/backend/node_modules/sequelize/package.json	(date 1713648521585)
@@ -1,56 +1,52 @@
 {
-  "_from": "sequelize",
-  "_id": "sequelize@6.35.2",
-  "_inBundle": false,
-  "_integrity": "sha512-EdzLaw2kK4/aOnWQ7ed/qh3B6/g+1DvmeXr66RwbcqSm/+QRS9X0LDI5INBibsy4eNJHWIRPo3+QK0zL+IPBHg==",
-  "_location": "/sequelize",
-  "_phantomChildren": {},
-  "_requested": {
-    "type": "tag",
-    "registry": true,
-    "raw": "sequelize",
-    "name": "sequelize",
-    "escapedName": "sequelize",
-    "rawSpec": "",
-    "saveSpec": null,
-    "fetchSpec": "latest"
-  },
-  "_requiredBy": [
-    "#USER",
-    "/"
+  "name": "sequelize",
+  "description": "Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift and Snowflake’s Data Cloud. It features solid transaction support, relations, eager and lazy loading, read replication and more.",
+  "version": "6.37.3",
+  "funding": [
+    {
+      "type": "opencollective",
+      "url": "https://opencollective.com/sequelize"
+    }
   ],
-  "_resolved": "https://registry.npmjs.org/sequelize/-/sequelize-6.35.2.tgz",
-  "_shasum": "9276d24055a9a07bd6812c89ab402659f5853e70",
-  "_spec": "sequelize",
-  "_where": "/home/igorhaf/nexabuild-express",
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/sequelize/sequelize.git"
+  },
   "bugs": {
     "url": "https://github.com/sequelize/sequelize/issues"
   },
-  "bundleDependencies": false,
-  "commitlint": {
-    "extends": [
-      "@commitlint/config-angular"
-    ],
-    "rules": {
-      "type-enum": [
-        2,
-        "always",
-        [
-          "build",
-          "ci",
-          "docs",
-          "feat",
-          "fix",
-          "perf",
-          "refactor",
-          "revert",
-          "style",
-          "test",
-          "meta"
-        ]
-      ]
+  "homepage": "https://sequelize.org/",
+  "main": "./lib/index.js",
+  "types": "./types/index.d.ts",
+  "type": "commonjs",
+  "exports": {
+    ".": {
+      "types": "./types/index.d.ts",
+      "import": "./lib/index.mjs",
+      "require": "./lib/index.js"
+    },
+    "./lib/*": {
+      "types": "./types/*.d.ts",
+      "default": "./lib/*.js"
+    },
+    "./lib/errors": {
+      "types": "./types/errors/index.d.ts",
+      "default": "./lib/errors/index.js"
+    },
+    "./package.json": "./package.json",
+    "./types/*": {
+      "types": "./types/*.d.ts"
     }
   },
+  "engines": {
+    "node": ">=10.0.0"
+  },
+  "files": [
+    "lib",
+    "types",
+    "index.js"
+  ],
+  "license": "MIT",
   "dependencies": {
     "@types/debug": "^4.1.8",
     "@types/validator": "^13.7.17",
@@ -69,8 +65,6 @@
     "validator": "^13.9.0",
     "wkx": "^0.5.0"
   },
-  "deprecated": false,
-  "description": "Sequelize is a promise-based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Amazon Redshift and Snowflake’s Data Cloud. It features solid transaction support, relations, eager and lazy loading, read replication and more.",
   "devDependencies": {
     "@commitlint/cli": "^15.0.0",
     "@commitlint/config-angular": "^15.0.0",
@@ -133,40 +127,35 @@
     "tedious": "8.3.0",
     "typescript": "^4.5.4"
   },
-  "engines": {
-    "node": ">=10.0.0"
-  },
-  "exports": {
-    ".": {
-      "types": "./types/index.d.ts",
-      "import": "./lib/index.mjs",
-      "require": "./lib/index.js"
+  "peerDependenciesMeta": {
+    "pg": {
+      "optional": true
+    },
+    "pg-hstore": {
+      "optional": true
     },
-    "./lib/*": {
-      "types": "./types/*.d.ts",
-      "default": "./lib/*.js"
+    "mysql2": {
+      "optional": true
     },
-    "./lib/errors": {
-      "types": "./types/errors/index.d.ts",
-      "default": "./lib/errors/index.js"
+    "ibm_db": {
+      "optional": true
     },
-    "./package.json": "./package.json",
-    "./types/*": {
-      "types": "./types/*.d.ts"
-    }
-  },
-  "files": [
-    "lib",
-    "types",
-    "index.js"
-  ],
-  "funding": [
-    {
-      "type": "opencollective",
-      "url": "https://opencollective.com/sequelize"
+    "snowflake-sdk": {
+      "optional": true
+    },
+    "mariadb": {
+      "optional": true
+    },
+    "sqlite3": {
+      "optional": true
+    },
+    "tedious": {
+      "optional": true
+    },
+    "oracledb": {
+      "optional": true
     }
-  ],
-  "homepage": "https://sequelize.org/",
+  },
   "keywords": [
     "mysql",
     "mariadb",
@@ -187,44 +176,33 @@
     "database",
     "db"
   ],
-  "license": "MIT",
+  "commitlint": {
+    "extends": [
+      "@commitlint/config-angular"
+    ],
+    "rules": {
+      "type-enum": [
+        2,
+        "always",
+        [
+          "build",
+          "ci",
+          "docs",
+          "feat",
+          "fix",
+          "perf",
+          "refactor",
+          "revert",
+          "style",
+          "test",
+          "meta"
+        ]
+      ]
+    }
+  },
   "lint-staged": {
     "*!(d).[tj]s": "eslint"
   },
-  "main": "./lib/index.js",
-  "name": "sequelize",
-  "peerDependenciesMeta": {
-    "pg": {
-      "optional": true
-    },
-    "pg-hstore": {
-      "optional": true
-    },
-    "mysql2": {
-      "optional": true
-    },
-    "ibm_db": {
-      "optional": true
-    },
-    "snowflake-sdk": {
-      "optional": true
-    },
-    "mariadb": {
-      "optional": true
-    },
-    "sqlite3": {
-      "optional": true
-    },
-    "tedious": {
-      "optional": true
-    },
-    "oracledb": {
-      "optional": true
-    }
-  },
-  "publishConfig": {
-    "tag": "latest"
-  },
   "release": {
     "plugins": [
       "@semantic-release/commit-analyzer",
@@ -241,96 +219,92 @@
       }
     ]
   },
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/sequelize/sequelize.git"
+  "publishConfig": {
+    "tag": "latest"
   },
   "scripts": {
-    "----------------------------------------- coverage ------------------------------------------------": "",
-    "----------------------------------------- development ---------------------------------------------": "",
-    "----------------------------------------- documentation -------------------------------------------": "",
-    "----------------------------------------- local test dbs ------------------------------------------": "",
-    "----------------------------------------- local tests ---------------------------------------------": "",
     "----------------------------------------- static analysis -----------------------------------------": "",
+    "lint": "eslint src test --quiet --fix",
+    "lint-docs": "markdownlint docs",
+    "test-typings": "tsc --noEmit --emitDeclarationOnly false && tsc -b test/tsconfig.json",
+    "----------------------------------------- documentation -------------------------------------------": "",
+    "docs": "sh docs.sh",
     "----------------------------------------- tests ---------------------------------------------------": "",
-    "---------------------------------------------------------------------------------------------------": "",
-    "build": "node ./build.js",
+    "mocha": "mocha -r ./test/registerEsbuild",
+    "test-unit": "yarn mocha \"test/unit/**/*.test.[tj]s\"",
+    "test-integration": "yarn mocha \"test/integration/**/*.test.[tj]s\"",
+    "teaser": "node test/teaser.js",
+    "test": "npm run prepare && npm run test-typings && npm run teaser && npm run test-unit && npm run test-integration",
+    "----------------------------------------- coverage ------------------------------------------------": "",
     "cover": "rimraf coverage && npm run teaser && npm run cover-integration && npm run cover-unit && npm run merge-coverage",
     "cover-integration": "cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \"test/integration/**/*.test.[tj]s\" && node -e \"require('fs').renameSync('coverage/lcov.info', 'coverage/integration.info')\"",
     "cover-unit": "cross-env COVERAGE=true nyc --reporter=lcovonly yarn mocha \"test/unit/**/*.test.[tj]s\" && node -e \"require('fs').renameSync('coverage/lcov.info', 'coverage/unit.info')\"",
-    "docs": "sh docs.sh",
-    "lint": "eslint src test --quiet --fix",
-    "lint-docs": "markdownlint docs",
     "merge-coverage": "lcov-result-merger \"coverage/*.info\" \"coverage/lcov.info\"",
-    "mocha": "mocha -r ./test/registerEsbuild",
-    "prepare": "npm run build && husky install",
-    "restart-db2": "npm run start-db2",
-    "restart-mariadb": "npm run start-mariadb",
-    "restart-mssql": "npm run start-mssql",
-    "restart-mysql": "npm run start-mysql",
-    "restart-oracle-latest": "npm run start-oracle-latest",
-    "restart-oracle-oldest": "npm run start-oracle-oldest",
-    "restart-postgres": "npm run start-postgres",
-    "sscce": "node sscce.js",
-    "sscce-db2": "cross-env DIALECT=db2 node sscce.js",
-    "sscce-mariadb": "cross-env DIALECT=mariadb node sscce.js",
-    "sscce-mssql": "cross-env DIALECT=mssql node sscce.js",
-    "sscce-mysql": "cross-env DIALECT=mysql node sscce.js",
-    "sscce-oracle": "cross-env LD_LIBRARY_PATH=\"$PWD/.oracle/instantclient/\" DIALECT=oracle UV_THREADPOOL_SIZE=128 node sscce.js",
-    "sscce-postgres": "cross-env DIALECT=postgres node sscce.js",
-    "sscce-postgres-native": "cross-env DIALECT=postgres-native node sscce.js",
-    "sscce-sqlite": "cross-env DIALECT=sqlite node sscce.js",
-    "start-db2": "bash dev/db2/11.5/start.sh",
+    "----------------------------------------- local test dbs ------------------------------------------": "",
     "start-mariadb": "bash dev/mariadb/10.3/start.sh",
-    "start-mssql": "bash dev/mssql/2019/start.sh",
     "start-mysql": "bash dev/mysql/5.7/start.sh",
     "start-mysql-8": "bash dev/mysql/8.0/start.sh",
-    "start-oracle-latest": "bash dev/oracle/21-slim/start.sh",
+    "start-postgres": "bash dev/postgres/10/start.sh",
+    "start-mssql": "bash dev/mssql/2019/start.sh",
+    "start-db2": "bash dev/db2/11.5/start.sh",
     "start-oracle-oldest": "bash dev/oracle/18-slim/start.sh",
-    "start-postgres": "bash dev/postgres/10/start.sh",
-    "stop-db2": "bash dev/db2/11.5/stop.sh",
+    "start-oracle-latest": "bash dev/oracle/21-slim/start.sh",
     "stop-mariadb": "bash dev/mariadb/10.3/stop.sh",
-    "stop-mssql": "bash dev/mssql/2019/stop.sh",
     "stop-mysql": "bash dev/mysql/5.7/stop.sh",
     "stop-mysql-8": "bash dev/mysql/8.0/stop.sh",
-    "stop-oracle-latest": "bash dev/oracle/21-slim/stop.sh",
-    "stop-oracle-oldest": "bash dev/oracle/18-slim/stop.sh",
     "stop-postgres": "bash dev/postgres/10/stop.sh",
-    "teaser": "node test/teaser.js",
-    "test": "npm run prepare && npm run test-typings && npm run teaser && npm run test-unit && npm run test-integration",
-    "test-db2": "cross-env DIALECT=db2 npm test",
-    "test-integration": "yarn mocha \"test/integration/**/*.test.[tj]s\"",
-    "test-integration-db2": "cross-env DIALECT=db2 npm run test-integration",
+    "stop-mssql": "bash dev/mssql/2019/stop.sh",
+    "stop-db2": "bash dev/db2/11.5/stop.sh",
+    "stop-oracle-oldest": "bash dev/oracle/18-slim/stop.sh",
+    "stop-oracle-latest": "bash dev/oracle/21-slim/stop.sh",
+    "restart-mariadb": "npm run start-mariadb",
+    "restart-mysql": "npm run start-mysql",
+    "restart-postgres": "npm run start-postgres",
+    "restart-mssql": "npm run start-mssql",
+    "restart-db2": "npm run start-db2",
+    "restart-oracle-oldest": "npm run start-oracle-oldest",
+    "restart-oracle-latest": "npm run start-oracle-latest",
+    "----------------------------------------- local tests ---------------------------------------------": "",
+    "test-unit-mariadb": "cross-env DIALECT=mariadb npm run test-unit",
+    "test-unit-mysql": "cross-env DIALECT=mysql npm run test-unit",
+    "test-unit-postgres": "cross-env DIALECT=postgres npm run test-unit",
+    "test-unit-postgres-native": "cross-env DIALECT=postgres-native npm run test-unit",
+    "test-unit-sqlite": "cross-env DIALECT=sqlite npm run test-unit",
+    "test-unit-mssql": "cross-env DIALECT=mssql npm run test-unit",
+    "test-unit-db2": "cross-env DIALECT=db2 npm run test-unit",
+    "test-unit-snowflake": "cross-env DIALECT=snowflake npm run test-unit",
+    "test-unit-oracle": "cross-env DIALECT=oracle npm run test-unit",
+    "test-unit-all": "npm run test-unit-mariadb && npm run test-unit-mysql && npm run test-unit-postgres && npm run test-unit-postgres-native && npm run test-unit-mssql && npm run test-unit-sqlite && npm run test-unit-snowflake && npm run test-unit-db2 && npm run test-unit-oracle",
     "test-integration-mariadb": "cross-env DIALECT=mariadb npm run test-integration",
-    "test-integration-mssql": "cross-env DIALECT=mssql npm run test-integration",
     "test-integration-mysql": "cross-env DIALECT=mysql npm run test-integration",
-    "test-integration-oracle": "cross-env LD_LIBRARY_PATH=\"$PWD/.oracle/instantclient/\" DIALECT=oracle UV_THREADPOOL_SIZE=128 npm run test-integration",
     "test-integration-postgres": "cross-env DIALECT=postgres npm run test-integration",
     "test-integration-postgres-native": "cross-env DIALECT=postgres-native npm run test-integration",
-    "test-integration-snowflake": "cross-env DIALECT=snowflake npm run test-integration",
     "test-integration-sqlite": "cross-env DIALECT=sqlite npm run test-integration",
+    "test-integration-mssql": "cross-env DIALECT=mssql npm run test-integration",
+    "test-integration-db2": "cross-env DIALECT=db2 npm run test-integration",
+    "test-integration-snowflake": "cross-env DIALECT=snowflake npm run test-integration",
+    "test-integration-oracle": "cross-env LD_LIBRARY_PATH=\"$PWD/.oracle/instantclient/\" DIALECT=oracle UV_THREADPOOL_SIZE=128 npm run test-integration",
     "test-mariadb": "cross-env DIALECT=mariadb npm test",
-    "test-mssql": "cross-env DIALECT=mssql npm test",
     "test-mysql": "cross-env DIALECT=mysql npm test",
-    "test-oracle": "cross-env LD_LIBRARY_PATH=\"$PWD/.oracle/instantclient/\" DIALECT=oracle UV_THREADPOOL_SIZE=128 npm test",
+    "test-sqlite": "cross-env DIALECT=sqlite npm test",
     "test-postgres": "cross-env DIALECT=postgres npm test",
     "test-postgres-native": "cross-env DIALECT=postgres-native npm test",
-    "test-sqlite": "cross-env DIALECT=sqlite npm test",
-    "test-typings": "tsc --noEmit --emitDeclarationOnly false && tsc -b test/tsconfig.json",
-    "test-unit": "yarn mocha \"test/unit/**/*.test.[tj]s\"",
-    "test-unit-all": "npm run test-unit-mariadb && npm run test-unit-mysql && npm run test-unit-postgres && npm run test-unit-postgres-native && npm run test-unit-mssql && npm run test-unit-sqlite && npm run test-unit-snowflake && npm run test-unit-db2 && npm run test-unit-oracle",
-    "test-unit-db2": "cross-env DIALECT=db2 npm run test-unit",
-    "test-unit-mariadb": "cross-env DIALECT=mariadb npm run test-unit",
-    "test-unit-mssql": "cross-env DIALECT=mssql npm run test-unit",
-    "test-unit-mysql": "cross-env DIALECT=mysql npm run test-unit",
-    "test-unit-oracle": "cross-env DIALECT=oracle npm run test-unit",
-    "test-unit-postgres": "cross-env DIALECT=postgres npm run test-unit",
-    "test-unit-postgres-native": "cross-env DIALECT=postgres-native npm run test-unit",
-    "test-unit-snowflake": "cross-env DIALECT=snowflake npm run test-unit",
-    "test-unit-sqlite": "cross-env DIALECT=sqlite npm run test-unit"
+    "test-mssql": "cross-env DIALECT=mssql npm test",
+    "test-db2": "cross-env DIALECT=db2 npm test",
+    "test-oracle": "cross-env LD_LIBRARY_PATH=\"$PWD/.oracle/instantclient/\" DIALECT=oracle UV_THREADPOOL_SIZE=128 npm test",
+    "----------------------------------------- development ---------------------------------------------": "",
+    "sscce": "node sscce.js",
+    "sscce-mariadb": "cross-env DIALECT=mariadb node sscce.js",
+    "sscce-mysql": "cross-env DIALECT=mysql node sscce.js",
+    "sscce-postgres": "cross-env DIALECT=postgres node sscce.js",
+    "sscce-postgres-native": "cross-env DIALECT=postgres-native node sscce.js",
+    "sscce-sqlite": "cross-env DIALECT=sqlite node sscce.js",
+    "sscce-mssql": "cross-env DIALECT=mssql node sscce.js",
+    "sscce-db2": "cross-env DIALECT=db2 node sscce.js",
+    "sscce-oracle": "cross-env LD_LIBRARY_PATH=\"$PWD/.oracle/instantclient/\" DIALECT=oracle UV_THREADPOOL_SIZE=128 node sscce.js",
+    "prepare": "npm run build && husky install",
+    "build": "node ./build.js",
+    "---------------------------------------------------------------------------------------------------": ""
   },
-  "support": true,
-  "type": "commonjs",
-  "types": "./types/index.d.ts",
-  "version": "6.35.2"
+  "support": true
 }
Index: .idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<dataSource name=\"nexabuild@localhost\">\r\n  <database-model serializer=\"dbm\" dbms=\"POSTGRES\" family-id=\"POSTGRES\" format-version=\"4.51\">\r\n    <root id=\"1\"/>\r\n    <database id=\"2\" parent=\"1\" name=\"nexabuild\">\r\n      <Current>1</Current>\r\n      <Grants>11||10|C|G\r\n11||-9223372036854775808|U|G\r\n11||10|U|G\r\n2200||6171|C|G\r\n2200||-9223372036854775808|U|G\r\n2200||6171|U|G\r\n13212||10|C|G\r\n13212||-9223372036854775808|U|G\r\n13212||10|U|G</Grants>\r\n      <IntrospectionStateNumber>740</IntrospectionStateNumber>\r\n      <ObjectId>16384</ObjectId>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </database>\r\n    <database id=\"3\" parent=\"1\" name=\"postgres\">\r\n      <Comment>default administrative connection database</Comment>\r\n      <ObjectId>5</ObjectId>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </database>\r\n    <role id=\"4\" parent=\"1\" name=\"pg_database_owner\">\r\n      <ObjectId>6171</ObjectId>\r\n    </role>\r\n    <role id=\"5\" parent=\"1\" name=\"pg_read_all_data\">\r\n      <ObjectId>6181</ObjectId>\r\n    </role>\r\n    <role id=\"6\" parent=\"1\" name=\"pg_write_all_data\">\r\n      <ObjectId>6182</ObjectId>\r\n    </role>\r\n    <role id=\"7\" parent=\"1\" name=\"pg_monitor\">\r\n      <ObjectId>3373</ObjectId>\r\n      <RoleGrants>3374\r\n3375\r\n3377</RoleGrants>\r\n    </role>\r\n    <role id=\"8\" parent=\"1\" name=\"pg_read_all_settings\">\r\n      <ObjectId>3374</ObjectId>\r\n    </role>\r\n    <role id=\"9\" parent=\"1\" name=\"pg_read_all_stats\">\r\n      <ObjectId>3375</ObjectId>\r\n    </role>\r\n    <role id=\"10\" parent=\"1\" name=\"pg_stat_scan_tables\">\r\n      <ObjectId>3377</ObjectId>\r\n    </role>\r\n    <role id=\"11\" parent=\"1\" name=\"pg_read_server_files\">\r\n      <ObjectId>4569</ObjectId>\r\n    </role>\r\n    <role id=\"12\" parent=\"1\" name=\"pg_write_server_files\">\r\n      <ObjectId>4570</ObjectId>\r\n    </role>\r\n    <role id=\"13\" parent=\"1\" name=\"pg_execute_server_program\">\r\n      <ObjectId>4571</ObjectId>\r\n    </role>\r\n    <role id=\"14\" parent=\"1\" name=\"pg_signal_backend\">\r\n      <ObjectId>4200</ObjectId>\r\n    </role>\r\n    <role id=\"15\" parent=\"1\" name=\"pg_checkpoint\">\r\n      <ObjectId>4544</ObjectId>\r\n    </role>\r\n    <role id=\"16\" parent=\"1\" name=\"pg_use_reserved_connections\">\r\n      <ObjectId>4550</ObjectId>\r\n    </role>\r\n    <role id=\"17\" parent=\"1\" name=\"pg_create_subscription\">\r\n      <ObjectId>6304</ObjectId>\r\n    </role>\r\n    <role id=\"18\" parent=\"1\" name=\"nexabuild\">\r\n      <BypassRls>1</BypassRls>\r\n      <CanLogin>1</CanLogin>\r\n      <CreateDb>1</CreateDb>\r\n      <CreateRole>1</CreateRole>\r\n      <ObjectId>10</ObjectId>\r\n      <Replication>1</Replication>\r\n      <SuperRole>1</SuperRole>\r\n    </role>\r\n    <tablespace id=\"19\" parent=\"1\" name=\"pg_default\">\r\n      <ObjectId>1663</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </tablespace>\r\n    <tablespace id=\"20\" parent=\"1\" name=\"pg_global\">\r\n      <ObjectId>1664</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </tablespace>\r\n    <access-method id=\"21\" parent=\"2\" name=\"brin\">\r\n      <Comment>block range index (BRIN) access method</Comment>\r\n      <ObjectId>3580</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>index</Type>\r\n      <HandlerId>335</HandlerId>\r\n      <HandlerName>brinhandler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <access-method id=\"22\" parent=\"2\" name=\"btree\">\r\n      <Comment>b-tree index access method</Comment>\r\n      <ObjectId>403</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>index</Type>\r\n      <HandlerId>330</HandlerId>\r\n      <HandlerName>bthandler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <access-method id=\"23\" parent=\"2\" name=\"gin\">\r\n      <Comment>GIN index access method</Comment>\r\n      <ObjectId>2742</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>index</Type>\r\n      <HandlerId>333</HandlerId>\r\n      <HandlerName>ginhandler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <access-method id=\"24\" parent=\"2\" name=\"gist\">\r\n      <Comment>GiST index access method</Comment>\r\n      <ObjectId>783</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>index</Type>\r\n      <HandlerId>332</HandlerId>\r\n      <HandlerName>gisthandler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <access-method id=\"25\" parent=\"2\" name=\"hash\">\r\n      <Comment>hash index access method</Comment>\r\n      <ObjectId>405</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>index</Type>\r\n      <HandlerId>331</HandlerId>\r\n      <HandlerName>hashhandler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <access-method id=\"26\" parent=\"2\" name=\"heap\">\r\n      <Comment>heap table access method</Comment>\r\n      <ObjectId>2</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>table</Type>\r\n      <HandlerId>3</HandlerId>\r\n      <HandlerName>heap_tableam_handler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <access-method id=\"27\" parent=\"2\" name=\"spgist\">\r\n      <Comment>SP-GiST index access method</Comment>\r\n      <ObjectId>4000</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Type>index</Type>\r\n      <HandlerId>334</HandlerId>\r\n      <HandlerName>spghandler</HandlerName>\r\n      <HandlerParentName>pg_catalog</HandlerParentName>\r\n    </access-method>\r\n    <cast id=\"28\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10035</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2558</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>16</SourceTypeId>\r\n      <SourceTypeName>bool</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"29\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10201</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2971</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>16</SourceTypeId>\r\n      <SourceTypeName>bool</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"30\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10191</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2971</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>16</SourceTypeId>\r\n      <SourceTypeName>bool</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"31\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10196</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2971</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>16</SourceTypeId>\r\n      <SourceTypeName>bool</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"32\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10143</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>77</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>18</SourceTypeId>\r\n      <SourceTypeName>char</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"33\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10133</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>946</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>18</SourceTypeId>\r\n      <SourceTypeName>char</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"34\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10131</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>946</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>18</SourceTypeId>\r\n      <SourceTypeName>char</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"35\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10132</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>860</CastFunctionId>\r\n      <CastFunctionName>bpchar</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>18</SourceTypeId>\r\n      <SourceTypeName>char</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"36\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10135</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>408</CastFunctionId>\r\n      <CastFunctionName>bpchar</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>19</SourceTypeId>\r\n      <SourceTypeName>name</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"37\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10134</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>406</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>19</SourceTypeId>\r\n      <SourceTypeName>name</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"38\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10136</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1401</CastFunctionId>\r\n      <CastFunctionName>varchar</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>19</SourceTypeId>\r\n      <SourceTypeName>name</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"39\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10090</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2206</TargetTypeId>\r\n      <TargetTypeName>regtype</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"40\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10060</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2203</TargetTypeId>\r\n      <TargetTypeName>regoper</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"41\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10003</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>482</CastFunctionId>\r\n      <CastFunctionName>float8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>701</TargetTypeId>\r\n      <TargetTypeName>float8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"42\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10069</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2204</TargetTypeId>\r\n      <TargetTypeName>regoperator</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"43\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10001</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>480</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"44\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10044</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>24</TargetTypeId>\r\n      <TargetTypeName>regproc</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"45\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10113</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4096</TargetTypeId>\r\n      <TargetTypeName>regrole</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"46\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10120</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4089</TargetTypeId>\r\n      <TargetTypeName>regnamespace</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"47\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10002</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>652</CastFunctionId>\r\n      <CastFunctionName>float4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>700</TargetTypeId>\r\n      <TargetTypeName>float4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"48\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10104</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3769</TargetTypeId>\r\n      <TargetTypeName>regdictionary</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"49\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10083</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4191</TargetTypeId>\r\n      <TargetTypeName>regcollation</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"50\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10033</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3812</CastFunctionId>\r\n      <CastFunctionName>money</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>790</TargetTypeId>\r\n      <TargetTypeName>money</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"51\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10037</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"52\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10097</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3734</TargetTypeId>\r\n      <TargetTypeName>regconfig</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"53\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10000</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>714</CastFunctionId>\r\n      <CastFunctionName>int2</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>21</TargetTypeId>\r\n      <TargetTypeName>int2</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"54\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10185</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2075</CastFunctionId>\r\n      <CastFunctionName>bit</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1560</TargetTypeId>\r\n      <TargetTypeName>bit</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"55\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10004</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1781</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"56\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10053</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2202</TargetTypeId>\r\n      <TargetTypeName>regprocedure</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"57\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10076</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1287</CastFunctionId>\r\n      <CastFunctionName>oid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>20</SourceTypeId>\r\n      <SourceTypeName>int8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2205</TargetTypeId>\r\n      <TargetTypeName>regclass</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"58\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10045</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>24</TargetTypeId>\r\n      <TargetTypeName>regproc</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"59\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10091</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2206</TargetTypeId>\r\n      <TargetTypeName>regtype</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"60\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10084</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4191</TargetTypeId>\r\n      <TargetTypeName>regcollation</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"61\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10070</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2204</TargetTypeId>\r\n      <TargetTypeName>regoperator</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"62\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10038</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"63\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10009</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1782</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"64\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10077</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2205</TargetTypeId>\r\n      <TargetTypeName>regclass</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"65\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10006</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"66\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10054</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2202</TargetTypeId>\r\n      <TargetTypeName>regprocedure</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"67\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10007</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>236</CastFunctionId>\r\n      <CastFunctionName>float4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>700</TargetTypeId>\r\n      <TargetTypeName>float4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"68\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10005</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>754</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"69\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10114</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4096</TargetTypeId>\r\n      <TargetTypeName>regrole</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"70\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10008</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>235</CastFunctionId>\r\n      <CastFunctionName>float8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>701</TargetTypeId>\r\n      <TargetTypeName>float8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"71\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10105</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3769</TargetTypeId>\r\n      <TargetTypeName>regdictionary</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"72\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10121</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4089</TargetTypeId>\r\n      <TargetTypeName>regnamespace</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"73\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10061</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2203</TargetTypeId>\r\n      <TargetTypeName>regoper</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"74\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10098</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>313</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>21</SourceTypeId>\r\n      <SourceTypeName>int2</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3734</TargetTypeId>\r\n      <TargetTypeName>regconfig</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"75\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10078</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2205</TargetTypeId>\r\n      <TargetTypeName>regclass</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"76\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10085</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4191</TargetTypeId>\r\n      <TargetTypeName>regcollation</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"77\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10115</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4096</TargetTypeId>\r\n      <TargetTypeName>regrole</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"78\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10144</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>78</CastFunctionId>\r\n      <CastFunctionName>char</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>18</TargetTypeId>\r\n      <TargetTypeName>char</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"79\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10122</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4089</TargetTypeId>\r\n      <TargetTypeName>regnamespace</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"80\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10010</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>481</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"81\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10106</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3769</TargetTypeId>\r\n      <TargetTypeName>regdictionary</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"82\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10099</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3734</TargetTypeId>\r\n      <TargetTypeName>regconfig</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"83\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10011</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>314</CastFunctionId>\r\n      <CastFunctionName>int2</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>21</TargetTypeId>\r\n      <TargetTypeName>int2</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"84\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10092</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2206</TargetTypeId>\r\n      <TargetTypeName>regtype</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"85\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10071</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2204</TargetTypeId>\r\n      <TargetTypeName>regoperator</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"86\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10062</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2203</TargetTypeId>\r\n      <TargetTypeName>regoper</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"87\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10046</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>24</TargetTypeId>\r\n      <TargetTypeName>regproc</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"88\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10055</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2202</TargetTypeId>\r\n      <TargetTypeName>regprocedure</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"89\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10034</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2557</CastFunctionId>\r\n      <CastFunctionName>bool</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>16</TargetTypeId>\r\n      <TargetTypeName>bool</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"90\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10014</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1740</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"91\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10039</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"92\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10186</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1683</CastFunctionId>\r\n      <CastFunctionName>bit</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1560</TargetTypeId>\r\n      <TargetTypeName>bit</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"93\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10012</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>318</CastFunctionId>\r\n      <CastFunctionName>float4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>700</TargetTypeId>\r\n      <TargetTypeName>float4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"94\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10013</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>316</CastFunctionId>\r\n      <CastFunctionName>float8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>701</TargetTypeId>\r\n      <TargetTypeName>float8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"95\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10032</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3811</CastFunctionId>\r\n      <CastFunctionName>money</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>23</SourceTypeId>\r\n      <SourceTypeName>int4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>790</TargetTypeId>\r\n      <TargetTypeName>money</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"96\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10048</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>24</SourceTypeId>\r\n      <SourceTypeName>regproc</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"97\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10047</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>24</SourceTypeId>\r\n      <SourceTypeName>regproc</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"98\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10043</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>24</SourceTypeId>\r\n      <SourceTypeName>regproc</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"99\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10049</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>24</SourceTypeId>\r\n      <SourceTypeName>regproc</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2202</TargetTypeId>\r\n      <TargetTypeName>regprocedure</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"100\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10125</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>25</SourceTypeId>\r\n      <SourceTypeName>text</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"101\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10140</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>407</CastFunctionId>\r\n      <CastFunctionName>name</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>25</SourceTypeId>\r\n      <SourceTypeName>text</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>19</TargetTypeId>\r\n      <TargetTypeName>name</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"102\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10137</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>944</CastFunctionId>\r\n      <CastFunctionName>char</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>25</SourceTypeId>\r\n      <SourceTypeName>text</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>18</TargetTypeId>\r\n      <TargetTypeName>char</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"103\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10126</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>25</SourceTypeId>\r\n      <SourceTypeName>text</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"104\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10193</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2896</CastFunctionId>\r\n      <CastFunctionName>xml</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>25</SourceTypeId>\r\n      <SourceTypeName>text</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>142</TargetTypeId>\r\n      <TargetTypeName>xml</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"105\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10109</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1079</CastFunctionId>\r\n      <CastFunctionName>regclass</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>25</SourceTypeId>\r\n      <SourceTypeName>text</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2205</TargetTypeId>\r\n      <TargetTypeName>regclass</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"106\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10074</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2205</TargetTypeId>\r\n      <TargetTypeName>regclass</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"107\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10051</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2202</TargetTypeId>\r\n      <TargetTypeName>regprocedure</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"108\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10095</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3734</TargetTypeId>\r\n      <TargetTypeName>regconfig</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"109\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10058</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2203</TargetTypeId>\r\n      <TargetTypeName>regoper</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"110\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10081</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4191</TargetTypeId>\r\n      <TargetTypeName>regcollation</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"111\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10067</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2204</TargetTypeId>\r\n      <TargetTypeName>regoperator</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"112\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10042</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>24</TargetTypeId>\r\n      <TargetTypeName>regproc</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"113\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10040</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"114\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10111</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4096</TargetTypeId>\r\n      <TargetTypeName>regrole</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"115\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10102</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3769</TargetTypeId>\r\n      <TargetTypeName>regdictionary</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"116\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10088</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2206</TargetTypeId>\r\n      <TargetTypeName>regtype</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"117\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10041</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"118\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10118</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>26</SourceTypeId>\r\n      <SourceTypeName>oid</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4089</TargetTypeId>\r\n      <TargetTypeName>regnamespace</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"119\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>io</Method>\r\n      <ObjectId>10214</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>114</SourceTypeId>\r\n      <SourceTypeName>json</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>3802</TargetTypeId>\r\n      <TargetTypeName>jsonb</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"120\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10202</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>142</SourceTypeId>\r\n      <SourceTypeName>xml</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"121\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10197</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>142</SourceTypeId>\r\n      <SourceTypeName>xml</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"122\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10192</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>142</SourceTypeId>\r\n      <SourceTypeName>xml</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"123\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10145</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>194</SourceTypeId>\r\n      <SourceTypeName>pg_node_tree</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"124\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10165</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4091</CastFunctionId>\r\n      <CastFunctionName>box</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>600</SourceTypeId>\r\n      <SourceTypeName>point</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>603</TargetTypeId>\r\n      <TargetTypeName>box</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"125\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10166</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1532</CastFunctionId>\r\n      <CastFunctionName>point</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>601</SourceTypeId>\r\n      <SourceTypeName>lseg</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>600</TargetTypeId>\r\n      <TargetTypeName>point</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"126\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10167</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1449</CastFunctionId>\r\n      <CastFunctionName>polygon</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>602</SourceTypeId>\r\n      <SourceTypeName>path</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>604</TargetTypeId>\r\n      <TargetTypeName>polygon</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"127\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10168</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1534</CastFunctionId>\r\n      <CastFunctionName>point</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>603</SourceTypeId>\r\n      <SourceTypeName>box</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>600</TargetTypeId>\r\n      <TargetTypeName>point</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"128\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10171</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1479</CastFunctionId>\r\n      <CastFunctionName>circle</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>603</SourceTypeId>\r\n      <SourceTypeName>box</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>718</TargetTypeId>\r\n      <TargetTypeName>circle</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"129\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10169</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1541</CastFunctionId>\r\n      <CastFunctionName>lseg</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>603</SourceTypeId>\r\n      <SourceTypeName>box</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>601</TargetTypeId>\r\n      <TargetTypeName>lseg</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"130\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10170</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1448</CastFunctionId>\r\n      <CastFunctionName>polygon</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>603</SourceTypeId>\r\n      <SourceTypeName>box</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>604</TargetTypeId>\r\n      <TargetTypeName>polygon</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"131\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10172</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1540</CastFunctionId>\r\n      <CastFunctionName>point</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>604</SourceTypeId>\r\n      <SourceTypeName>polygon</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>600</TargetTypeId>\r\n      <TargetTypeName>point</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"132\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10175</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1474</CastFunctionId>\r\n      <CastFunctionName>circle</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>604</SourceTypeId>\r\n      <SourceTypeName>polygon</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>718</TargetTypeId>\r\n      <TargetTypeName>circle</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"133\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10174</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1446</CastFunctionId>\r\n      <CastFunctionName>box</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>604</SourceTypeId>\r\n      <SourceTypeName>polygon</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>603</TargetTypeId>\r\n      <TargetTypeName>box</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"134\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10173</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1447</CastFunctionId>\r\n      <CastFunctionName>path</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>604</SourceTypeId>\r\n      <SourceTypeName>polygon</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>602</TargetTypeId>\r\n      <TargetTypeName>path</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"135\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10194</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>730</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>650</SourceTypeId>\r\n      <SourceTypeName>cidr</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"136\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10199</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>730</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>650</SourceTypeId>\r\n      <SourceTypeName>cidr</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"137\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10189</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>730</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>650</SourceTypeId>\r\n      <SourceTypeName>cidr</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"138\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10181</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>650</SourceTypeId>\r\n      <SourceTypeName>cidr</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>869</TargetTypeId>\r\n      <TargetTypeName>inet</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"139\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10016</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>238</CastFunctionId>\r\n      <CastFunctionName>int2</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>700</SourceTypeId>\r\n      <SourceTypeName>float4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>21</TargetTypeId>\r\n      <TargetTypeName>int2</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"140\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10015</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>653</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>700</SourceTypeId>\r\n      <SourceTypeName>float4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"141\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10018</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>311</CastFunctionId>\r\n      <CastFunctionName>float8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>700</SourceTypeId>\r\n      <SourceTypeName>float4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>701</TargetTypeId>\r\n      <TargetTypeName>float8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"142\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10019</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1742</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>700</SourceTypeId>\r\n      <SourceTypeName>float4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"143\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10017</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>319</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>700</SourceTypeId>\r\n      <SourceTypeName>float4</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"144\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10024</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1743</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>701</SourceTypeId>\r\n      <SourceTypeName>float8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"145\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10020</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>483</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>701</SourceTypeId>\r\n      <SourceTypeName>float8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"146\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10021</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>237</CastFunctionId>\r\n      <CastFunctionName>int2</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>701</SourceTypeId>\r\n      <SourceTypeName>float8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>21</TargetTypeId>\r\n      <TargetTypeName>int2</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"147\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10022</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>317</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>701</SourceTypeId>\r\n      <SourceTypeName>float8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"148\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10023</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>312</CastFunctionId>\r\n      <CastFunctionName>float4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>701</SourceTypeId>\r\n      <SourceTypeName>float8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>700</TargetTypeId>\r\n      <TargetTypeName>float4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"149\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10178</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1544</CastFunctionId>\r\n      <CastFunctionName>polygon</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>718</SourceTypeId>\r\n      <SourceTypeName>circle</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>604</TargetTypeId>\r\n      <TargetTypeName>polygon</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"150\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10176</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1416</CastFunctionId>\r\n      <CastFunctionName>point</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>718</SourceTypeId>\r\n      <SourceTypeName>circle</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>600</TargetTypeId>\r\n      <TargetTypeName>point</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"151\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10177</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1480</CastFunctionId>\r\n      <CastFunctionName>box</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>718</SourceTypeId>\r\n      <SourceTypeName>circle</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>603</TargetTypeId>\r\n      <TargetTypeName>box</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"152\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10180</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4124</CastFunctionId>\r\n      <CastFunctionName>macaddr</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>774</SourceTypeId>\r\n      <SourceTypeName>macaddr8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>829</TargetTypeId>\r\n      <TargetTypeName>macaddr</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"153\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10030</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3823</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>790</SourceTypeId>\r\n      <SourceTypeName>money</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"154\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10179</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4123</CastFunctionId>\r\n      <CastFunctionName>macaddr8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>829</SourceTypeId>\r\n      <SourceTypeName>macaddr</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>774</TargetTypeId>\r\n      <TargetTypeName>macaddr8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"155\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10195</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>730</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>869</SourceTypeId>\r\n      <SourceTypeName>inet</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"156\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10190</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>730</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>869</SourceTypeId>\r\n      <SourceTypeName>inet</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"157\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10182</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1715</CastFunctionId>\r\n      <CastFunctionName>cidr</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>869</SourceTypeId>\r\n      <SourceTypeName>inet</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>650</TargetTypeId>\r\n      <TargetTypeName>cidr</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"158\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10200</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>730</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>869</SourceTypeId>\r\n      <SourceTypeName>inet</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"159\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10204</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>668</CastFunctionId>\r\n      <CastFunctionName>bpchar</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1042</SourceTypeId>\r\n      <SourceTypeName>bpchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"160\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10128</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>401</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1042</SourceTypeId>\r\n      <SourceTypeName>bpchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"161\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10203</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2896</CastFunctionId>\r\n      <CastFunctionName>xml</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1042</SourceTypeId>\r\n      <SourceTypeName>bpchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>142</TargetTypeId>\r\n      <TargetTypeName>xml</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"162\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10127</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>401</CastFunctionId>\r\n      <CastFunctionName>text</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1042</SourceTypeId>\r\n      <SourceTypeName>bpchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"163\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10138</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>944</CastFunctionId>\r\n      <CastFunctionName>char</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1042</SourceTypeId>\r\n      <SourceTypeName>bpchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>18</TargetTypeId>\r\n      <TargetTypeName>char</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"164\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10141</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>409</CastFunctionId>\r\n      <CastFunctionName>name</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1042</SourceTypeId>\r\n      <SourceTypeName>bpchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>19</TargetTypeId>\r\n      <TargetTypeName>name</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"165\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10129</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"166\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10142</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1400</CastFunctionId>\r\n      <CastFunctionName>name</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>19</TargetTypeId>\r\n      <TargetTypeName>name</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"167\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10130</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1042</TargetTypeId>\r\n      <TargetTypeName>bpchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"168\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10198</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2896</CastFunctionId>\r\n      <CastFunctionName>xml</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>142</TargetTypeId>\r\n      <TargetTypeName>xml</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"169\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10110</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1079</CastFunctionId>\r\n      <CastFunctionName>regclass</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2205</TargetTypeId>\r\n      <TargetTypeName>regclass</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"170\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10205</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>669</CastFunctionId>\r\n      <CastFunctionName>varchar</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1043</TargetTypeId>\r\n      <TargetTypeName>varchar</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"171\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10139</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>944</CastFunctionId>\r\n      <CastFunctionName>char</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1043</SourceTypeId>\r\n      <SourceTypeName>varchar</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>18</TargetTypeId>\r\n      <TargetTypeName>char</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"172\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10152</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2024</CastFunctionId>\r\n      <CastFunctionName>timestamp</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1082</SourceTypeId>\r\n      <SourceTypeName>date</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1114</TargetTypeId>\r\n      <TargetTypeName>timestamp</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"173\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10153</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1174</CastFunctionId>\r\n      <CastFunctionName>timestamptz</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1082</SourceTypeId>\r\n      <SourceTypeName>date</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1184</TargetTypeId>\r\n      <TargetTypeName>timestamptz</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"174\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10206</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1968</CastFunctionId>\r\n      <CastFunctionName>time</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1083</SourceTypeId>\r\n      <SourceTypeName>time</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1083</TargetTypeId>\r\n      <TargetTypeName>time</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"175\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10155</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2047</CastFunctionId>\r\n      <CastFunctionName>timetz</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1083</SourceTypeId>\r\n      <SourceTypeName>time</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1266</TargetTypeId>\r\n      <TargetTypeName>timetz</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"176\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10154</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1370</CastFunctionId>\r\n      <CastFunctionName>interval</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1083</SourceTypeId>\r\n      <SourceTypeName>time</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1186</TargetTypeId>\r\n      <TargetTypeName>interval</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"177\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10158</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2028</CastFunctionId>\r\n      <CastFunctionName>timestamptz</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1114</SourceTypeId>\r\n      <SourceTypeName>timestamp</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1184</TargetTypeId>\r\n      <TargetTypeName>timestamptz</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"178\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10156</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2029</CastFunctionId>\r\n      <CastFunctionName>date</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1114</SourceTypeId>\r\n      <SourceTypeName>timestamp</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1082</TargetTypeId>\r\n      <TargetTypeName>date</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"179\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10157</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1316</CastFunctionId>\r\n      <CastFunctionName>time</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1114</SourceTypeId>\r\n      <SourceTypeName>timestamp</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1083</TargetTypeId>\r\n      <TargetTypeName>time</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"180\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10207</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1961</CastFunctionId>\r\n      <CastFunctionName>timestamp</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1114</SourceTypeId>\r\n      <SourceTypeName>timestamp</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1114</TargetTypeId>\r\n      <TargetTypeName>timestamp</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"181\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10159</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1178</CastFunctionId>\r\n      <CastFunctionName>date</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1184</SourceTypeId>\r\n      <SourceTypeName>timestamptz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1082</TargetTypeId>\r\n      <TargetTypeName>date</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"182\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10162</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1388</CastFunctionId>\r\n      <CastFunctionName>timetz</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1184</SourceTypeId>\r\n      <SourceTypeName>timestamptz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1266</TargetTypeId>\r\n      <TargetTypeName>timetz</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"183\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10160</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2019</CastFunctionId>\r\n      <CastFunctionName>time</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1184</SourceTypeId>\r\n      <SourceTypeName>timestamptz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1083</TargetTypeId>\r\n      <TargetTypeName>time</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"184\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10161</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2027</CastFunctionId>\r\n      <CastFunctionName>timestamp</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1184</SourceTypeId>\r\n      <SourceTypeName>timestamptz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1114</TargetTypeId>\r\n      <TargetTypeName>timestamp</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"185\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10208</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1967</CastFunctionId>\r\n      <CastFunctionName>timestamptz</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1184</SourceTypeId>\r\n      <SourceTypeName>timestamptz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1184</TargetTypeId>\r\n      <TargetTypeName>timestamptz</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"186\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10209</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1200</CastFunctionId>\r\n      <CastFunctionName>interval</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1186</SourceTypeId>\r\n      <SourceTypeName>interval</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1186</TargetTypeId>\r\n      <TargetTypeName>interval</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"187\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10163</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1419</CastFunctionId>\r\n      <CastFunctionName>time</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1186</SourceTypeId>\r\n      <SourceTypeName>interval</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1083</TargetTypeId>\r\n      <TargetTypeName>time</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"188\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10164</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2046</CastFunctionId>\r\n      <CastFunctionName>time</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1266</SourceTypeId>\r\n      <SourceTypeName>timetz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1083</TargetTypeId>\r\n      <TargetTypeName>time</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"189\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10210</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1969</CastFunctionId>\r\n      <CastFunctionName>timetz</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1266</SourceTypeId>\r\n      <SourceTypeName>timetz</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1266</TargetTypeId>\r\n      <TargetTypeName>timetz</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"190\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10187</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2076</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1560</SourceTypeId>\r\n      <SourceTypeName>bit</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"191\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10211</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1685</CastFunctionId>\r\n      <CastFunctionName>bit</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1560</SourceTypeId>\r\n      <SourceTypeName>bit</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1560</TargetTypeId>\r\n      <TargetTypeName>bit</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"192\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10183</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>1560</SourceTypeId>\r\n      <SourceTypeName>bit</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1562</TargetTypeId>\r\n      <TargetTypeName>varbit</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"193\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10188</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1684</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1560</SourceTypeId>\r\n      <SourceTypeName>bit</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"194\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10184</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>1562</SourceTypeId>\r\n      <SourceTypeName>varbit</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1560</TargetTypeId>\r\n      <TargetTypeName>bit</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"195\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10212</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1687</CastFunctionId>\r\n      <CastFunctionName>varbit</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1562</SourceTypeId>\r\n      <SourceTypeName>varbit</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1562</TargetTypeId>\r\n      <TargetTypeName>varbit</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"196\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10025</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1779</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"197\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10026</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1783</CastFunctionId>\r\n      <CastFunctionName>int2</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>21</TargetTypeId>\r\n      <TargetTypeName>int2</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"198\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10027</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1744</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"199\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10213</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1703</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"200\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10029</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1746</CastFunctionId>\r\n      <CastFunctionName>float8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>701</TargetTypeId>\r\n      <TargetTypeName>float8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"201\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10031</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3824</CastFunctionId>\r\n      <CastFunctionName>money</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>790</TargetTypeId>\r\n      <TargetTypeName>money</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"202\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10028</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1745</CastFunctionId>\r\n      <CastFunctionName>float4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>1700</SourceTypeId>\r\n      <SourceTypeName>numeric</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>700</TargetTypeId>\r\n      <TargetTypeName>float4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"203\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10057</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2202</SourceTypeId>\r\n      <SourceTypeName>regprocedure</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"204\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10052</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2202</SourceTypeId>\r\n      <SourceTypeName>regprocedure</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"205\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10056</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>2202</SourceTypeId>\r\n      <SourceTypeName>regprocedure</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"206\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10050</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2202</SourceTypeId>\r\n      <SourceTypeName>regprocedure</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>24</TargetTypeId>\r\n      <TargetTypeName>regproc</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"207\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10065</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2203</SourceTypeId>\r\n      <SourceTypeName>regoper</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2204</TargetTypeId>\r\n      <TargetTypeName>regoperator</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"208\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10063</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>2203</SourceTypeId>\r\n      <SourceTypeName>regoper</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"209\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10059</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2203</SourceTypeId>\r\n      <SourceTypeName>regoper</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"210\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10064</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2203</SourceTypeId>\r\n      <SourceTypeName>regoper</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"211\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10073</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2204</SourceTypeId>\r\n      <SourceTypeName>regoperator</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"212\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10068</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2204</SourceTypeId>\r\n      <SourceTypeName>regoperator</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"213\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10072</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>2204</SourceTypeId>\r\n      <SourceTypeName>regoperator</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"214\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10066</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2204</SourceTypeId>\r\n      <SourceTypeName>regoperator</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>2203</TargetTypeId>\r\n      <TargetTypeName>regoper</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"215\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10079</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>2205</SourceTypeId>\r\n      <SourceTypeName>regclass</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"216\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10075</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2205</SourceTypeId>\r\n      <SourceTypeName>regclass</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"217\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10080</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2205</SourceTypeId>\r\n      <SourceTypeName>regclass</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"218\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10093</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>2206</SourceTypeId>\r\n      <SourceTypeName>regtype</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"219\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10094</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2206</SourceTypeId>\r\n      <SourceTypeName>regtype</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"220\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10089</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>2206</SourceTypeId>\r\n      <SourceTypeName>regtype</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"221\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10146</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3361</SourceTypeId>\r\n      <SourceTypeName>pg_ndistinct</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>17</TargetTypeId>\r\n      <TargetTypeName>bytea</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"222\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>io</Method>\r\n      <ObjectId>10147</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3361</SourceTypeId>\r\n      <SourceTypeName>pg_ndistinct</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"223\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10148</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3402</SourceTypeId>\r\n      <SourceTypeName>pg_dependencies</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>17</TargetTypeId>\r\n      <TargetTypeName>bytea</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"224\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>io</Method>\r\n      <ObjectId>10149</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3402</SourceTypeId>\r\n      <SourceTypeName>pg_dependencies</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"225\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10096</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3734</SourceTypeId>\r\n      <SourceTypeName>regconfig</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"226\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10100</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3734</SourceTypeId>\r\n      <SourceTypeName>regconfig</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"227\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10101</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3734</SourceTypeId>\r\n      <SourceTypeName>regconfig</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"228\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10103</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3769</SourceTypeId>\r\n      <SourceTypeName>regdictionary</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"229\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10108</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3769</SourceTypeId>\r\n      <SourceTypeName>regdictionary</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"230\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10107</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3769</SourceTypeId>\r\n      <SourceTypeName>regdictionary</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"231\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>io</Method>\r\n      <ObjectId>10215</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>114</TargetTypeId>\r\n      <TargetTypeName>json</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"232\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10218</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3450</CastFunctionId>\r\n      <CastFunctionName>int2</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>21</TargetTypeId>\r\n      <TargetTypeName>int2</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"233\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10220</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3452</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"234\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10219</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3451</CastFunctionId>\r\n      <CastFunctionName>int4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"235\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10216</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3556</CastFunctionId>\r\n      <CastFunctionName>bool</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>16</TargetTypeId>\r\n      <TargetTypeName>bool</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"236\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10221</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3453</CastFunctionId>\r\n      <CastFunctionName>float4</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>700</TargetTypeId>\r\n      <TargetTypeName>float4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"237\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10217</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>3449</CastFunctionId>\r\n      <CastFunctionName>numeric</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>1700</TargetTypeId>\r\n      <TargetTypeName>numeric</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"238\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10222</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>2580</CastFunctionId>\r\n      <CastFunctionName>float8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3802</SourceTypeId>\r\n      <SourceTypeName>jsonb</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>701</TargetTypeId>\r\n      <TargetTypeName>float8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"239\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10223</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4281</CastFunctionId>\r\n      <CastFunctionName>int4multirange</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3904</SourceTypeId>\r\n      <SourceTypeName>int4range</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4451</TargetTypeId>\r\n      <TargetTypeName>int4multirange</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"240\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10225</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4284</CastFunctionId>\r\n      <CastFunctionName>nummultirange</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3906</SourceTypeId>\r\n      <SourceTypeName>numrange</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4532</TargetTypeId>\r\n      <TargetTypeName>nummultirange</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"241\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10227</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4287</CastFunctionId>\r\n      <CastFunctionName>tsmultirange</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3908</SourceTypeId>\r\n      <SourceTypeName>tsrange</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4533</TargetTypeId>\r\n      <TargetTypeName>tsmultirange</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"242\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10228</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4290</CastFunctionId>\r\n      <CastFunctionName>tstzmultirange</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3910</SourceTypeId>\r\n      <SourceTypeName>tstzrange</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4534</TargetTypeId>\r\n      <TargetTypeName>tstzmultirange</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"243\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10226</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4293</CastFunctionId>\r\n      <CastFunctionName>datemultirange</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3912</SourceTypeId>\r\n      <SourceTypeName>daterange</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4535</TargetTypeId>\r\n      <TargetTypeName>datemultirange</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"244\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10224</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>4296</CastFunctionId>\r\n      <CastFunctionName>int8multirange</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>3926</SourceTypeId>\r\n      <SourceTypeName>int8range</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>4536</TargetTypeId>\r\n      <TargetTypeName>int8multirange</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"245\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10124</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>4089</SourceTypeId>\r\n      <SourceTypeName>regnamespace</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"246\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10123</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>4089</SourceTypeId>\r\n      <SourceTypeName>regnamespace</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"247\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10119</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>4089</SourceTypeId>\r\n      <SourceTypeName>regnamespace</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"248\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10117</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>4096</SourceTypeId>\r\n      <SourceTypeName>regrole</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"249\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10112</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>4096</SourceTypeId>\r\n      <SourceTypeName>regrole</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"250\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10116</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>4096</SourceTypeId>\r\n      <SourceTypeName>regrole</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"251\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10086</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>1288</CastFunctionId>\r\n      <CastFunctionName>int8</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>4191</SourceTypeId>\r\n      <SourceTypeName>regcollation</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>20</TargetTypeId>\r\n      <TargetTypeName>int8</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"252\" parent=\"2\">\r\n      <Context>assignment</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10087</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>4191</SourceTypeId>\r\n      <SourceTypeName>regcollation</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>23</TargetTypeId>\r\n      <TargetTypeName>int4</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"253\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10082</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>4191</SourceTypeId>\r\n      <SourceTypeName>regcollation</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>26</TargetTypeId>\r\n      <TargetTypeName>oid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"254\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>binary</Method>\r\n      <ObjectId>10150</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>5017</SourceTypeId>\r\n      <SourceTypeName>pg_mcv_list</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>17</TargetTypeId>\r\n      <TargetTypeName>bytea</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"255\" parent=\"2\">\r\n      <Context>implicit</Context>\r\n      <Method>io</Method>\r\n      <ObjectId>10151</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <SourceTypeId>5017</SourceTypeId>\r\n      <SourceTypeName>pg_mcv_list</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>25</TargetTypeId>\r\n      <TargetTypeName>text</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <cast id=\"256\" parent=\"2\">\r\n      <Context>explicit</Context>\r\n      <Method>function</Method>\r\n      <ObjectId>10036</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <CastFunctionId>5071</CastFunctionId>\r\n      <CastFunctionName>xid</CastFunctionName>\r\n      <CastFunctionParentName>pg_catalog</CastFunctionParentName>\r\n      <SourceTypeId>5069</SourceTypeId>\r\n      <SourceTypeName>xid8</SourceTypeName>\r\n      <SourceTypeParentName>pg_catalog</SourceTypeParentName>\r\n      <TargetTypeId>28</TargetTypeId>\r\n      <TargetTypeName>xid</TargetTypeName>\r\n      <TargetTypeParentName>pg_catalog</TargetTypeParentName>\r\n    </cast>\r\n    <extension id=\"257\" parent=\"2\" name=\"plpgsql\">\r\n      <Comment>PL/pgSQL procedural language</Comment>\r\n      <ObjectId>13564</ObjectId>\r\n      <StateNumber>684</StateNumber>\r\n      <Version>1.0</Version>\r\n      <ExtSchemaId>11</ExtSchemaId>\r\n      <ExtSchemaName>pg_catalog</ExtSchemaName>\r\n      <MemberIds>13565\r\n13566\r\n13567\r\n13568</MemberIds>\r\n    </extension>\r\n    <language id=\"258\" parent=\"2\" name=\"c\">\r\n      <Comment>dynamically-loaded C functions</Comment>\r\n      <ObjectId>13</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <ValidatorName>fmgr_c_validator</ValidatorName>\r\n      <ValidatorSchema>pg_catalog</ValidatorSchema>\r\n    </language>\r\n    <language id=\"259\" parent=\"2\" name=\"internal\">\r\n      <Comment>built-in functions</Comment>\r\n      <ObjectId>12</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <ValidatorName>fmgr_internal_validator</ValidatorName>\r\n      <ValidatorSchema>pg_catalog</ValidatorSchema>\r\n    </language>\r\n    <language id=\"260\" parent=\"2\" name=\"plpgsql\">\r\n      <Comment>PL/pgSQL procedural language</Comment>\r\n      <HandlerName>plpgsql_call_handler</HandlerName>\r\n      <HandlerSchema>pg_catalog</HandlerSchema>\r\n      <InlineHandlerName>plpgsql_inline_handler</InlineHandlerName>\r\n      <InlineHandlerSchema>pg_catalog</InlineHandlerSchema>\r\n      <ObjectId>13568</ObjectId>\r\n      <StateNumber>684</StateNumber>\r\n      <Trusted>1</Trusted>\r\n      <ValidatorName>plpgsql_validator</ValidatorName>\r\n      <ValidatorSchema>pg_catalog</ValidatorSchema>\r\n    </language>\r\n    <language id=\"261\" parent=\"2\" name=\"sql\">\r\n      <Comment>SQL-language functions</Comment>\r\n      <ObjectId>14</ObjectId>\r\n      <StateNumber>1</StateNumber>\r\n      <Trusted>1</Trusted>\r\n      <ValidatorName>fmgr_sql_validator</ValidatorName>\r\n      <ValidatorSchema>pg_catalog</ValidatorSchema>\r\n    </language>\r\n    <schema id=\"262\" parent=\"2\" name=\"information_schema\">\r\n      <ObjectId>13212</ObjectId>\r\n      <StateNumber>530</StateNumber>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </schema>\r\n    <schema id=\"263\" parent=\"2\" name=\"pg_catalog\">\r\n      <Comment>system catalog schema</Comment>\r\n      <ObjectId>11</ObjectId>\r\n      <StateNumber>524</StateNumber>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </schema>\r\n    <schema id=\"264\" parent=\"2\" name=\"public\">\r\n      <Comment>standard public schema</Comment>\r\n      <Current>1</Current>\r\n      <IntrospectionStateNumber>740</IntrospectionStateNumber>\r\n      <LastIntrospectionLocalTimestamp>2024-01-10.12:17:01</LastIntrospectionLocalTimestamp>\r\n      <ObjectId>2200</ObjectId>\r\n      <StateNumber>524</StateNumber>\r\n      <OwnerName>pg_database_owner</OwnerName>\r\n    </schema>\r\n    <sequence id=\"265\" parent=\"264\" name=\"graphs_id_seq\">\r\n      <DasType>integer|0s</DasType>\r\n      <ObjectId>16390</ObjectId>\r\n      <SequenceIdentity>1</SequenceIdentity>\r\n      <StartValue>1</StartValue>\r\n      <StateNumber>734</StateNumber>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </sequence>\r\n    <table id=\"266\" parent=\"264\" name=\"SequelizeMeta\">\r\n      <ObjectId>16385</ObjectId>\r\n      <StateNumber>733</StateNumber>\r\n      <AccessMethodId>2</AccessMethodId>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </table>\r\n    <table id=\"267\" parent=\"264\" name=\"graphs\">\r\n      <ObjectId>16391</ObjectId>\r\n      <StateNumber>734</StateNumber>\r\n      <AccessMethodId>2</AccessMethodId>\r\n      <OwnerName>nexabuild</OwnerName>\r\n    </table>\r\n    <column id=\"268\" parent=\"266\" name=\"name\">\r\n      <DasType>varchar(255)|0s</DasType>\r\n      <NotNull>1</NotNull>\r\n      <Position>1</Position>\r\n      <StateNumber>733</StateNumber>\r\n      <TypeId>1043</TypeId>\r\n    </column>\r\n    <index id=\"269\" parent=\"266\" name=\"SequelizeMeta_pkey\">\r\n      <ColNames>name</ColNames>\r\n      <NameSurrogate>1</NameSurrogate>\r\n      <ObjectId>16388</ObjectId>\r\n      <Primary>1</Primary>\r\n      <StateNumber>733</StateNumber>\r\n      <Unique>1</Unique>\r\n      <AccessMethodId>403</AccessMethodId>\r\n      <CollationNames>default</CollationNames>\r\n      <CollationIds>100</CollationIds>\r\n      <CollationParentNames>pg_catalog</CollationParentNames>\r\n    </index>\r\n    <key id=\"270\" parent=\"266\" name=\"SequelizeMeta_pkey\">\r\n      <NameSurrogate>1</NameSurrogate>\r\n      <ObjectId>16389</ObjectId>\r\n      <Primary>1</Primary>\r\n      <StateNumber>733</StateNumber>\r\n      <UnderlyingIndexId>16388</UnderlyingIndexId>\r\n    </key>\r\n    <column id=\"271\" parent=\"267\" name=\"id\">\r\n      <DasType>integer|0s</DasType>\r\n      <DefaultExpression>nextval(&apos;graphs_id_seq&apos;::regclass)</DefaultExpression>\r\n      <NotNull>1</NotNull>\r\n      <Position>1</Position>\r\n      <StateNumber>734</StateNumber>\r\n      <SequenceId>16390</SequenceId>\r\n      <TypeId>23</TypeId>\r\n    </column>\r\n    <column id=\"272\" parent=\"267\" name=\"data\">\r\n      <DasType>text|0s</DasType>\r\n      <Position>2</Position>\r\n      <StateNumber>734</StateNumber>\r\n      <TypeId>25</TypeId>\r\n    </column>\r\n    <column id=\"273\" parent=\"267\" name=\"createdAt\">\r\n      <DasType>timestamp with time zone|0s</DasType>\r\n      <NotNull>1</NotNull>\r\n      <Position>3</Position>\r\n      <StateNumber>734</StateNumber>\r\n      <TypeId>1184</TypeId>\r\n    </column>\r\n    <column id=\"274\" parent=\"267\" name=\"updatedAt\">\r\n      <DasType>timestamp with time zone|0s</DasType>\r\n      <NotNull>1</NotNull>\r\n      <Position>4</Position>\r\n      <StateNumber>734</StateNumber>\r\n      <TypeId>1184</TypeId>\r\n    </column>\r\n    <index id=\"275\" parent=\"267\" name=\"graphs_pkey\">\r\n      <ColNames>id</ColNames>\r\n      <NameSurrogate>1</NameSurrogate>\r\n      <ObjectId>16397</ObjectId>\r\n      <Primary>1</Primary>\r\n      <StateNumber>734</StateNumber>\r\n      <Unique>1</Unique>\r\n      <AccessMethodId>403</AccessMethodId>\r\n    </index>\r\n    <key id=\"276\" parent=\"267\" name=\"graphs_pkey\">\r\n      <NameSurrogate>1</NameSurrogate>\r\n      <ObjectId>16398</ObjectId>\r\n      <Primary>1</Primary>\r\n      <StateNumber>734</StateNumber>\r\n      <UnderlyingIndexId>16397</UnderlyingIndexId>\r\n    </key>\r\n  </database-model>\r\n</dataSource>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml b/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml
--- a/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214.xml	(date 1713648847766)
@@ -1,7 +1,1393 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <dataSource name="nexabuild@localhost">
   <database-model serializer="dbm" dbms="POSTGRES" family-id="POSTGRES" format-version="4.51">
-    <root id="1"/>
+    <root id="1">
+      <DateStyle>mdy</DateStyle>
+      <IntrospectionStateNumber>747</IntrospectionStateNumber>
+      <ServerVersion>16.1</ServerVersion>
+      <StartupTime>1713537024</StartupTime>
+      <TimeZones>true ACDT
+true ACSST
+false ACST
+false ACT
+false ACWST
+true ADT
+true AEDT
+true AESST
+false AEST
+false AFT
+true AKDT
+false AKST
+true ALMST
+false ALMT
+false AMST
+false AMT
+false ANAST
+false ANAT
+false ARST
+false ART
+false AST
+true AWSST
+false AWST
+true AZOST
+false AZOT
+false AZST
+false AZT
+false Africa/Abidjan
+false Africa/Accra
+false Africa/Addis_Ababa
+false Africa/Algiers
+false Africa/Asmara
+false Africa/Asmera
+false Africa/Bamako
+false Africa/Bangui
+false Africa/Banjul
+false Africa/Bissau
+false Africa/Blantyre
+false Africa/Brazzaville
+false Africa/Bujumbura
+false Africa/Cairo
+false Africa/Casablanca
+true Africa/Ceuta
+false Africa/Conakry
+false Africa/Dakar
+false Africa/Dar_es_Salaam
+false Africa/Djibouti
+false Africa/Douala
+false Africa/El_Aaiun
+false Africa/Freetown
+false Africa/Gaborone
+false Africa/Harare
+false Africa/Johannesburg
+false Africa/Juba
+false Africa/Kampala
+false Africa/Khartoum
+false Africa/Kigali
+false Africa/Kinshasa
+false Africa/Lagos
+false Africa/Libreville
+false Africa/Lome
+false Africa/Luanda
+false Africa/Lubumbashi
+false Africa/Lusaka
+false Africa/Malabo
+false Africa/Maputo
+false Africa/Maseru
+false Africa/Mbabane
+false Africa/Mogadishu
+false Africa/Monrovia
+false Africa/Nairobi
+false Africa/Ndjamena
+false Africa/Niamey
+false Africa/Nouakchott
+false Africa/Ouagadougou
+false Africa/Porto-Novo
+false Africa/Sao_Tome
+false Africa/Timbuktu
+false Africa/Tripoli
+false Africa/Tunis
+false Africa/Windhoek
+true America/Adak
+true America/Anchorage
+false America/Anguilla
+false America/Antigua
+false America/Araguaina
+false America/Argentina/Buenos_Aires
+false America/Argentina/Catamarca
+false America/Argentina/ComodRivadavia
+false America/Argentina/Cordoba
+false America/Argentina/Jujuy
+false America/Argentina/La_Rioja
+false America/Argentina/Mendoza
+false America/Argentina/Rio_Gallegos
+false America/Argentina/Salta
+false America/Argentina/San_Juan
+false America/Argentina/San_Luis
+false America/Argentina/Tucuman
+false America/Argentina/Ushuaia
+false America/Aruba
+false America/Asuncion
+false America/Atikokan
+true America/Atka
+false America/Bahia
+false America/Bahia_Banderas
+false America/Barbados
+false America/Belem
+false America/Belize
+false America/Blanc-Sablon
+false America/Boa_Vista
+false America/Bogota
+true America/Boise
+false America/Buenos_Aires
+true America/Cambridge_Bay
+false America/Campo_Grande
+false America/Cancun
+false America/Caracas
+false America/Catamarca
+false America/Cayenne
+false America/Cayman
+true America/Chicago
+false America/Chihuahua
+true America/Ciudad_Juarez
+false America/Coral_Harbour
+false America/Cordoba
+false America/Costa_Rica
+false America/Creston
+false America/Cuiaba
+false America/Curacao
+false America/Danmarkshavn
+false America/Dawson
+false America/Dawson_Creek
+true America/Denver
+true America/Detroit
+false America/Dominica
+true America/Edmonton
+false America/Eirunepe
+false America/El_Salvador
+true America/Ensenada
+false America/Fort_Nelson
+true America/Fort_Wayne
+false America/Fortaleza
+true America/Glace_Bay
+true America/Godthab
+true America/Goose_Bay
+true America/Grand_Turk
+false America/Grenada
+false America/Guadeloupe
+false America/Guatemala
+false America/Guayaquil
+false America/Guyana
+true America/Halifax
+true America/Havana
+false America/Hermosillo
+true America/Indiana/Indianapolis
+true America/Indiana/Knox
+true America/Indiana/Marengo
+true America/Indiana/Petersburg
+true America/Indiana/Tell_City
+true America/Indiana/Vevay
+true America/Indiana/Vincennes
+true America/Indiana/Winamac
+true America/Indianapolis
+true America/Inuvik
+true America/Iqaluit
+false America/Jamaica
+false America/Jujuy
+true America/Juneau
+true America/Kentucky/Louisville
+true America/Kentucky/Monticello
+true America/Knox_IN
+false America/Kralendijk
+false America/La_Paz
+false America/Lima
+true America/Los_Angeles
+true America/Louisville
+false America/Lower_Princes
+false America/Maceio
+false America/Managua
+false America/Manaus
+false America/Marigot
+false America/Martinique
+true America/Matamoros
+false America/Mazatlan
+false America/Mendoza
+true America/Menominee
+false America/Merida
+true America/Metlakatla
+false America/Mexico_City
+true America/Miquelon
+true America/Moncton
+false America/Monterrey
+false America/Montevideo
+true America/Montreal
+false America/Montserrat
+true America/Nassau
+true America/New_York
+true America/Nipigon
+true America/Nome
+false America/Noronha
+true America/North_Dakota/Beulah
+true America/North_Dakota/Center
+true America/North_Dakota/New_Salem
+true America/Nuuk
+true America/Ojinaga
+false America/Panama
+true America/Pangnirtung
+false America/Paramaribo
+false America/Phoenix
+true America/Port-au-Prince
+false America/Port_of_Spain
+false America/Porto_Acre
+false America/Porto_Velho
+false America/Puerto_Rico
+false America/Punta_Arenas
+true America/Rainy_River
+true America/Rankin_Inlet
+false America/Recife
+false America/Regina
+true America/Resolute
+false America/Rio_Branco
+false America/Rosario
+true America/Santa_Isabel
+false America/Santarem
+false America/Santiago
+false America/Santo_Domingo
+false America/Sao_Paulo
+true America/Scoresbysund
+true America/Shiprock
+true America/Sitka
+false America/St_Barthelemy
+true America/St_Johns
+false America/St_Kitts
+false America/St_Lucia
+false America/St_Thomas
+false America/St_Vincent
+false America/Swift_Current
+false America/Tegucigalpa
+true America/Thule
+true America/Thunder_Bay
+true America/Tijuana
+true America/Toronto
+false America/Tortola
+true America/Vancouver
+false America/Virgin
+false America/Whitehorse
+true America/Winnipeg
+true America/Yakutat
+true America/Yellowknife
+false Antarctica/Casey
+false Antarctica/Davis
+false Antarctica/DumontDUrville
+false Antarctica/Macquarie
+false Antarctica/Mawson
+false Antarctica/McMurdo
+false Antarctica/Palmer
+false Antarctica/Rothera
+false Antarctica/South_Pole
+false Antarctica/Syowa
+true Antarctica/Troll
+false Antarctica/Vostok
+true Arctic/Longyearbyen
+false Asia/Aden
+false Asia/Almaty
+false Asia/Amman
+false Asia/Anadyr
+false Asia/Aqtau
+false Asia/Aqtobe
+false Asia/Ashgabat
+false Asia/Ashkhabad
+false Asia/Atyrau
+false Asia/Baghdad
+false Asia/Bahrain
+false Asia/Baku
+false Asia/Bangkok
+false Asia/Barnaul
+true Asia/Beirut
+false Asia/Bishkek
+false Asia/Brunei
+false Asia/Calcutta
+false Asia/Chita
+false Asia/Choibalsan
+false Asia/Chongqing
+false Asia/Chungking
+false Asia/Colombo
+false Asia/Dacca
+false Asia/Damascus
+false Asia/Dhaka
+false Asia/Dili
+false Asia/Dubai
+false Asia/Dushanbe
+true Asia/Famagusta
+true Asia/Gaza
+false Asia/Harbin
+true Asia/Hebron
+false Asia/Ho_Chi_Minh
+false Asia/Hong_Kong
+false Asia/Hovd
+false Asia/Irkutsk
+false Asia/Istanbul
+false Asia/Jakarta
+false Asia/Jayapura
+true Asia/Jerusalem
+false Asia/Kabul
+false Asia/Kamchatka
+false Asia/Karachi
+false Asia/Kashgar
+false Asia/Kathmandu
+false Asia/Katmandu
+false Asia/Khandyga
+false Asia/Kolkata
+false Asia/Krasnoyarsk
+false Asia/Kuala_Lumpur
+false Asia/Kuching
+false Asia/Kuwait
+false Asia/Macao
+false Asia/Macau
+false Asia/Magadan
+false Asia/Makassar
+false Asia/Manila
+false Asia/Muscat
+true Asia/Nicosia
+false Asia/Novokuznetsk
+false Asia/Novosibirsk
+false Asia/Omsk
+false Asia/Oral
+false Asia/Phnom_Penh
+false Asia/Pontianak
+false Asia/Pyongyang
+false Asia/Qatar
+false Asia/Qostanay
+false Asia/Qyzylorda
+false Asia/Rangoon
+false Asia/Riyadh
+false Asia/Saigon
+false Asia/Sakhalin
+false Asia/Samarkand
+false Asia/Seoul
+false Asia/Shanghai
+false Asia/Singapore
+false Asia/Srednekolymsk
+false Asia/Taipei
+false Asia/Tashkent
+false Asia/Tbilisi
+false Asia/Tehran
+true Asia/Tel_Aviv
+false Asia/Thimbu
+false Asia/Thimphu
+false Asia/Tokyo
+false Asia/Tomsk
+false Asia/Ujung_Pandang
+false Asia/Ulaanbaatar
+false Asia/Ulan_Bator
+false Asia/Urumqi
+false Asia/Ust-Nera
+false Asia/Vientiane
+false Asia/Vladivostok
+false Asia/Yakutsk
+false Asia/Yangon
+false Asia/Yekaterinburg
+false Asia/Yerevan
+true Atlantic/Azores
+true Atlantic/Bermuda
+true Atlantic/Canary
+false Atlantic/Cape_Verde
+true Atlantic/Faeroe
+true Atlantic/Faroe
+true Atlantic/Jan_Mayen
+true Atlantic/Madeira
+false Atlantic/Reykjavik
+false Atlantic/South_Georgia
+false Atlantic/St_Helena
+false Atlantic/Stanley
+false Australia/ACT
+false Australia/Adelaide
+false Australia/Brisbane
+false Australia/Broken_Hill
+false Australia/Canberra
+false Australia/Currie
+false Australia/Darwin
+false Australia/Eucla
+false Australia/Hobart
+false Australia/LHI
+false Australia/Lindeman
+false Australia/Lord_Howe
+false Australia/Melbourne
+false Australia/NSW
+false Australia/North
+false Australia/Perth
+false Australia/Queensland
+false Australia/South
+false Australia/Sydney
+false Australia/Tasmania
+false Australia/Victoria
+false Australia/West
+false Australia/Yancowinna
+true BDST
+false BDT
+false BNT
+false BORT
+false BOT
+false BRA
+true BRST
+false BRT
+true BST
+false BTT
+false Brazil/Acre
+false Brazil/DeNoronha
+false Brazil/East
+false Brazil/West
+true CADT
+false CAST
+false CCT
+true CDT
+true CEST
+false CET
+true CETDST
+true CHADT
+false CHAST
+false CHUT
+false CKT
+true CLST
+false CLT
+false COT
+false CST
+true CST6CDT
+false CXT
+true Canada/Atlantic
+true Canada/Central
+true Canada/Eastern
+true Canada/Mountain
+true Canada/Newfoundland
+true Canada/Pacific
+false Canada/Saskatchewan
+false Canada/Yukon
+false Chile/Continental
+false Chile/EasterIsland
+true Cuba
+false DAVT
+false DDUT
+false EASST
+false EAST
+false EAT
+true EDT
+true EEST
+false EET
+true EETDST
+true EGST
+false EGT
+false EST
+true EST5EDT
+false Egypt
+false Eire
+false Etc/GMT
+false Etc/GMT+0
+false Etc/GMT+1
+false Etc/GMT+10
+false Etc/GMT+11
+false Etc/GMT+12
+false Etc/GMT+2
+false Etc/GMT+3
+false Etc/GMT+4
+false Etc/GMT+5
+false Etc/GMT+6
+false Etc/GMT+7
+false Etc/GMT+8
+false Etc/GMT+9
+false Etc/GMT-0
+false Etc/GMT-1
+false Etc/GMT-10
+false Etc/GMT-11
+false Etc/GMT-12
+false Etc/GMT-13
+false Etc/GMT-14
+false Etc/GMT-2
+false Etc/GMT-3
+false Etc/GMT-4
+false Etc/GMT-5
+false Etc/GMT-6
+false Etc/GMT-7
+false Etc/GMT-8
+false Etc/GMT-9
+false Etc/GMT0
+false Etc/Greenwich
+false Etc/UCT
+false Etc/UTC
+false Etc/Universal
+false Etc/Zulu
+true Europe/Amsterdam
+true Europe/Andorra
+false Europe/Astrakhan
+true Europe/Athens
+true Europe/Belfast
+true Europe/Belgrade
+true Europe/Berlin
+true Europe/Bratislava
+true Europe/Brussels
+true Europe/Bucharest
+true Europe/Budapest
+true Europe/Busingen
+true Europe/Chisinau
+true Europe/Copenhagen
+false Europe/Dublin
+true Europe/Gibraltar
+true Europe/Guernsey
+true Europe/Helsinki
+true Europe/Isle_of_Man
+false Europe/Istanbul
+true Europe/Jersey
+false Europe/Kaliningrad
+true Europe/Kiev
+false Europe/Kirov
+true Europe/Kyiv
+true Europe/Lisbon
+true Europe/Ljubljana
+true Europe/London
+true Europe/Luxembourg
+true Europe/Madrid
+true Europe/Malta
+true Europe/Mariehamn
+false Europe/Minsk
+true Europe/Monaco
+false Europe/Moscow
+true Europe/Nicosia
+true Europe/Oslo
+true Europe/Paris
+true Europe/Podgorica
+true Europe/Prague
+true Europe/Riga
+true Europe/Rome
+false Europe/Samara
+true Europe/San_Marino
+true Europe/Sarajevo
+false Europe/Saratov
+false Europe/Simferopol
+true Europe/Skopje
+true Europe/Sofia
+true Europe/Stockholm
+true Europe/Tallinn
+true Europe/Tirane
+true Europe/Tiraspol
+false Europe/Ulyanovsk
+true Europe/Uzhgorod
+true Europe/Vaduz
+true Europe/Vatican
+true Europe/Vienna
+true Europe/Vilnius
+false Europe/Volgograd
+true Europe/Warsaw
+true Europe/Zagreb
+true Europe/Zaporozhye
+true Europe/Zurich
+false FET
+true FJST
+false FJT
+false FKST
+false FKT
+true FNST
+false FNT
+false Factory
+false GALT
+false GAMT
+true GB
+true GB-Eire
+false GEST
+false GET
+false GFT
+false GILT
+false GMT
+false GMT+0
+false GMT-0
+false GMT0
+false GYT
+false Greenwich
+false HKT
+false HST
+false Hongkong
+false ICT
+true IDT
+false IOT
+false IRKST
+false IRKT
+false IRT
+false IST
+false Iceland
+false Indian/Antananarivo
+false Indian/Chagos
+false Indian/Christmas
+false Indian/Cocos
+false Indian/Comoro
+false Indian/Kerguelen
+false Indian/Mahe
+false Indian/Maldives
+false Indian/Mauritius
+false Indian/Mayotte
+false Indian/Reunion
+false Iran
+true Israel
+false JAYT
+false JST
+false Jamaica
+false Japan
+true KDT
+true KGST
+false KGT
+false KOST
+false KRAST
+false KRAT
+false KST
+false Kwajalein
+false LHDT
+false LHST
+false LIGT
+false LINT
+false LKT
+false Libya
+false MAGST
+false MAGT
+false MART
+false MAWT
+true MDT
+true MEST
+true MESZ
+true MET
+true METDST
+false MEZ
+false MHT
+false MMT
+false MPT
+true MSD
+false MSK
+false MST
+true MST7MDT
+true MUST
+false MUT
+false MVT
+false MYT
+true Mexico/BajaNorte
+false Mexico/BajaSur
+false Mexico/General
+true NDT
+false NFT
+false NOVST
+false NOVT
+false NPT
+false NST
+false NUT
+false NZ
+false NZ-CHAT
+true NZDT
+false NZST
+false NZT
+true Navajo
+false OMSST
+false OMST
+true PDT
+false PET
+false PETST
+false PETT
+false PGT
+false PHT
+true PKST
+false PKT
+true PMDT
+false PMST
+false PONT
+false PRC
+false PST
+true PST8PDT
+false PWT
+true PYST
+false PYT
+false Pacific/Apia
+false Pacific/Auckland
+false Pacific/Bougainville
+false Pacific/Chatham
+false Pacific/Chuuk
+false Pacific/Easter
+false Pacific/Efate
+false Pacific/Enderbury
+false Pacific/Fakaofo
+false Pacific/Fiji
+false Pacific/Funafuti
+false Pacific/Galapagos
+false Pacific/Gambier
+false Pacific/Guadalcanal
+false Pacific/Guam
+false Pacific/Honolulu
+false Pacific/Johnston
+false Pacific/Kanton
+false Pacific/Kiritimati
+false Pacific/Kosrae
+false Pacific/Kwajalein
+false Pacific/Majuro
+false Pacific/Marquesas
+false Pacific/Midway
+false Pacific/Nauru
+false Pacific/Niue
+false Pacific/Norfolk
+false Pacific/Noumea
+false Pacific/Pago_Pago
+false Pacific/Palau
+false Pacific/Pitcairn
+false Pacific/Pohnpei
+false Pacific/Ponape
+false Pacific/Port_Moresby
+false Pacific/Rarotonga
+false Pacific/Saipan
+false Pacific/Samoa
+false Pacific/Tahiti
+false Pacific/Tarawa
+false Pacific/Tongatapu
+false Pacific/Truk
+false Pacific/Wake
+false Pacific/Wallis
+false Pacific/Yap
+true Poland
+true Portugal
+false RET
+false ROC
+false ROK
+true SADT
+false SAST
+false SCT
+false SGT
+false Singapore
+false TAHT
+false TFT
+false TJT
+false TKT
+false TMT
+false TOT
+false TRUT
+false TVT
+false Turkey
+false UCT
+true ULAST
+false ULAT
+true US/Alaska
+true US/Aleutian
+false US/Arizona
+true US/Central
+true US/East-Indiana
+true US/Eastern
+false US/Hawaii
+true US/Indiana-Starke
+true US/Michigan
+true US/Mountain
+true US/Pacific
+false US/Samoa
+false UT
+false UTC
+true UYST
+false UYT
+true UZST
+false UZT
+false Universal
+false VET
+false VLAST
+false VLAT
+false VOLT
+false VUT
+false W-SU
+true WADT
+false WAKT
+false WAST
+false WAT
+true WDT
+true WET
+true WETDST
+false WFT
+true WGST
+false WGT
+false XJT
+false YAKST
+false YAKT
+false YAPT
+true YEKST
+false YEKT
+false Z
+false Zulu
+false localtime
+false posix/Africa/Abidjan
+false posix/Africa/Accra
+false posix/Africa/Addis_Ababa
+false posix/Africa/Algiers
+false posix/Africa/Asmara
+false posix/Africa/Asmera
+false posix/Africa/Bamako
+false posix/Africa/Bangui
+false posix/Africa/Banjul
+false posix/Africa/Bissau
+false posix/Africa/Blantyre
+false posix/Africa/Brazzaville
+false posix/Africa/Bujumbura
+false posix/Africa/Cairo
+false posix/Africa/Casablanca
+true posix/Africa/Ceuta
+false posix/Africa/Conakry
+false posix/Africa/Dakar
+false posix/Africa/Dar_es_Salaam
+false posix/Africa/Djibouti
+false posix/Africa/Douala
+false posix/Africa/El_Aaiun
+false posix/Africa/Freetown
+false posix/Africa/Gaborone
+false posix/Africa/Harare
+false posix/Africa/Johannesburg
+false posix/Africa/Juba
+false posix/Africa/Kampala
+false posix/Africa/Khartoum
+false posix/Africa/Kigali
+false posix/Africa/Kinshasa
+false posix/Africa/Lagos
+false posix/Africa/Libreville
+false posix/Africa/Lome
+false posix/Africa/Luanda
+false posix/Africa/Lubumbashi
+false posix/Africa/Lusaka
+false posix/Africa/Malabo
+false posix/Africa/Maputo
+false posix/Africa/Maseru
+false posix/Africa/Mbabane
+false posix/Africa/Mogadishu
+false posix/Africa/Monrovia
+false posix/Africa/Nairobi
+false posix/Africa/Ndjamena
+false posix/Africa/Niamey
+false posix/Africa/Nouakchott
+false posix/Africa/Ouagadougou
+false posix/Africa/Porto-Novo
+false posix/Africa/Sao_Tome
+false posix/Africa/Timbuktu
+false posix/Africa/Tripoli
+false posix/Africa/Tunis
+false posix/Africa/Windhoek
+true posix/America/Adak
+true posix/America/Anchorage
+false posix/America/Anguilla
+false posix/America/Antigua
+false posix/America/Araguaina
+false posix/America/Argentina/Buenos_Aires
+false posix/America/Argentina/Catamarca
+false posix/America/Argentina/ComodRivadavia
+false posix/America/Argentina/Cordoba
+false posix/America/Argentina/Jujuy
+false posix/America/Argentina/La_Rioja
+false posix/America/Argentina/Mendoza
+false posix/America/Argentina/Rio_Gallegos
+false posix/America/Argentina/Salta
+false posix/America/Argentina/San_Juan
+false posix/America/Argentina/San_Luis
+false posix/America/Argentina/Tucuman
+false posix/America/Argentina/Ushuaia
+false posix/America/Aruba
+false posix/America/Asuncion
+false posix/America/Atikokan
+true posix/America/Atka
+false posix/America/Bahia
+false posix/America/Bahia_Banderas
+false posix/America/Barbados
+false posix/America/Belem
+false posix/America/Belize
+false posix/America/Blanc-Sablon
+false posix/America/Boa_Vista
+false posix/America/Bogota
+true posix/America/Boise
+false posix/America/Buenos_Aires
+true posix/America/Cambridge_Bay
+false posix/America/Campo_Grande
+false posix/America/Cancun
+false posix/America/Caracas
+false posix/America/Catamarca
+false posix/America/Cayenne
+false posix/America/Cayman
+true posix/America/Chicago
+false posix/America/Chihuahua
+true posix/America/Ciudad_Juarez
+false posix/America/Coral_Harbour
+false posix/America/Cordoba
+false posix/America/Costa_Rica
+false posix/America/Creston
+false posix/America/Cuiaba
+false posix/America/Curacao
+false posix/America/Danmarkshavn
+false posix/America/Dawson
+false posix/America/Dawson_Creek
+true posix/America/Denver
+true posix/America/Detroit
+false posix/America/Dominica
+true posix/America/Edmonton
+false posix/America/Eirunepe
+false posix/America/El_Salvador
+true posix/America/Ensenada
+false posix/America/Fort_Nelson
+true posix/America/Fort_Wayne
+false posix/America/Fortaleza
+true posix/America/Glace_Bay
+true posix/America/Godthab
+true posix/America/Goose_Bay
+true posix/America/Grand_Turk
+false posix/America/Grenada
+false posix/America/Guadeloupe
+false posix/America/Guatemala
+false posix/America/Guayaquil
+false posix/America/Guyana
+true posix/America/Halifax
+true posix/America/Havana
+false posix/America/Hermosillo
+true posix/America/Indiana/Indianapolis
+true posix/America/Indiana/Knox
+true posix/America/Indiana/Marengo
+true posix/America/Indiana/Petersburg
+true posix/America/Indiana/Tell_City
+true posix/America/Indiana/Vevay
+true posix/America/Indiana/Vincennes
+true posix/America/Indiana/Winamac
+true posix/America/Indianapolis
+true posix/America/Inuvik
+true posix/America/Iqaluit
+false posix/America/Jamaica
+false posix/America/Jujuy
+true posix/America/Juneau
+true posix/America/Kentucky/Louisville
+true posix/America/Kentucky/Monticello
+true posix/America/Knox_IN
+false posix/America/Kralendijk
+false posix/America/La_Paz
+false posix/America/Lima
+true posix/America/Los_Angeles
+true posix/America/Louisville
+false posix/America/Lower_Princes
+false posix/America/Maceio
+false posix/America/Managua
+false posix/America/Manaus
+false posix/America/Marigot
+false posix/America/Martinique
+true posix/America/Matamoros
+false posix/America/Mazatlan
+false posix/America/Mendoza
+true posix/America/Menominee
+false posix/America/Merida
+true posix/America/Metlakatla
+false posix/America/Mexico_City
+true posix/America/Miquelon
+true posix/America/Moncton
+false posix/America/Monterrey
+false posix/America/Montevideo
+true posix/America/Montreal
+false posix/America/Montserrat
+true posix/America/Nassau
+true posix/America/New_York
+true posix/America/Nipigon
+true posix/America/Nome
+false posix/America/Noronha
+true posix/America/North_Dakota/Beulah
+true posix/America/North_Dakota/Center
+true posix/America/North_Dakota/New_Salem
+true posix/America/Nuuk
+true posix/America/Ojinaga
+false posix/America/Panama
+true posix/America/Pangnirtung
+false posix/America/Paramaribo
+false posix/America/Phoenix
+true posix/America/Port-au-Prince
+false posix/America/Port_of_Spain
+false posix/America/Porto_Acre
+false posix/America/Porto_Velho
+false posix/America/Puerto_Rico
+false posix/America/Punta_Arenas
+true posix/America/Rainy_River
+true posix/America/Rankin_Inlet
+false posix/America/Recife
+false posix/America/Regina
+true posix/America/Resolute
+false posix/America/Rio_Branco
+false posix/America/Rosario
+true posix/America/Santa_Isabel
+false posix/America/Santarem
+false posix/America/Santiago
+false posix/America/Santo_Domingo
+false posix/America/Sao_Paulo
+true posix/America/Scoresbysund
+true posix/America/Shiprock
+true posix/America/Sitka
+false posix/America/St_Barthelemy
+true posix/America/St_Johns
+false posix/America/St_Kitts
+false posix/America/St_Lucia
+false posix/America/St_Thomas
+false posix/America/St_Vincent
+false posix/America/Swift_Current
+false posix/America/Tegucigalpa
+true posix/America/Thule
+true posix/America/Thunder_Bay
+true posix/America/Tijuana
+true posix/America/Toronto
+false posix/America/Tortola
+true posix/America/Vancouver
+false posix/America/Virgin
+false posix/America/Whitehorse
+true posix/America/Winnipeg
+true posix/America/Yakutat
+true posix/America/Yellowknife
+false posix/Antarctica/Casey
+false posix/Antarctica/Davis
+false posix/Antarctica/DumontDUrville
+false posix/Antarctica/Macquarie
+false posix/Antarctica/Mawson
+false posix/Antarctica/McMurdo
+false posix/Antarctica/Palmer
+false posix/Antarctica/Rothera
+false posix/Antarctica/South_Pole
+false posix/Antarctica/Syowa
+true posix/Antarctica/Troll
+false posix/Antarctica/Vostok
+true posix/Arctic/Longyearbyen
+false posix/Asia/Aden
+false posix/Asia/Almaty
+false posix/Asia/Amman
+false posix/Asia/Anadyr
+false posix/Asia/Aqtau
+false posix/Asia/Aqtobe
+false posix/Asia/Ashgabat
+false posix/Asia/Ashkhabad
+false posix/Asia/Atyrau
+false posix/Asia/Baghdad
+false posix/Asia/Bahrain
+false posix/Asia/Baku
+false posix/Asia/Bangkok
+false posix/Asia/Barnaul
+true posix/Asia/Beirut
+false posix/Asia/Bishkek
+false posix/Asia/Brunei
+false posix/Asia/Calcutta
+false posix/Asia/Chita
+false posix/Asia/Choibalsan
+false posix/Asia/Chongqing
+false posix/Asia/Chungking
+false posix/Asia/Colombo
+false posix/Asia/Dacca
+false posix/Asia/Damascus
+false posix/Asia/Dhaka
+false posix/Asia/Dili
+false posix/Asia/Dubai
+false posix/Asia/Dushanbe
+true posix/Asia/Famagusta
+true posix/Asia/Gaza
+false posix/Asia/Harbin
+true posix/Asia/Hebron
+false posix/Asia/Ho_Chi_Minh
+false posix/Asia/Hong_Kong
+false posix/Asia/Hovd
+false posix/Asia/Irkutsk
+false posix/Asia/Istanbul
+false posix/Asia/Jakarta
+false posix/Asia/Jayapura
+true posix/Asia/Jerusalem
+false posix/Asia/Kabul
+false posix/Asia/Kamchatka
+false posix/Asia/Karachi
+false posix/Asia/Kashgar
+false posix/Asia/Kathmandu
+false posix/Asia/Katmandu
+false posix/Asia/Khandyga
+false posix/Asia/Kolkata
+false posix/Asia/Krasnoyarsk
+false posix/Asia/Kuala_Lumpur
+false posix/Asia/Kuching
+false posix/Asia/Kuwait
+false posix/Asia/Macao
+false posix/Asia/Macau
+false posix/Asia/Magadan
+false posix/Asia/Makassar
+false posix/Asia/Manila
+false posix/Asia/Muscat
+true posix/Asia/Nicosia
+false posix/Asia/Novokuznetsk
+false posix/Asia/Novosibirsk
+false posix/Asia/Omsk
+false posix/Asia/Oral
+false posix/Asia/Phnom_Penh
+false posix/Asia/Pontianak
+false posix/Asia/Pyongyang
+false posix/Asia/Qatar
+false posix/Asia/Qostanay
+false posix/Asia/Qyzylorda
+false posix/Asia/Rangoon
+false posix/Asia/Riyadh
+false posix/Asia/Saigon
+false posix/Asia/Sakhalin
+false posix/Asia/Samarkand
+false posix/Asia/Seoul
+false posix/Asia/Shanghai
+false posix/Asia/Singapore
+false posix/Asia/Srednekolymsk
+false posix/Asia/Taipei
+false posix/Asia/Tashkent
+false posix/Asia/Tbilisi
+false posix/Asia/Tehran
+true posix/Asia/Tel_Aviv
+false posix/Asia/Thimbu
+false posix/Asia/Thimphu
+false posix/Asia/Tokyo
+false posix/Asia/Tomsk
+false posix/Asia/Ujung_Pandang
+false posix/Asia/Ulaanbaatar
+false posix/Asia/Ulan_Bator
+false posix/Asia/Urumqi
+false posix/Asia/Ust-Nera
+false posix/Asia/Vientiane
+false posix/Asia/Vladivostok
+false posix/Asia/Yakutsk
+false posix/Asia/Yangon
+false posix/Asia/Yekaterinburg
+false posix/Asia/Yerevan
+true posix/Atlantic/Azores
+true posix/Atlantic/Bermuda
+true posix/Atlantic/Canary
+false posix/Atlantic/Cape_Verde
+true posix/Atlantic/Faeroe
+true posix/Atlantic/Faroe
+true posix/Atlantic/Jan_Mayen
+true posix/Atlantic/Madeira
+false posix/Atlantic/Reykjavik
+false posix/Atlantic/South_Georgia
+false posix/Atlantic/St_Helena
+false posix/Atlantic/Stanley
+false posix/Australia/ACT
+false posix/Australia/Adelaide
+false posix/Australia/Brisbane
+false posix/Australia/Broken_Hill
+false posix/Australia/Canberra
+false posix/Australia/Currie
+false posix/Australia/Darwin
+false posix/Australia/Eucla
+false posix/Australia/Hobart
+false posix/Australia/LHI
+false posix/Australia/Lindeman
+false posix/Australia/Lord_Howe
+false posix/Australia/Melbourne
+false posix/Australia/NSW
+false posix/Australia/North
+false posix/Australia/Perth
+false posix/Australia/Queensland
+false posix/Australia/South
+false posix/Australia/Sydney
+false posix/Australia/Tasmania
+false posix/Australia/Victoria
+false posix/Australia/West
+false posix/Australia/Yancowinna
+false posix/Brazil/Acre
+false posix/Brazil/DeNoronha
+false posix/Brazil/East
+false posix/Brazil/West
+true posix/CET
+true posix/CST6CDT
+true posix/Canada/Atlantic
+true posix/Canada/Central
+true posix/Canada/Eastern
+true posix/Canada/Mountain
+true posix/Canada/Newfoundland
+true posix/Canada/Pacific
+false posix/Canada/Saskatchewan
+false posix/Canada/Yukon
+false posix/Chile/Continental
+false posix/Chile/EasterIsland
+true posix/Cuba
+true posix/EET
+false posix/EST
+true posix/EST5EDT
+false posix/Egypt
+false posix/Eire
+false posix/Etc/GMT
+false posix/Etc/GMT+0
+false posix/Etc/GMT+1
+false posix/Etc/GMT+10
+false posix/Etc/GMT+11
+false posix/Etc/GMT+12
+false posix/Etc/GMT+2
+false posix/Etc/GMT+3
+false posix/Etc/GMT+4
+false posix/Etc/GMT+5
+false posix/Etc/GMT+6
+false posix/Etc/GMT+7
+false posix/Etc/GMT+8
+false posix/Etc/GMT+9
+false posix/Etc/GMT-0
+false posix/Etc/GMT-1
+false posix/Etc/GMT-10
+false posix/Etc/GMT-11
+false posix/Etc/GMT-12
+false posix/Etc/GMT-13
+false posix/Etc/GMT-14
+false posix/Etc/GMT-2
+false posix/Etc/GMT-3
+false posix/Etc/GMT-4
+false posix/Etc/GMT-5
+false posix/Etc/GMT-6
+false posix/Etc/GMT-7
+false posix/Etc/GMT-8
+false posix/Etc/GMT-9
+false posix/Etc/GMT0
+false posix/Etc/Greenwich
+false posix/Etc/UCT
+false posix/Etc/UTC
+false posix/Etc/Universal
+false posix/Etc/Zulu
+true posix/Europe/Amsterdam
+true posix/Europe/Andorra
+false posix/Europe/Astrakhan
+true posix/Europe/Athens
+true posix/Europe/Belfast
+true posix/Europe/Belgrade
+true posix/Europe/Berlin
+true posix/Europe/Bratislava
+true posix/Europe/Brussels
+true posix/Europe/Bucharest
+true posix/Europe/Budapest
+true posix/Europe/Busingen
+true posix/Europe/Chisinau
+true posix/Europe/Copenhagen
+false posix/Europe/Dublin
+true posix/Europe/Gibraltar
+true posix/Europe/Guernsey
+true posix/Europe/Helsinki
+true posix/Europe/Isle_of_Man
+false posix/Europe/Istanbul
+true posix/Europe/Jersey
+false posix/Europe/Kaliningrad
+true posix/Europe/Kiev
+false posix/Europe/Kirov
+true posix/Europe/Kyiv
+true posix/Europe/Lisbon
+true posix/Europe/Ljubljana
+true posix/Europe/London
+true posix/Europe/Luxembourg
+true posix/Europe/Madrid
+true posix/Europe/Malta
+true posix/Europe/Mariehamn
+false posix/Europe/Minsk
+true posix/Europe/Monaco
+false posix/Europe/Moscow
+true posix/Europe/Nicosia
+true posix/Europe/Oslo
+true posix/Europe/Paris
+true posix/Europe/Podgorica
+true posix/Europe/Prague
+true posix/Europe/Riga
+true posix/Europe/Rome
+false posix/Europe/Samara
+true posix/Europe/San_Marino
+true posix/Europe/Sarajevo
+false posix/Europe/Saratov
+false posix/Europe/Simferopol
+true posix/Europe/Skopje
+true posix/Europe/Sofia
+true posix/Europe/Stockholm
+true posix/Europe/Tallinn
+true posix/Europe/Tirane
+true posix/Europe/Tiraspol
+false posix/Europe/Ulyanovsk
+true posix/Europe/Uzhgorod
+true posix/Europe/Vaduz
+true posix/Europe/Vatican
+true posix/Europe/Vienna
+true posix/Europe/Vilnius
+false posix/Europe/Volgograd
+true posix/Europe/Warsaw
+true posix/Europe/Zagreb
+true posix/Europe/Zaporozhye
+true posix/Europe/Zurich
+false posix/Factory
+true posix/GB
+true posix/GB-Eire
+false posix/GMT
+false posix/GMT+0
+false posix/GMT-0
+false posix/GMT0
+false posix/Greenwich
+false posix/HST
+false posix/Hongkong
+false posix/Iceland
+false posix/Indian/Antananarivo
+false posix/Indian/Chagos
+false posix/Indian/Christmas
+false posix/Indian/Cocos
+false posix/Indian/Comoro
+false posix/Indian/Kerguelen
+false posix/Indian/Mahe
+false posix/Indian/Maldives
+false posix/Indian/Mauritius
+false posix/Indian/Mayotte
+false posix/Indian/Reunion
+false posix/Iran
+true posix/Israel
+false posix/Jamaica
+false posix/Japan
+false posix/Kwajalein
+false posix/Libya
+true posix/MET
+false posix/MST
+true posix/MST7MDT
+true posix/Mexico/BajaNorte
+false posix/Mexico/BajaSur
+false posix/Mexico/General
+false posix/NZ
+false posix/NZ-CHAT
+true posix/Navajo
+false posix/PRC
+true posix/PST8PDT
+false posix/Pacific/Apia
+false posix/Pacific/Auckland
+false posix/Pacific/Bougainville
+false posix/Pacific/Chatham
+false posix/Pacific/Chuuk
+false posix/Pacific/Easter
+false posix/Pacific/Efate
+false posix/Pacific/Enderbury
+false posix/Pacific/Fakaofo
+false posix/Pacific/Fiji
+false posix/Pacific/Funafuti
+false posix/Pacific/Galapagos
+false posix/Pacific/Gambier
+false posix/Pacific/Guadalcanal
+false posix/Pacific/Guam
+false posix/Pacific/Honolulu
+false posix/Pacific/Johnston
+false posix/Pacific/Kanton
+false posix/Pacific/Kiritimati
+false posix/Pacific/Kosrae
+false posix/Pacific/Kwajalein
+false posix/Pacific/Majuro
+false posix/Pacific/Marquesas
+false posix/Pacific/Midway
+false posix/Pacific/Nauru
+false posix/Pacific/Niue
+false posix/Pacific/Norfolk
+false posix/Pacific/Noumea
+false posix/Pacific/Pago_Pago
+false posix/Pacific/Palau
+false posix/Pacific/Pitcairn
+false posix/Pacific/Pohnpei
+false posix/Pacific/Ponape
+false posix/Pacific/Port_Moresby
+false posix/Pacific/Rarotonga
+false posix/Pacific/Saipan
+false posix/Pacific/Samoa
+false posix/Pacific/Tahiti
+false posix/Pacific/Tarawa
+false posix/Pacific/Tongatapu
+false posix/Pacific/Truk
+false posix/Pacific/Wake
+false posix/Pacific/Wallis
+false posix/Pacific/Yap
+true posix/Poland
+true posix/Portugal
+false posix/ROC
+false posix/ROK
+false posix/Singapore
+false posix/Turkey
+false posix/UCT
+true posix/US/Alaska
+true posix/US/Aleutian
+false posix/US/Arizona
+true posix/US/Central
+true posix/US/East-Indiana
+true posix/US/Eastern
+false posix/US/Hawaii
+true posix/US/Indiana-Starke
+true posix/US/Michigan
+true posix/US/Mountain
+true posix/US/Pacific
+false posix/US/Samoa
+false posix/UTC
+false posix/Universal
+false posix/W-SU
+true posix/WET
+false posix/Zulu
+true posixrules
+</TimeZones>
+    </root>
     <database id="2" parent="1" name="nexabuild">
       <Current>1</Current>
       <Grants>11||10|C|G
@@ -13,7 +1399,7 @@
 13212||10|C|G
 13212||-9223372036854775808|U|G
 13212||10|U|G</Grants>
-      <IntrospectionStateNumber>740</IntrospectionStateNumber>
+      <IntrospectionStateNumber>747</IntrospectionStateNumber>
       <ObjectId>16384</ObjectId>
       <OwnerName>nexabuild</OwnerName>
     </database>
@@ -22,59 +1408,59 @@
       <ObjectId>5</ObjectId>
       <OwnerName>nexabuild</OwnerName>
     </database>
-    <role id="4" parent="1" name="pg_database_owner">
-      <ObjectId>6171</ObjectId>
+    <role id="4" parent="1" name="nexabuild">
+      <BypassRls>1</BypassRls>
+      <CanLogin>1</CanLogin>
+      <CreateDb>1</CreateDb>
+      <CreateRole>1</CreateRole>
+      <ObjectId>10</ObjectId>
+      <Replication>1</Replication>
+      <SuperRole>1</SuperRole>
+    </role>
+    <role id="5" parent="1" name="pg_checkpoint">
+      <ObjectId>4544</ObjectId>
     </role>
-    <role id="5" parent="1" name="pg_read_all_data">
-      <ObjectId>6181</ObjectId>
+    <role id="6" parent="1" name="pg_create_subscription">
+      <ObjectId>6304</ObjectId>
     </role>
-    <role id="6" parent="1" name="pg_write_all_data">
-      <ObjectId>6182</ObjectId>
+    <role id="7" parent="1" name="pg_database_owner">
+      <ObjectId>6171</ObjectId>
+    </role>
+    <role id="8" parent="1" name="pg_execute_server_program">
+      <ObjectId>4571</ObjectId>
     </role>
-    <role id="7" parent="1" name="pg_monitor">
+    <role id="9" parent="1" name="pg_monitor">
       <ObjectId>3373</ObjectId>
       <RoleGrants>3374
 3375
 3377</RoleGrants>
     </role>
-    <role id="8" parent="1" name="pg_read_all_settings">
+    <role id="10" parent="1" name="pg_read_all_data">
+      <ObjectId>6181</ObjectId>
+    </role>
+    <role id="11" parent="1" name="pg_read_all_settings">
       <ObjectId>3374</ObjectId>
     </role>
-    <role id="9" parent="1" name="pg_read_all_stats">
+    <role id="12" parent="1" name="pg_read_all_stats">
       <ObjectId>3375</ObjectId>
     </role>
-    <role id="10" parent="1" name="pg_stat_scan_tables">
-      <ObjectId>3377</ObjectId>
-    </role>
-    <role id="11" parent="1" name="pg_read_server_files">
+    <role id="13" parent="1" name="pg_read_server_files">
       <ObjectId>4569</ObjectId>
-    </role>
-    <role id="12" parent="1" name="pg_write_server_files">
-      <ObjectId>4570</ObjectId>
-    </role>
-    <role id="13" parent="1" name="pg_execute_server_program">
-      <ObjectId>4571</ObjectId>
     </role>
     <role id="14" parent="1" name="pg_signal_backend">
       <ObjectId>4200</ObjectId>
     </role>
-    <role id="15" parent="1" name="pg_checkpoint">
-      <ObjectId>4544</ObjectId>
+    <role id="15" parent="1" name="pg_stat_scan_tables">
+      <ObjectId>3377</ObjectId>
     </role>
     <role id="16" parent="1" name="pg_use_reserved_connections">
       <ObjectId>4550</ObjectId>
     </role>
-    <role id="17" parent="1" name="pg_create_subscription">
-      <ObjectId>6304</ObjectId>
+    <role id="17" parent="1" name="pg_write_all_data">
+      <ObjectId>6182</ObjectId>
     </role>
-    <role id="18" parent="1" name="nexabuild">
-      <BypassRls>1</BypassRls>
-      <CanLogin>1</CanLogin>
-      <CreateDb>1</CreateDb>
-      <CreateRole>1</CreateRole>
-      <ObjectId>10</ObjectId>
-      <Replication>1</Replication>
-      <SuperRole>1</SuperRole>
+    <role id="18" parent="1" name="pg_write_server_files">
+      <ObjectId>4570</ObjectId>
     </role>
     <tablespace id="19" parent="1" name="pg_default">
       <ObjectId>1663</ObjectId>
@@ -3437,102 +4823,70 @@
     <schema id="264" parent="2" name="public">
       <Comment>standard public schema</Comment>
       <Current>1</Current>
-      <IntrospectionStateNumber>740</IntrospectionStateNumber>
-      <LastIntrospectionLocalTimestamp>2024-01-10.12:17:01</LastIntrospectionLocalTimestamp>
+      <IntrospectionStateNumber>747</IntrospectionStateNumber>
+      <LastIntrospectionLocalTimestamp>2024-04-20.21:33:36</LastIntrospectionLocalTimestamp>
       <ObjectId>2200</ObjectId>
       <StateNumber>524</StateNumber>
       <OwnerName>pg_database_owner</OwnerName>
     </schema>
     <sequence id="265" parent="264" name="graphs_id_seq">
       <DasType>integer|0s</DasType>
-      <ObjectId>16390</ObjectId>
+      <ObjectId>16389</ObjectId>
       <SequenceIdentity>1</SequenceIdentity>
       <StartValue>1</StartValue>
-      <StateNumber>734</StateNumber>
+      <StateNumber>746</StateNumber>
       <OwnerName>nexabuild</OwnerName>
     </sequence>
-    <table id="266" parent="264" name="SequelizeMeta">
-      <ObjectId>16385</ObjectId>
-      <StateNumber>733</StateNumber>
+    <table id="266" parent="264" name="graphs">
+      <ObjectId>16390</ObjectId>
+      <StateNumber>746</StateNumber>
       <AccessMethodId>2</AccessMethodId>
       <OwnerName>nexabuild</OwnerName>
     </table>
-    <table id="267" parent="264" name="graphs">
-      <ObjectId>16391</ObjectId>
-      <StateNumber>734</StateNumber>
-      <AccessMethodId>2</AccessMethodId>
-      <OwnerName>nexabuild</OwnerName>
-    </table>
-    <column id="268" parent="266" name="name">
-      <DasType>varchar(255)|0s</DasType>
-      <NotNull>1</NotNull>
-      <Position>1</Position>
-      <StateNumber>733</StateNumber>
-      <TypeId>1043</TypeId>
-    </column>
-    <index id="269" parent="266" name="SequelizeMeta_pkey">
-      <ColNames>name</ColNames>
-      <NameSurrogate>1</NameSurrogate>
-      <ObjectId>16388</ObjectId>
-      <Primary>1</Primary>
-      <StateNumber>733</StateNumber>
-      <Unique>1</Unique>
-      <AccessMethodId>403</AccessMethodId>
-      <CollationNames>default</CollationNames>
-      <CollationIds>100</CollationIds>
-      <CollationParentNames>pg_catalog</CollationParentNames>
-    </index>
-    <key id="270" parent="266" name="SequelizeMeta_pkey">
-      <NameSurrogate>1</NameSurrogate>
-      <ObjectId>16389</ObjectId>
-      <Primary>1</Primary>
-      <StateNumber>733</StateNumber>
-      <UnderlyingIndexId>16388</UnderlyingIndexId>
-    </key>
-    <column id="271" parent="267" name="id">
+    <column id="267" parent="266" name="id">
       <DasType>integer|0s</DasType>
       <DefaultExpression>nextval(&apos;graphs_id_seq&apos;::regclass)</DefaultExpression>
       <NotNull>1</NotNull>
       <Position>1</Position>
-      <StateNumber>734</StateNumber>
-      <SequenceId>16390</SequenceId>
+      <StateNumber>746</StateNumber>
+      <SequenceId>16389</SequenceId>
       <TypeId>23</TypeId>
     </column>
-    <column id="272" parent="267" name="data">
+    <column id="268" parent="266" name="data">
       <DasType>text|0s</DasType>
       <Position>2</Position>
-      <StateNumber>734</StateNumber>
+      <StateNumber>746</StateNumber>
       <TypeId>25</TypeId>
     </column>
-    <column id="273" parent="267" name="createdAt">
-      <DasType>timestamp with time zone|0s</DasType>
+    <column id="269" parent="266" name="createdAt">
+      <DasType>timestamp|0s</DasType>
       <NotNull>1</NotNull>
       <Position>3</Position>
-      <StateNumber>734</StateNumber>
-      <TypeId>1184</TypeId>
+      <StateNumber>746</StateNumber>
+      <TypeId>1114</TypeId>
     </column>
-    <column id="274" parent="267" name="updatedAt">
-      <DasType>timestamp with time zone|0s</DasType>
+    <column id="270" parent="266" name="updatedAt">
+      <DasType>timestamp|0s</DasType>
       <NotNull>1</NotNull>
       <Position>4</Position>
-      <StateNumber>734</StateNumber>
-      <TypeId>1184</TypeId>
+      <StateNumber>746</StateNumber>
+      <TypeId>1114</TypeId>
     </column>
-    <index id="275" parent="267" name="graphs_pkey">
+    <index id="271" parent="266" name="graphs_pkey">
       <ColNames>id</ColNames>
       <NameSurrogate>1</NameSurrogate>
-      <ObjectId>16397</ObjectId>
+      <ObjectId>16396</ObjectId>
       <Primary>1</Primary>
-      <StateNumber>734</StateNumber>
+      <StateNumber>746</StateNumber>
       <Unique>1</Unique>
       <AccessMethodId>403</AccessMethodId>
     </index>
-    <key id="276" parent="267" name="graphs_pkey">
+    <key id="272" parent="266" name="graphs_pkey">
       <NameSurrogate>1</NameSurrogate>
-      <ObjectId>16398</ObjectId>
+      <ObjectId>16397</ObjectId>
       <Primary>1</Primary>
-      <StateNumber>734</StateNumber>
-      <UnderlyingIndexId>16397</UnderlyingIndexId>
+      <StateNumber>746</StateNumber>
+      <UnderlyingIndexId>16396</UnderlyingIndexId>
     </key>
   </database-model>
 </dataSource>
\ No newline at end of file
Index: .idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#n:public\r\n!<md> [743, 0, null, null, -2147483648, -2147483648]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta b/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta
--- a/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta	(revision 2b75205e0ba044787ba2d4efa5e73a1b727ad8fa)
+++ b/.idea/dataSources/bcbd857d-bde0-42df-a30c-7d6dc5410214/storage_v2/_src_/database/nexabuild.jgdMKA/schema/public.abK9xQ.meta	(date 1713648817365)
@@ -1,2 +1,2 @@
 #n:public
-!<md> [743, 0, null, null, -2147483648, -2147483648]
+!<md> [747, 0, null, null, -2147483648, -2147483648]
diff --git a/backend/routes/api.js b/backend/routes/graphsRoutes.js
rename from backend/routes/api.js
rename to backend/routes/graphsRoutes.js
