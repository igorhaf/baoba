{"version":3,"file":"index.umd.js","mappings":"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","sources":["webpack://projectstorm/react-diagrams-routing/webpack/universalModuleDefinition","webpack://projectstorm/react-diagrams-routing/webpack/bootstrap","webpack://projectstorm/react-diagrams-routing/webpack/runtime/define property getters","webpack://projectstorm/react-diagrams-routing/webpack/runtime/hasOwnProperty shorthand","webpack://projectstorm/react-diagrams-routing/webpack/runtime/make namespace object","webpack://projectstorm/react-diagrams-routing/external commonjs \"react\"","webpack://projectstorm/react-diagrams-routing/external commonjs \"@projectstorm/react-diagrams-defaults\"","webpack://projectstorm/react-diagrams-routing/./src/link/PathFindingLinkModel.ts","webpack://projectstorm/react-diagrams-routing/external commonjs \"lodash\"","webpack://projectstorm/react-diagrams-routing/external commonjs \"pathfinding\"","webpack://projectstorm/react-diagrams-routing/./src/engine/PathFinding.ts","webpack://projectstorm/react-diagrams-routing/./src/link/PathFindingLinkWidget.tsx","webpack://projectstorm/react-diagrams-routing/external commonjs \"paths-js/path\"","webpack://projectstorm/react-diagrams-routing/external commonjs \"@projectstorm/react-canvas-core\"","webpack://projectstorm/react-diagrams-routing/./src/link/PathFindingLinkFactory.tsx","webpack://projectstorm/react-diagrams-routing/external commonjs \"@projectstorm/react-diagrams-core\"","webpack://projectstorm/react-diagrams-routing/external commonjs \"@projectstorm/geometry\"","webpack://projectstorm/react-diagrams-routing/./src/link/RightAngleLinkWidget.tsx","webpack://projectstorm/react-diagrams-routing/./src/link/RightAngleLinkModel.ts","webpack://projectstorm/react-diagrams-routing/./src/link/RightAngleLinkFactory.tsx","webpack://projectstorm/react-diagrams-routing/external commonjs \"dagre\"","webpack://projectstorm/react-diagrams-routing/./src/dagre/DagreEngine.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"projectstorm/react-diagrams-routing\"] = factory();\n\telse\n\t\troot[\"projectstorm/react-diagrams-routing\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@projectstorm/react-diagrams-defaults\");","import { PathFindingLinkFactory } from './PathFindingLinkFactory';\nimport { DefaultLinkModel, DefaultLinkModelOptions } from '@projectstorm/react-diagrams-defaults';\n\nexport class PathFindingLinkModel extends DefaultLinkModel {\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: PathFindingLinkFactory.NAME,\n\t\t\t...options\n\t\t});\n\t}\n\n\tperformanceTune() {\n\t\treturn false;\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"pathfinding\");","import * as PF from 'pathfinding';\nimport { PathFindingLinkFactory } from '../link/PathFindingLinkFactory';\nimport { PointModel } from '@projectstorm/react-diagrams-core';\n\n/*\nit can be very expensive to calculate routes when every single pixel on the canvas\nis individually represented. Using the factor below, we combine values in order\nto achieve the best trade-off between accuracy and performance.\n*/\n\nconst pathFinderInstance = new PF.JumpPointFinder({\n\theuristic: PF.Heuristic.manhattan,\n\tdiagonalMovement: PF.DiagonalMovement.Never\n});\n\nexport class PathFinding {\n\tinstance: any;\n\tfactory: PathFindingLinkFactory;\n\n\tconstructor(factory: PathFindingLinkFactory) {\n\t\tthis.instance = pathFinderInstance;\n\t\tthis.factory = factory;\n\t}\n\n\t/**\n\t * Taking as argument a fully unblocked walking matrix, this method\n\t * finds a direct path from point A to B.\n\t */\n\tcalculateDirectPath(from: PointModel, to: PointModel): number[][] {\n\t\tconst matrix = this.factory.getCanvasMatrix();\n\t\tconst grid = new PF.Grid(matrix);\n\n\t\treturn pathFinderInstance.findPath(\n\t\t\tthis.factory.translateRoutingX(Math.floor(from.getX() / this.factory.ROUTING_SCALING_FACTOR)),\n\t\t\tthis.factory.translateRoutingY(Math.floor(from.getY() / this.factory.ROUTING_SCALING_FACTOR)),\n\t\t\tthis.factory.translateRoutingX(Math.floor(to.getX() / this.factory.ROUTING_SCALING_FACTOR)),\n\t\t\tthis.factory.translateRoutingY(Math.floor(to.getY() / this.factory.ROUTING_SCALING_FACTOR)),\n\t\t\tgrid\n\t\t);\n\t}\n\n\t/**\n\t * Using @link{#calculateDirectPath}'s result as input, we here\n\t * determine the first walkable point found in the matrix that includes\n\t * blocked paths.\n\t */\n\tcalculateLinkStartEndCoords(\n\t\tmatrix: number[][],\n\t\tpath: number[][]\n\t): {\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tpathToStart: number[][];\n\t\tpathToEnd: number[][];\n\t} {\n\t\tconst startIndex = path.findIndex((point) => {\n\t\t\tif (matrix[point[1]]) return matrix[point[1]][point[0]] === 0;\n\t\t\telse return false;\n\t\t});\n\t\tconst endIndex =\n\t\t\tpath.length -\n\t\t\t1 -\n\t\t\tpath\n\t\t\t\t.slice()\n\t\t\t\t.reverse()\n\t\t\t\t.findIndex((point) => {\n\t\t\t\t\tif (matrix[point[1]]) return matrix[point[1]][point[0]] === 0;\n\t\t\t\t\telse return false;\n\t\t\t\t});\n\n\t\t// are we trying to create a path exclusively through blocked areas?\n\t\t// if so, let's fallback to the linear routing\n\t\tif (startIndex === -1 || endIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst pathToStart = path.slice(0, startIndex);\n\t\tconst pathToEnd = path.slice(endIndex);\n\n\t\treturn {\n\t\t\tstart: {\n\t\t\t\tx: path[startIndex][0],\n\t\t\t\ty: path[startIndex][1]\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: path[endIndex][0],\n\t\t\t\ty: path[endIndex][1]\n\t\t\t},\n\t\t\tpathToStart,\n\t\t\tpathToEnd\n\t\t};\n\t}\n\n\t/**\n\t * Puts everything together: merges the paths from/to the centre of the ports,\n\t * with the path calculated around other elements.\n\t */\n\tcalculateDynamicPath(\n\t\troutingMatrix: number[][],\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tpathToStart: number[][],\n\t\tpathToEnd: number[][]\n\t) {\n\t\t// generate the path based on the matrix with obstacles\n\t\tconst grid = new PF.Grid(routingMatrix);\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n\t\t// aggregate everything to have the calculated path ready for rendering\n\t\tconst pathCoords = pathToStart\n\t\t\t.concat(dynamicPath, pathToEnd)\n\t\t\t.map((coords) => [\n\t\t\t\tthis.factory.translateRoutingX(coords[0], true),\n\t\t\t\tthis.factory.translateRoutingY(coords[1], true)\n\t\t\t]);\n\t\treturn PF.Util.compressPath(pathCoords);\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { PathFinding } from '../engine/PathFinding';\nimport { PathFindingLinkFactory } from './PathFindingLinkFactory';\nimport { PathFindingLinkModel } from './PathFindingLinkModel';\nimport { DefaultLinkSegmentWidget } from '@projectstorm/react-diagrams-defaults';\n\nexport interface PathFindingLinkWidgetProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: PathFindingLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tfactory: PathFindingLinkFactory;\n}\n\nexport interface PathFindingLinkWidgetState {\n\tselected: boolean;\n}\n\nexport class PathFindingLinkWidget extends React.Component<PathFindingLinkWidgetProps, PathFindingLinkWidgetState> {\n\trefPaths: React.RefObject<SVGPathElement>[];\n\tpathFinding: PathFinding;\n\n\tconstructor(props: PathFindingLinkWidgetProps) {\n\t\tsuper(props);\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t\tthis.pathFinding = new PathFinding(this.props.factory);\n\t}\n\n\tcomponentDidUpdate(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.props.link.setRenderedPaths([]);\n\t}\n\n\tgenerateLink(path: string, id: string | number): JSX.Element {\n\t\tconst ref = React.createRef<SVGPathElement>();\n\t\tthis.refPaths.push(ref);\n\t\treturn (\n\t\t\t<DefaultLinkSegmentWidget\n\t\t\t\tkey={`link-${id}`}\n\t\t\t\tpath={path}\n\t\t\t\tselected={this.state.selected}\n\t\t\t\tdiagramEngine={this.props.diagramEngine}\n\t\t\t\tfactory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n\t\t\t\tlink={this.props.link}\n\t\t\t\tforwardRef={ref}\n\t\t\t\tonSelection={(selected) => {\n\t\t\t\t\tthis.setState({ selected: selected });\n\t\t\t\t}}\n\t\t\t\textras={{}}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tthis.refPaths = [];\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.getPoints();\n\t\tvar paths = [];\n\n\t\t// first step: calculate a direct path between the points being linked\n\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n\n\t\tconst routingMatrix = this.props.factory.getRoutingMatrix();\n\t\t// now we need to extract, from the routing matrix, the very first walkable points\n\t\t// so they can be used as origin and destination of the link to be created\n\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\t\tif (smartLink) {\n\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\n\n\t\t\t// second step: calculate a path avoiding hitting other elements\n\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(routingMatrix, start, end, pathToStart, pathToEnd);\n\n\t\t\tpaths.push(\n\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n\t\t\t\tthis.generateLink(this.props.factory.generateDynamicPath(simplifiedPath), '0')\n\t\t\t);\n\t\t}\n\t\treturn <>{paths}</>;\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"paths-js/path\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@projectstorm/react-canvas-core\");","import * as React from 'react';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { PathFindingLinkModel } from './PathFindingLinkModel';\nimport { PathFindingLinkWidget } from './PathFindingLinkWidget';\nimport * as _ from 'lodash';\nimport * as Path from 'paths-js/path';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams-defaults';\nimport {\n\tAbstractDisplacementState,\n\tAbstractFactory,\n\tAction,\n\tFactoryBank,\n\tInputType,\n\tListenerHandle\n} from '@projectstorm/react-canvas-core';\n\nexport class PathFindingLinkFactory extends DefaultLinkFactory<PathFindingLinkModel> {\n\tROUTING_SCALING_FACTOR: number = 5;\n\n\t// calculated only when smart routing is active\n\tcanvasMatrix: number[][] = [];\n\troutingMatrix: number[][] = [];\n\n\t// used when at least one element has negative coordinates\n\thAdjustmentFactor: number = 0;\n\tvAdjustmentFactor: number = 0;\n\n\tstatic NAME = 'pathfinding';\n\tlistener: ListenerHandle;\n\n\tconstructor() {\n\t\tsuper(PathFindingLinkFactory.NAME);\n\t}\n\n\tsetDiagramEngine(engine: DiagramEngine): void {\n\t\tsuper.setDiagramEngine(engine);\n\n\t\t// listen for drag changes\n\t\tengine.getStateMachine().registerListener({\n\t\t\tstateChanged: (event) => {\n\t\t\t\tif (event.newState instanceof AbstractDisplacementState) {\n\t\t\t\t\tconst deRegister = engine.getActionEventBus().registerAction(\n\t\t\t\t\t\tnew Action<DiagramEngine>({\n\t\t\t\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\t\t\t\tfire: () => {\n\t\t\t\t\t\t\t\tthis.calculateRoutingMatrix();\n\t\t\t\t\t\t\t\tengine.repaintCanvas();\n\t\t\t\t\t\t\t\tdeRegister();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.listener = engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\t_.defer(() => {\n\t\t\t\t\tthis.calculateRoutingMatrix();\n\t\t\t\t\tengine.repaintCanvas();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tsetFactoryBank(bank: FactoryBank<AbstractFactory>): void {\n\t\tsuper.setFactoryBank(bank);\n\t\tif (!bank && this.listener) {\n\t\t\tthis.listener.deregister();\n\t\t}\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <PathFindingLinkWidget diagramEngine={this.engine} link={event.model} factory={this} />;\n\t}\n\n\tgenerateModel(event): PathFindingLinkModel {\n\t\treturn new PathFindingLinkModel();\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all walkable points are marked by zeros.\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n\t */\n\tgetCanvasMatrix(): number[][] {\n\t\tif (this.canvasMatrix.length === 0) {\n\t\t\tthis.calculateCanvasMatrix();\n\t\t}\n\n\t\treturn this.canvasMatrix;\n\t}\n\tcalculateCanvasMatrix() {\n\t\tconst {\n\t\t\twidth: canvasWidth,\n\t\t\thAdjustmentFactor,\n\t\t\theight: canvasHeight,\n\t\t\tvAdjustmentFactor\n\t\t} = this.calculateMatrixDimensions();\n\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\n\n\t\tconst matrixWidth = Math.ceil(canvasWidth / this.ROUTING_SCALING_FACTOR);\n\t\tconst matrixHeight = Math.ceil(canvasHeight / this.ROUTING_SCALING_FACTOR);\n\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\n\t\t\treturn new Array(matrixWidth).fill(0);\n\t\t});\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 1 1 0 0 0 0 |\n\t * | 0 0 1 1 0 0 1 1 |\n\t * | 0 0 0 0 0 0 1 1 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all points blocked by a node (and its ports) are\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\n\t */\n\tgetRoutingMatrix(): number[][] {\n\t\tif (this.routingMatrix.length === 0) {\n\t\t\tthis.calculateRoutingMatrix();\n\t\t}\n\n\t\treturn this.routingMatrix;\n\t}\n\tcalculateRoutingMatrix(): void {\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\n\n\t\t// nodes need to be marked as blocked points\n\t\tthis.markNodes(matrix);\n\t\t// same thing for ports\n\t\tthis.markPorts(matrix);\n\n\t\tthis.routingMatrix = matrix;\n\t}\n\n\t/**\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n\t */\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\n\t/**\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n\t */\n\tcalculateMatrixDimensions = (): {\n\t\twidth: number;\n\t\thAdjustmentFactor: number;\n\t\theight: number;\n\t\tvAdjustmentFactor: number;\n\t} => {\n\t\tconst allNodesCoords = _.values(this.engine.getModel().getNodes()).map((item) => ({\n\t\t\tx: item.getX(),\n\t\t\twidth: item.width,\n\t\t\ty: item.getY(),\n\t\t\theight: item.height\n\t\t}));\n\n\t\tconst allLinks = _.values(this.engine.getModel().getLinks());\n\t\tconst allPortsCoords = _.flatMap(allLinks.map((link) => [link.getSourcePort(), link.getTargetPort()]))\n\t\t\t.filter((port) => port !== null)\n\t\t\t.map((item) => ({\n\t\t\t\tx: item.getX(),\n\t\t\t\twidth: item.width,\n\t\t\t\ty: item.getY(),\n\t\t\t\theight: item.height\n\t\t\t}));\n\t\tconst allPointsCoords = _.flatMap(allLinks.map((link) => link.getPoints())).map((item) => ({\n\t\t\t// points don't have width/height, so let's just use 0\n\t\t\tx: item.getX(),\n\t\t\twidth: 0,\n\t\t\ty: item.getY(),\n\t\t\theight: 0\n\t\t}));\n\n\t\tconst sumProps = (object, props) => _.reduce(props, (acc, prop) => acc + _.get(object, prop, 0), 0);\n\n\t\tconst canvas = this.engine.getCanvas() as HTMLDivElement;\n\t\tconst concatedCoords = _.concat(allNodesCoords, allPortsCoords, allPointsCoords);\n\t\tconst minX =\n\t\t\tMath.floor(Math.min(_.get(_.minBy(concatedCoords, 'x'), 'x', 0), 0) / this.ROUTING_SCALING_FACTOR) *\n\t\t\tthis.ROUTING_SCALING_FACTOR;\n\t\tconst maxXElement = _.maxBy(concatedCoords, (item) => sumProps(item, ['x', 'width']));\n\t\tconst maxX = Math.max(sumProps(maxXElement, ['x', 'width']), canvas.offsetWidth);\n\t\tconst minYCoords = _.minBy(concatedCoords, 'y');\n\t\tconst minY =\n\t\t\tMath.floor(Math.min(_.get(minYCoords, 'y', 0), 0) / this.ROUTING_SCALING_FACTOR) * this.ROUTING_SCALING_FACTOR;\n\t\tconst maxYElement = _.maxBy(concatedCoords, (item) => sumProps(item, ['y', 'height']));\n\t\tconst maxY = Math.max(sumProps(maxYElement, ['y', 'height']), canvas.offsetHeight);\n\n\t\treturn {\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\n\t\t\thAdjustmentFactor: Math.abs(minX) / this.ROUTING_SCALING_FACTOR + 1,\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\n\t\t\tvAdjustmentFactor: Math.abs(minY) / this.ROUTING_SCALING_FACTOR + 1\n\t\t};\n\t};\n\n\t/**\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\n\t */\n\tmarkNodes = (matrix: number[][]): void => {\n\t\t_.values(this.engine.getModel().getNodes()).forEach((node) => {\n\t\t\tconst startX = Math.floor(node.getX() / this.ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((node.getX() + node.width) / this.ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(node.getY() / this.ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((node.getY() + node.height) / this.ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\n\t */\n\tmarkPorts = (matrix: number[][]): void => {\n\t\tconst allElements = _.flatMap(\n\t\t\t_.values(this.engine.getModel().getLinks()).map((link) => [].concat(link.getSourcePort(), link.getTargetPort()))\n\t\t);\n\t\tallElements\n\t\t\t.filter((port) => port !== null)\n\t\t\t.forEach((port) => {\n\t\t\t\tconst startX = Math.floor(port.x / this.ROUTING_SCALING_FACTOR);\n\t\t\t\tconst endX = Math.ceil((port.x + port.width) / this.ROUTING_SCALING_FACTOR);\n\t\t\t\tconst startY = Math.floor(port.y / this.ROUTING_SCALING_FACTOR);\n\t\t\t\tconst endY = Math.ceil((port.y + port.height) / this.ROUTING_SCALING_FACTOR);\n\n\t\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n\t\t\tmatrix[y][x] = 1;\n\t\t}\n\t};\n\n\tgenerateDynamicPath(pathCoords: number[][]) {\n\t\tlet path = Path();\n\t\tpath = path.moveto(pathCoords[0][0] * this.ROUTING_SCALING_FACTOR, pathCoords[0][1] * this.ROUTING_SCALING_FACTOR);\n\t\tpathCoords.slice(1).forEach((coords) => {\n\t\t\tpath = path.lineto(coords[0] * this.ROUTING_SCALING_FACTOR, coords[1] * this.ROUTING_SCALING_FACTOR);\n\t\t});\n\t\treturn path.print();\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@projectstorm/react-diagrams-core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@projectstorm/geometry\");","import * as React from 'react';\nimport { DiagramEngine, LinkWidget, PointModel } from '@projectstorm/react-diagrams-core';\nimport { RightAngleLinkFactory } from './RightAngleLinkFactory';\nimport { DefaultLinkModel, DefaultLinkSegmentWidget } from '@projectstorm/react-diagrams-defaults';\nimport { Point } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport { RightAngleLinkModel } from './RightAngleLinkModel';\n\nexport interface RightAngleLinkProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: RightAngleLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tfactory: RightAngleLinkFactory;\n}\n\nexport interface RightAngleLinkState {\n\tselected: boolean;\n\tcanDrag: boolean;\n}\n\nexport class RightAngleLinkWidget extends React.Component<RightAngleLinkProps, RightAngleLinkState> {\n\tpublic static defaultProps: RightAngleLinkProps = {\n\t\tcolor: 'red',\n\t\twidth: 3,\n\t\tlink: null,\n\t\tsmooth: false,\n\t\tdiagramEngine: null,\n\t\tfactory: null\n\t};\n\n\trefPaths: React.RefObject<SVGPathElement>[];\n\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\n\trefLabels: { [id: string]: HTMLElement };\n\tdragging_index: number;\n\n\tconstructor(props: RightAngleLinkProps) {\n\t\tsuper(props);\n\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false,\n\t\t\tcanDrag: false\n\t\t};\n\n\t\tthis.dragging_index = 0;\n\t}\n\n\tcomponentDidUpdate(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.props.link.setRenderedPaths(\n\t\t\tthis.refPaths.map((ref) => {\n\t\t\t\treturn ref.current;\n\t\t\t})\n\t\t);\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.props.link.setRenderedPaths([]);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tconst ref = React.createRef<SVGPathElement>();\n\t\tthis.refPaths.push(ref);\n\t\treturn (\n\t\t\t<DefaultLinkSegmentWidget\n\t\t\t\tkey={`link-${id}`}\n\t\t\t\tpath={path}\n\t\t\t\tselected={this.state.selected}\n\t\t\t\tdiagramEngine={this.props.diagramEngine}\n\t\t\t\tfactory={this.props.diagramEngine.getFactoryForLink(this.props.link)}\n\t\t\t\tlink={this.props.link}\n\t\t\t\tforwardRef={ref}\n\t\t\t\tonSelection={(selected) => {\n\t\t\t\t\tthis.setState({ selected: selected });\n\t\t\t\t}}\n\t\t\t\textras={extraProps}\n\t\t\t/>\n\t\t);\n\t}\n\n\tcalculatePositions(points: PointModel[], event: MouseEvent, index: number, coordinate: string) {\n\t\t// If path is first or last add another point to keep node port on its position\n\t\tif (index === 0) {\n\t\t\tlet point = new PointModel({\n\t\t\t\tlink: this.props.link,\n\t\t\t\tposition: new Point(points[index].getX(), points[index].getY())\n\t\t\t});\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tthis.dragging_index++;\n\t\t\treturn;\n\t\t} else if (index === points.length - 2) {\n\t\t\tlet point = new PointModel({\n\t\t\t\tlink: this.props.link,\n\t\t\t\tposition: new Point(points[index + 1].getX(), points[index + 1].getY())\n\t\t\t});\n\t\t\tthis.props.link.addPoint(point, index + 1);\n\t\t\treturn;\n\t\t}\n\n\t\t// Merge two points if it is not close to node port and close to each other\n\t\tif (index - 2 > 0) {\n\t\t\tlet _points = {\n\t\t\t\t[index - 2]: points[index - 2].getPosition(),\n\t\t\t\t[index + 1]: points[index + 1].getPosition(),\n\t\t\t\t[index - 1]: points[index - 1].getPosition()\n\t\t\t};\n\t\t\tif (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n\t\t\t\t_points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\t_points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\tpoints[index - 2].setPosition(_points[index - 2]);\n\t\t\t\tpoints[index + 1].setPosition(_points[index + 1]);\n\t\t\t\tpoints[index - 1].remove();\n\t\t\t\tpoints[index - 1].remove();\n\t\t\t\tthis.dragging_index--;\n\t\t\t\tthis.dragging_index--;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Merge two points if it is not close to node port\n\t\tif (index + 2 < points.length - 2) {\n\t\t\tlet _points = {\n\t\t\t\t[index + 3]: points[index + 3].getPosition(),\n\t\t\t\t[index + 2]: points[index + 2].getPosition(),\n\t\t\t\t[index + 1]: points[index + 1].getPosition(),\n\t\t\t\t[index]: points[index].getPosition()\n\t\t\t};\n\t\t\tif (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n\t\t\t\t_points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\t_points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t\t\tpoints[index].setPosition(_points[index]);\n\t\t\t\tpoints[index + 3].setPosition(_points[index + 3]);\n\t\t\t\tpoints[index + 1].remove();\n\t\t\t\tpoints[index + 1].remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If no condition above handled then just update path points position\n\t\tlet _points = {\n\t\t\t[index]: points[index].getPosition(),\n\t\t\t[index + 1]: points[index + 1].getPosition()\n\t\t};\n\t\t_points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\t_points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n\t\tpoints[index].setPosition(_points[index]);\n\t\tpoints[index + 1].setPosition(_points[index + 1]);\n\t}\n\n\tdraggingEvent(event: MouseEvent, index: number) {\n\t\tlet points = this.props.link.getPoints();\n\t\t// get moving difference. Index + 1 will work because links indexes has\n\t\t// length = points.lenght - 1\n\t\tlet dx = Math.abs(points[index].getX() - points[index + 1].getX());\n\t\tlet dy = Math.abs(points[index].getY() - points[index + 1].getY());\n\n\t\t// moving with y direction\n\t\tif (dx === 0) {\n\t\t\tthis.calculatePositions(points, event, index, 'x');\n\t\t} else if (dy === 0) {\n\t\t\tthis.calculatePositions(points, event, index, 'y');\n\t\t}\n\t\tthis.props.link.setFirstAndLastPathsDirection();\n\t}\n\n\thandleMove = function (event: MouseEvent) {\n\t\tthis.draggingEvent(event, this.dragging_index);\n\t}.bind(this);\n\n\thandleUp = function (event: MouseEvent) {\n\t\t// Unregister handlers to avoid multiple event handlers for other links\n\t\tthis.setState({ canDrag: false, selected: false });\n\t\twindow.removeEventListener('mousemove', this.handleMove);\n\t\twindow.removeEventListener('mouseup', this.handleUp);\n\t}.bind(this);\n\n\trender() {\n\t\t//ensure id is present for all points on the path\n\t\tlet points = this.props.link.getPoints();\n\t\tlet paths = [];\n\n\t\t// Get points based on link orientation\n\t\tlet pointLeft = points[0];\n\t\tlet pointRight = points[points.length - 1];\n\t\tlet hadToSwitch = false;\n\t\tif (pointLeft.getX() > pointRight.getX()) {\n\t\t\tpointLeft = points[points.length - 1];\n\t\t\tpointRight = points[0];\n\t\t\thadToSwitch = true;\n\t\t}\n\t\tlet dy = Math.abs(points[0].getY() - points[points.length - 1].getY());\n\n\t\t// When new link add one middle point to get everywhere 90° angle\n\t\tif (this.props.link.getTargetPort() === null && points.length === 2) {\n\t\t\t[...Array(2)].forEach((item) => {\n\t\t\t\tthis.props.link.addPoint(\n\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\tlink: this.props.link,\n\t\t\t\t\t\tposition: new Point(pointLeft.getX(), pointRight.getY())\n\t\t\t\t\t}),\n\t\t\t\t\t1\n\t\t\t\t);\n\t\t\t});\n\t\t\tthis.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n\t\t}\n\t\t// When new link is moving and not connected to target port move with middle point\n\t\t// TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n\t\t//  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n\t\telse if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n\t\t\tpoints[1].setPosition(\n\t\t\t\tpointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2,\n\t\t\t\t!hadToSwitch ? pointLeft.getY() : pointRight.getY()\n\t\t\t);\n\t\t\tpoints[2].setPosition(\n\t\t\t\tpointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2,\n\t\t\t\t!hadToSwitch ? pointRight.getY() : pointLeft.getY()\n\t\t\t);\n\t\t}\n\t\t// Render was called but link is not moved but user.\n\t\t// Node is moved and in this case fix coordinates to get 90° angle.\n\t\t// For loop just for first and last path\n\t\telse if (!this.state.canDrag && points.length > 2) {\n\t\t\t// Those points and its position only will be moved\n\t\t\tfor (let i = 1; i < points.length; i += points.length - 2) {\n\t\t\t\tif (i - 1 === 0) {\n\t\t\t\t\tif (this.props.link.getFirstPathXdirection()) {\n\t\t\t\t\t\tpoints[i].setPosition(points[i].getX(), points[i - 1].getY());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoints[i].setPosition(points[i - 1].getX(), points[i].getY());\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.props.link.getLastPathXdirection()) {\n\t\t\t\t\t\tpoints[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoints[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If there is existing link which has two points add one\n\t\t// NOTE: It doesn't matter if check is for dy or dx\n\t\tif (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n\t\t\tthis.props.link.addPoint(\n\t\t\t\tnew PointModel({\n\t\t\t\t\tlink: this.props.link,\n\t\t\t\t\tposition: new Point(pointLeft.getX(), pointRight.getY())\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\tpaths.push(\n\t\t\t\tthis.generateLink(\n\t\t\t\t\tLinkWidget.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t{\n\t\t\t\t\t\t'data-linkid': this.props.link.getID(),\n\t\t\t\t\t\t'data-point': j,\n\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\tif (event.button === 0) {\n\t\t\t\t\t\t\t\tthis.setState({ canDrag: true });\n\t\t\t\t\t\t\t\tthis.dragging_index = j;\n\t\t\t\t\t\t\t\t// Register mouse move event to track mouse position\n\t\t\t\t\t\t\t\t// On mouse up these events are unregistered check \"this.handleUp\"\n\t\t\t\t\t\t\t\twindow.addEventListener('mousemove', this.handleMove);\n\t\t\t\t\t\t\t\twindow.addEventListener('mouseup', this.handleUp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonMouseEnter: (event: MouseEvent) => {\n\t\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t\t\tthis.props.link.lastHoverIndexOfPath = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tj\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tthis.refPaths = [];\n\t\treturn <g data-default-link-test={this.props.link.getOptions().testName}>{paths}</g>;\n\t}\n}\n","import { DefaultLinkModel, DefaultLinkModelOptions } from '@projectstorm/react-diagrams-defaults';\nimport { RightAngleLinkFactory } from './RightAngleLinkFactory';\nimport { PointModel } from '@projectstorm/react-diagrams-core';\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport class RightAngleLinkModel extends DefaultLinkModel {\n\tlastHoverIndexOfPath: number;\n\tprivate _lastPathXdirection: boolean;\n\tprivate _firstPathXdirection: boolean;\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: RightAngleLinkFactory.NAME,\n\t\t\t...options\n\t\t});\n\t\tthis.lastHoverIndexOfPath = 0;\n\t\tthis._lastPathXdirection = false;\n\t\tthis._firstPathXdirection = false;\n\t}\n\n\tsetFirstAndLastPathsDirection() {\n\t\tlet points = this.getPoints();\n\t\tfor (let i = 1; i < points.length; i += points.length - 2) {\n\t\t\tlet dx = Math.abs(points[i].getX() - points[i - 1].getX());\n\t\t\tlet dy = Math.abs(points[i].getY() - points[i - 1].getY());\n\t\t\tif (i - 1 === 0) {\n\t\t\t\tthis._firstPathXdirection = dx > dy;\n\t\t\t} else {\n\t\t\t\tthis._lastPathXdirection = dx > dy;\n\t\t\t}\n\t\t}\n\t}\n\n\t// @ts-ignore\n\taddPoint<P extends PointModel>(pointModel: P, index: number = 1): P {\n\t\t// @ts-ignore\n\t\tsuper.addPoint(pointModel, index);\n\t\tthis.setFirstAndLastPathsDirection();\n\t\treturn pointModel;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.setFirstAndLastPathsDirection();\n\t}\n\n\tsetManuallyFirstAndLastPathsDirection(first, last) {\n\t\tthis._firstPathXdirection = first;\n\t\tthis._lastPathXdirection = last;\n\t}\n\n\tgetLastPathXdirection(): boolean {\n\t\treturn this._lastPathXdirection;\n\t}\n\tgetFirstPathXdirection(): boolean {\n\t\treturn this._firstPathXdirection;\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n","import * as React from 'react';\nimport { RightAngleLinkWidget } from './RightAngleLinkWidget';\nimport { DefaultLinkFactory } from '@projectstorm/react-diagrams-defaults';\nimport { RightAngleLinkModel } from './RightAngleLinkModel';\n\n/**\n * @author Daniel Lazar\n */\nexport class RightAngleLinkFactory extends DefaultLinkFactory<RightAngleLinkModel> {\n\tstatic NAME = 'rightAngle';\n\n\tconstructor() {\n\t\tsuper(RightAngleLinkFactory.NAME);\n\t}\n\n\tgenerateModel(event): RightAngleLinkModel {\n\t\treturn new RightAngleLinkModel();\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <RightAngleLinkWidget diagramEngine={this.engine} link={event.model} factory={this} />;\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"dagre\");","import { DiagramModel, PointModel } from '@projectstorm/react-diagrams-core';\nimport * as dagre from 'dagre';\nimport { GraphLabel } from 'dagre';\nimport * as _ from 'lodash';\nimport { Point } from '@projectstorm/geometry';\n\nexport interface DagreEngineOptions {\n\tgraph?: GraphLabel;\n\t/**\n\t * Will also re-layout links\n\t */\n\tincludeLinks?: boolean;\n\tnodeMargin?: number;\n}\n\nexport class DagreEngine {\n\toptions: DagreEngineOptions;\n\n\tconstructor(options: DagreEngineOptions = {}) {\n\t\tthis.options = options;\n\t}\n\n\tredistribute(model: DiagramModel) {\n\t\t// Create a new directed graph\n\t\tvar g = new dagre.graphlib.Graph({\n\t\t\tmultigraph: true,\n\t\t\tcompound: true\n\t\t});\n\t\tg.setGraph(this.options.graph || {});\n\t\tg.setDefaultEdgeLabel(function () {\n\t\t\treturn {};\n\t\t});\n\n\t\t// set nodes\n\t\t_.forEach(model.getNodes(), (node) => {\n\t\t\tg.setNode(node.getID(), { width: node.width, height: node.height });\n\t\t});\n\n\t\t_.forEach(model.getLinks(), (link) => {\n\t\t\t// set edges\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tg.setEdge({\n\t\t\t\t\tv: link.getSourcePort().getNode().getID(),\n\t\t\t\t\tw: link.getTargetPort().getNode().getID(),\n\t\t\t\t\tname: link.getID()\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// layout the graph\n\t\tdagre.layout(g);\n\n\t\tg.nodes().forEach((v) => {\n\t\t\tconst node = g.node(v);\n\t\t\tmodel.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n\t\t});\n\n\t\t// also include links?\n\t\tif (this.options.includeLinks) {\n\t\t\tg.edges().forEach((e) => {\n\t\t\t\tconst edge = g.edge(e);\n\t\t\t\tconst link = model.getLink(e.name);\n\n\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\tfor (let i = 1; i < edge.points.length - 1; i++) {\n\t\t\t\t\tpoints.push(new PointModel({ link: link, position: new Point(edge.points[i].x, edge.points[i].y) }));\n\t\t\t\t}\n\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * TODO cleanup this method into smaller methods\n\t */\n\tpublic refreshLinks(diagram: DiagramModel) {\n\t\tconst { nodeMargin } = this.options;\n\t\tconst nodes = diagram.getNodes();\n\t\tconst links = diagram.getLinks();\n\t\tlet maxChunkRowIndex = -1;\n\t\t// build the chunk matrix\n\t\tconst chunks: { [id: number]: { [id: number]: boolean } } = {}; // true: occupied, false: blank\n\t\tconst NodeXColumnIndexDictionary: { [id: number]: number } = {};\n\t\tlet verticalLines: number[] = [];\n\t\t_.forEach(nodes, (node) => {\n\t\t\t// find vertical lines. vertical lines go through maximum number of nodes located under each other.\n\t\t\tconst nodeColumnCenter = node.getX() + node.width / 2;\n\t\t\tif (\n\t\t\t\t_.every(verticalLines, (vLine) => {\n\t\t\t\t\treturn Math.abs(nodeColumnCenter - vLine) > nodeMargin;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\tverticalLines.push(nodeColumnCenter);\n\t\t\t}\n\t\t});\n\n\t\t// sort chunk columns\n\t\tverticalLines = verticalLines.sort((a, b) => a - b);\n\t\t_.forEach(verticalLines, (line, index) => {\n\t\t\tchunks[index] = {};\n\t\t\tchunks[index + 0.5] = {};\n\t\t});\n\n\t\t// set occupied chunks\n\t\t_.forEach(nodes, (node) => {\n\t\t\tconst nodeColumnCenter = node.getX() + node.width / 2;\n\t\t\tconst startChunkIndex = Math.floor(node.getY() / nodeMargin);\n\t\t\tconst endChunkIndex = Math.floor((node.getY() + node.height) / nodeMargin);\n\t\t\t// find max ChunkRowIndex\n\t\t\tif (endChunkIndex > maxChunkRowIndex) maxChunkRowIndex = endChunkIndex;\n\t\t\tconst nodeColumnIndex = _.findIndex(verticalLines, (vLine) => {\n\t\t\t\treturn Math.abs(nodeColumnCenter - vLine) <= nodeMargin;\n\t\t\t});\n\t\t\t_.forEach(_.range(startChunkIndex, endChunkIndex + 1), (chunkIndex) => {\n\t\t\t\tchunks[nodeColumnIndex][chunkIndex] = true;\n\t\t\t});\n\t\t\tNodeXColumnIndexDictionary[node.getX()] = nodeColumnIndex;\n\t\t});\n\n\t\t// sort links based on their distances\n\t\tconst edges = _.map(links, (link) => {\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tconst source = link.getSourcePort().getNode();\n\t\t\t\tconst target = link.getTargetPort().getNode();\n\t\t\t\tconst sourceIndex = NodeXColumnIndexDictionary[source.getX()];\n\t\t\t\tconst targetIndex = NodeXColumnIndexDictionary[target.getX()];\n\n\t\t\t\treturn sourceIndex > targetIndex\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tlink,\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tsourceY: source.getY() + source.height / 2,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\ttargetIndex,\n\t\t\t\t\t\t\ttargetY: target.getY() + source.height / 2,\n\t\t\t\t\t\t\ttarget\n\t\t\t\t\t  }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tlink,\n\t\t\t\t\t\t\tsourceIndex: targetIndex,\n\t\t\t\t\t\t\tsourceY: target.getY() + target.height / 2,\n\t\t\t\t\t\t\tsource: target,\n\t\t\t\t\t\t\ttargetIndex: sourceIndex,\n\t\t\t\t\t\t\ttargetY: source.getY() + source.height / 2,\n\t\t\t\t\t\t\ttarget: source\n\t\t\t\t\t  };\n\t\t\t}\n\t\t});\n\t\tconst sortedEdges = _.sortBy(edges, (link) => {\n\t\t\treturn Math.abs(link.targetIndex - link.sourceIndex);\n\t\t});\n\n\t\t// set link points\n\t\tif (this.options.includeLinks) {\n\t\t\t_.forEach(sortedEdges, (edge) => {\n\t\t\t\tconst link = diagram.getLink(edge.link.getID());\n\t\t\t\t// re-draw\n\t\t\t\tif (Math.abs(edge.sourceIndex - edge.targetIndex) > 1) {\n\t\t\t\t\t// get the length of link in column\n\t\t\t\t\tconst columns = _.range(edge.sourceIndex - 1, edge.targetIndex);\n\n\t\t\t\t\tconst chunkIndex = Math.floor(edge.sourceY / nodeMargin);\n\t\t\t\t\tconst targetChunkIndex = Math.floor(edge.targetY / nodeMargin);\n\n\t\t\t\t\t// check upper paths\n\t\t\t\t\tlet northCost = 1;\n\t\t\t\t\tlet aboveRowIndex = chunkIndex;\n\t\t\t\t\tfor (; aboveRowIndex >= 0; aboveRowIndex--, northCost++) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t_.every(columns, (columnIndex) => {\n\t\t\t\t\t\t\t\treturn !(\n\t\t\t\t\t\t\t\t\tchunks[columnIndex][aboveRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex + 0.5][aboveRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex - 0.5][aboveRowIndex]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// check lower paths\n\t\t\t\t\tlet southCost = 0;\n\t\t\t\t\tlet belowRowIndex = chunkIndex;\n\t\t\t\t\tfor (; belowRowIndex <= maxChunkRowIndex; belowRowIndex++, southCost++) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t_.every(columns, (columnIndex) => {\n\t\t\t\t\t\t\t\treturn !(\n\t\t\t\t\t\t\t\t\tchunks[columnIndex][belowRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex + 0.5][belowRowIndex] ||\n\t\t\t\t\t\t\t\t\tchunks[columnIndex - 0.5][belowRowIndex]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// pick the cheapest path\n\t\t\t\t\tconst pathRowIndex =\n\t\t\t\t\t\tsouthCost + (belowRowIndex - targetChunkIndex) < northCost + (targetChunkIndex - aboveRowIndex)\n\t\t\t\t\t\t\t? belowRowIndex + 1\n\t\t\t\t\t\t\t: aboveRowIndex - 1;\n\n\t\t\t\t\t// Finally update the link points\n\t\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\t\tpoints.push(\n\t\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\tposition: new Point(\n\t\t\t\t\t\t\t\t(verticalLines[columns[0]] + verticalLines[columns[0] + 1]) / 2,\n\t\t\t\t\t\t\t\t(pathRowIndex + 0.5) * nodeMargin\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t\t_.forEach(columns, (column) => {\n\t\t\t\t\t\tpoints.push(\n\t\t\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\t\tposition: new Point(verticalLines[column], (pathRowIndex + 0.5) * nodeMargin)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tpoints.push(\n\t\t\t\t\t\t\tnew PointModel({\n\t\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t\t\tposition: new Point(\n\t\t\t\t\t\t\t\t\t(verticalLines[column] + verticalLines[column - 1]) / 2,\n\t\t\t\t\t\t\t\t\t(pathRowIndex + 0.5) * nodeMargin\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tchunks[column][pathRowIndex] = true;\n\t\t\t\t\t\tchunks[column][pathRowIndex + 1] = true;\n\t\t\t\t\t\tchunks[column + 0.5][pathRowIndex] = true;\n\t\t\t\t\t\tchunks[column + 0.5][pathRowIndex + 1] = true;\n\t\t\t\t\t});\n\t\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t\t} else {\n\t\t\t\t\t// refresh\n\t\t\t\t\tlink.setPoints([link.getFirstPoint(), link.getLastPoint()]);\n\t\t\t\t\tconst columnIndex = (edge.sourceIndex + edge.targetIndex) / 2;\n\t\t\t\t\tif (!chunks[columnIndex]) {\n\t\t\t\t\t\tchunks[columnIndex] = {};\n\t\t\t\t\t}\n\t\t\t\t\tconst rowIndex = Math.floor((edge.sourceY + edge.targetY) / 2 / nodeMargin);\n\t\t\t\t\tchunks[columnIndex][rowIndex] = true;\n\t\t\t\t\tchunks[columnIndex][rowIndex + 1] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","PathFindingLinkModel","DefaultLinkModel","constructor","options","super","type","PathFindingLinkFactory","NAME","performanceTune","pathFinderInstance","heuristic","diagonalMovement","PathFinding","this","instance","calculateDirectPath","from","to","matrix","getCanvasMatrix","grid","findPath","translateRoutingX","Math","floor","getX","ROUTING_SCALING_FACTOR","translateRoutingY","getY","calculateLinkStartEndCoords","path","startIndex","findIndex","point","endIndex","length","slice","reverse","pathToStart","pathToEnd","start","x","y","end","calculateDynamicPath","routingMatrix","dynamicPath","pathCoords","concat","map","coords","PathFindingLinkWidget","props","refPaths","state","selected","pathFinding","componentDidUpdate","link","setRenderedPaths","ref","current","componentDidMount","componentWillUnmount","generateLink","id","push","DefaultLinkSegmentWidget","diagramEngine","getFactoryForLink","forwardRef","onSelection","setState","extras","render","points","getPoints","paths","directPathCoords","getRoutingMatrix","smartLink","simplifiedPath","generateDynamicPath","DefaultLinkFactory","canvasMatrix","hAdjustmentFactor","vAdjustmentFactor","calculateMatrixDimensions","allNodesCoords","engine","getModel","getNodes","item","width","height","allLinks","getLinks","allPortsCoords","getSourcePort","getTargetPort","filter","port","allPointsCoords","sumProps","object","acc","canvas","getCanvas","concatedCoords","minX","min","maxXElement","maxX","max","offsetWidth","minYCoords","minY","maxYElement","maxY","offsetHeight","ceil","abs","markNodes","forEach","node","startX","endX","startY","endY","markMatrixPoint","markPorts","undefined","setDiagramEngine","getStateMachine","registerListener","stateChanged","event","newState","AbstractDisplacementState","deRegister","getActionEventBus","registerAction","Action","InputType","fire","calculateRoutingMatrix","repaintCanvas","listener","canvasReady","setFactoryBank","bank","deregister","generateReactWidget","model","generateModel","calculateCanvasMatrix","canvasWidth","canvasHeight","matrixWidth","matrixHeight","Array","fill","moveto","lineto","print","RightAngleLinkWidget","handleMove","draggingEvent","dragging_index","bind","handleUp","canDrag","window","removeEventListener","extraProps","calculatePositions","index","coordinate","PointModel","position","Point","addPoint","_points","getPosition","getRelativeMousePoint","setPosition","remove","dx","dy","setFirstAndLastPathsDirection","pointLeft","pointRight","hadToSwitch","setManuallyFirstAndLastPathsDirection","i","getFirstPathXdirection","getLastPathXdirection","j","LinkWidget","getID","onMouseDown","button","addEventListener","onMouseEnter","lastHoverIndexOfPath","getOptions","testName","defaultProps","color","smooth","RightAngleLinkModel","RightAngleLinkFactory","_lastPathXdirection","_firstPathXdirection","pointModel","deserialize","first","last","setWidth","fireEvent","setColor","DagreEngine","redistribute","g","multigraph","compound","setGraph","graph","setDefaultEdgeLabel","setNode","setEdge","v","getNode","w","name","nodes","includeLinks","edges","e","edge","getLink","getFirstPoint","setPoints","getLastPoint","refreshLinks","diagram","nodeMargin","links","maxChunkRowIndex","chunks","NodeXColumnIndexDictionary","verticalLines","nodeColumnCenter","vLine","sort","a","b","line","startChunkIndex","endChunkIndex","nodeColumnIndex","chunkIndex","source","target","sourceIndex","targetIndex","sourceY","targetY","sortedEdges","columns","targetChunkIndex","northCost","aboveRowIndex","columnIndex","southCost","belowRowIndex","pathRowIndex","column","rowIndex"],"sourceRoot":""}