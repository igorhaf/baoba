{"version":3,"file":"index.umd.js","mappings":"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","sources":["webpack://projectstorm/react-canvas-core/webpack/universalModuleDefinition","webpack://projectstorm/react-canvas-core/webpack/bootstrap","webpack://projectstorm/react-canvas-core/webpack/runtime/compat get default export","webpack://projectstorm/react-canvas-core/webpack/runtime/define property getters","webpack://projectstorm/react-canvas-core/webpack/runtime/hasOwnProperty shorthand","webpack://projectstorm/react-canvas-core/webpack/runtime/make namespace object","webpack://projectstorm/react-canvas-core/external commonjs \"lodash\"","webpack://projectstorm/react-canvas-core/external commonjs \"@projectstorm/react-canvas-core\"","webpack://projectstorm/react-canvas-core/./src/entities/link/PointModel.ts","webpack://projectstorm/react-canvas-core/external commonjs \"@projectstorm/geometry\"","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerModel.ts","webpack://projectstorm/react-canvas-core/./src/models/DiagramModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelModel.ts","webpack://projectstorm/react-canvas-core/external commonjs \"react\"","webpack://projectstorm/react-canvas-core/external commonjs \"@emotion/styled\"","webpack://projectstorm/react-canvas-core/./src/entities/label/LabelWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link/LinkWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/link-layer/LinkLayerFactory.tsx","webpack://projectstorm/react-canvas-core/external commonjs \"resize-observer-polyfill\"","webpack://projectstorm/react-canvas-core/./src/entities/node/NodeWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/port/PortModel.ts","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerWidget.tsx","webpack://projectstorm/react-canvas-core/./src/entities/node-layer/NodeLayerFactory.tsx","webpack://projectstorm/react-canvas-core/./src/entities/port/PortWidget.tsx","webpack://projectstorm/react-canvas-core/./src/states/DragNewLinkState.ts","webpack://projectstorm/react-canvas-core/./src/states/DragDiagramItemsState.ts","webpack://projectstorm/react-canvas-core/./src/states/DefaultDiagramState.ts","webpack://projectstorm/react-canvas-core/./src/DiagramEngine.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"projectstorm/react-canvas-core\"] = factory();\n\telse\n\t\troot[\"projectstorm/react-canvas-core\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@projectstorm/react-canvas-core\");","import { LinkModel } from './LinkModel';\nimport {\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelOptions\n} from '@projectstorm/react-canvas-core';\n\nexport interface PointModelOptions extends Omit<BasePositionModelOptions, 'type'> {\n\tlink: LinkModel;\n}\n\nexport interface PointModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: PointModelOptions;\n\tLISTENER: BaseModelListener;\n}\n\nexport class PointModel<G extends PointModelGenerics = PointModelGenerics> extends BasePositionModel<\n\tG & BasePositionModelGenerics\n> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'point'\n\t\t});\n\t\tthis.parent = options.link;\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@projectstorm/geometry\");","import { PortModel } from '../port/PortModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelModel } from '../label/LabelModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { boundingBoxFromPoints, Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModel,\n\tBaseModelGenerics,\n\tBaseModelListener,\n\tDeserializeEvent,\n\tModelGeometryInterface\n} from '@projectstorm/react-canvas-core';\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEntityEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport interface LinkModelGenerics extends BaseModelGenerics {\n\tLISTENER: LinkModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class LinkModel<G extends LinkModelGenerics = LinkModelGenerics>\n\textends BaseModel<G>\n\timplements ModelGeometryInterface\n{\n\tprotected sourcePort: PortModel | null;\n\tprotected targetPort: PortModel | null;\n\n\tprotected labels: LabelModel[];\n\tprotected points: PointModel[];\n\n\tprotected renderedPaths: SVGPathElement[];\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.points = [\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t}),\n\t\t\tnew PointModel({\n\t\t\t\tlink: this\n\t\t\t})\n\t\t];\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.renderedPaths = [];\n\t\tthis.labels = [];\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn new Rectangle(\n\t\t\tboundingBoxFromPoints(\n\t\t\t\t_.map(this.points, (point: PointModel) => {\n\t\t\t\t\treturn point.getPosition();\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t}\n\n\tgetSelectionEntities(): Array<BaseModel> {\n\t\tif (this.getTargetPort() && this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the first point\n\t\tif (!this.getSourcePort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n\t\t}\n\t\t// allow selection of the last point\n\t\tif (!this.getTargetPort()) {\n\t\t\treturn super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n\t\t}\n\t\treturn super.getSelectionEntities().concat(this.points);\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.points = _.map(event.data.points || [], (point) => {\n\t\t\tvar p = new PointModel({\n\t\t\t\tlink: this,\n\t\t\t\tposition: new Point(point.x, point.y)\n\t\t\t});\n\t\t\tp.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: point\n\t\t\t});\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(event.data.labels || [], (label: any) => {\n\t\t\tlet labelOb = (event.engine as DiagramEngine).getFactoryForLabel(label.type).generateModel({});\n\t\t\tlabelOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: label\n\t\t\t});\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\t// these happen async, so we use the promises for these (they need to be done like this without the async keyword\n\t\t// because we need the deserailize method to finish for other methods while this happen\n\t\tif (event.data.target) {\n\t\t\tevent.getModel(event.data.targetPort).then((model: PortModel) => {\n\t\t\t\tthis.setTargetPort(model);\n\t\t\t});\n\t\t}\n\t\tif (event.data.source) {\n\t\t\tevent.getModel(event.data.sourcePort).then((model: PortModel) => {\n\t\t\t\tthis.setSourcePort(model);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetRenderedPath(): SVGPathElement[] {\n\t\treturn this.renderedPaths;\n\t}\n\n\tsetRenderedPaths(paths: SVGPathElement[]) {\n\t\tthis.renderedPaths = paths;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().getID() : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.getID() : null,\n\t\t\tpoints: _.map(this.points, (point) => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\tlabels: _.map(this.labels, (label) => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tclearPort(port: PortModel) {\n\t\tif (this.sourcePort === port) {\n\t\t\tthis.setSourcePort(null);\n\t\t} else if (this.targetPort === port) {\n\t\t\tthis.setTargetPort(null);\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t\tdelete this.sourcePort;\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t\tdelete this.targetPort;\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].getID() === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel | null) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.fireEvent({ port }, 'sourcePortChanged');\n\t\tif (port?.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel | null) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.fireEvent({ port }, 'targetPortChanged');\n\t\tif (port?.reportedPosition) {\n\t\t\tthis.getPointForPort(port).setPosition(port.getCenter());\n\t\t}\n\t}\n\n\tpoint(x: number, y: number, index: number = 1): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y), index);\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tgetLabels() {\n\t\treturn this.labels;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, (point) => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tif (this.isLastPoint(pointModel)) this.remove();\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(1, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel({\n\t\t\tlink: this,\n\t\t\tposition: new Point(x, y)\n\t\t});\n\t}\n}\n","import * as _ from 'lodash';\nimport { DiagramModel } from '../../models/DiagramModel';\nimport { PortModel } from '../port/PortModel';\nimport { LinkModel } from '../link/LinkModel';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelListener,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEntityEvent<NodeModel>): void;\n}\n\nexport interface NodeModelGenerics extends BasePositionModelGenerics {\n\tLISTENER: NodeModelListener;\n\tPARENT: DiagramModel;\n}\n\nexport class NodeModel<G extends NodeModelGenerics = NodeModelGenerics> extends BasePositionModel<G> {\n\tprotected ports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.ports = {};\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Rectangle.fromPointAndSize(this.getPosition(), this.width, this.height);\n\t}\n\n\tsetPosition(point: Point): void;\n\tsetPosition(x: number, y: number): void;\n\tsetPosition(x: number | Point, y?: number): void {\n\t\tconst old = this.position;\n\n\t\tif (x instanceof Point) {\n\t\t\tsuper.setPosition(x);\n\t\t} else {\n\t\t\tsuper.setPosition(x, y);\n\t\t}\n\n\t\t//also update the port co-ordinates (for make glorious speed)\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tport.setPosition(port.getX() + this.position.x - old.x, port.getY() + this.position.y - old.y);\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\n\t\t//deserialize ports\n\t\t_.forEach(event.data.ports, (port: any) => {\n\t\t\tlet portOb = (event.engine as DiagramEngine).getFactoryForPort(port.type).generateModel({});\n\t\t\tportOb.deserialize({\n\t\t\t\t...event,\n\t\t\t\tdata: port\n\t\t\t});\n\t\t\t// the links need these\n\t\t\tevent.registerModel(portOb);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tports: _.map(this.ports, (port) => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t};\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, (port) => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, (port) => {\n\t\t\t_.forEach(port.getLinks(), (link) => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].getID() === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetLink(id: string): LinkModel {\n\t\tfor (let portID in this.ports) {\n\t\t\tconst links = this.ports[portID].getLinks();\n\t\t\tif (links[id]) {\n\t\t\t\treturn links[id];\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t// clear the port from the links\n\t\tfor (let link of _.values(port.getLinks())) {\n\t\t\tlink.clearPort(port);\n\t\t}\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.getName()]) {\n\t\t\tthis.ports[port.getName()].setParent(null);\n\t\t\tdelete this.ports[port.getName()];\n\t\t}\n\t}\n\n\taddPort(port: PortModel): PortModel {\n\t\tport.setParent(this);\n\t\tthis.ports[port.getName()] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { NodeModel } from '../node/NodeModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface NodeLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: NodeModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class NodeLayerModel<G extends NodeLayerModelGenerics = NodeLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-nodes',\n\t\t\tisSvg: false,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof NodeModel)) {\n\t\t\tthrow new Error('Can only add nodes to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeNode(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getNodeFactories();\n\t}\n\n\tgetNodes() {\n\t\treturn this.getModels();\n\t}\n}\n","import { LayerModel, LayerModelGenerics } from '@projectstorm/react-canvas-core';\nimport { LinkModel } from '../link/LinkModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { DiagramModel } from '../../models/DiagramModel';\n\nexport interface LinkLayerModelGenerics extends LayerModelGenerics {\n\tCHILDREN: LinkModel;\n\tENGINE: DiagramEngine;\n}\n\nexport class LinkLayerModel<G extends LinkLayerModelGenerics = LinkLayerModelGenerics> extends LayerModel<G> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diagram-links',\n\t\t\tisSvg: true,\n\t\t\ttransformed: true\n\t\t});\n\t}\n\n\taddModel(model: G['CHILDREN']): void {\n\t\tif (!(model instanceof LinkModel)) {\n\t\t\tthrow new Error('Can only add links to this layer');\n\t\t}\n\t\tmodel.registerListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\t(this.getParent() as DiagramModel).removeLink(model);\n\t\t\t}\n\t\t});\n\t\tsuper.addModel(model);\n\t}\n\n\tgetLinks() {\n\t\treturn this.getModels();\n\t}\n\n\tgetChildModelFactoryBank(engine: G['ENGINE']) {\n\t\treturn engine.getLinkFactories();\n\t}\n}\n","import * as _ from 'lodash';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { NodeModel } from '../entities/node/NodeModel';\nimport {\n\tBaseEntityEvent,\n\tBaseEntityListener,\n\tBaseModel,\n\tCanvasModel,\n\tCanvasModelGenerics,\n\tLayerModel,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { NodeLayerModel } from '../entities/node-layer/NodeLayerModel';\nimport { LinkLayerModel } from '../entities/link-layer/LinkLayerModel';\n\nexport interface DiagramListener extends BaseEntityListener {\n\tnodesUpdated?(event: BaseEntityEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEntityEvent & { link: LinkModel; isCreated: boolean }): void;\n}\n\nexport interface DiagramModelGenerics extends CanvasModelGenerics {\n\tLISTENER: DiagramListener;\n}\n\nexport class DiagramModel<G extends DiagramModelGenerics = DiagramModelGenerics> extends CanvasModel<G> {\n\tprotected activeNodeLayer: NodeLayerModel;\n\tprotected activeLinkLayer: LinkLayerModel;\n\n\tconstructor(options: G['OPTIONS'] = {}) {\n\t\tsuper(options);\n\t\tthis.addLayer(new LinkLayerModel());\n\t\tthis.addLayer(new NodeLayerModel());\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tthis.layers = [];\n\t\tsuper.deserialize(event);\n\t}\n\n\taddLayer(layer: LayerModel): void {\n\t\tsuper.addLayer(layer);\n\t\tif (layer instanceof NodeLayerModel) {\n\t\t\tthis.activeNodeLayer = layer;\n\t\t}\n\t\tif (layer instanceof LinkLayerModel) {\n\t\t\tthis.activeLinkLayer = layer;\n\t\t}\n\t}\n\n\tgetLinkLayers(): LinkLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof LinkLayerModel;\n\t\t}) as LinkLayerModel[];\n\t}\n\n\tgetNodeLayers(): NodeLayerModel[] {\n\t\treturn _.filter(this.layers, (layer) => {\n\t\t\treturn layer instanceof NodeLayerModel;\n\t\t}) as NodeLayerModel[];\n\t}\n\n\tgetActiveNodeLayer(): NodeLayerModel {\n\t\tif (!this.activeNodeLayer) {\n\t\t\tconst layers = this.getNodeLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new NodeLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeNodeLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeNodeLayer;\n\t}\n\n\tgetActiveLinkLayer(): LinkLayerModel {\n\t\tif (!this.activeLinkLayer) {\n\t\t\tconst layers = this.getLinkLayers();\n\t\t\tif (layers.length === 0) {\n\t\t\t\tthis.addLayer(new LinkLayerModel());\n\t\t\t} else {\n\t\t\t\tthis.activeLinkLayer = layers[0];\n\t\t\t}\n\t\t}\n\t\treturn this.activeLinkLayer;\n\t}\n\n\tgetNode(node: string): NodeModel {\n\t\tfor (const layer of this.getNodeLayers()) {\n\t\t\tconst model = layer.getModel(node);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetLink(link: string): LinkModel {\n\t\tfor (const layer of this.getLinkLayers()) {\n\t\t\tconst model = layer.getModel(link);\n\t\t\tif (model) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, (model) => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.getActiveLinkLayer().addModel(link);\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tlink,\n\t\t\t\tisCreated: true\n\t\t\t},\n\t\t\t'linksUpdated'\n\t\t);\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.getActiveNodeLayer().addModel(node);\n\t\tthis.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst removed = _.some(this.getLinkLayers(), (layer) => {\n\t\t\treturn layer.removeModel(link);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ link, isCreated: false }, 'linksUpdated');\n\t\t}\n\t}\n\n\tremoveNode(node: NodeModel) {\n\t\tconst removed = _.some(this.getNodeLayers(), (layer) => {\n\t\t\treturn layer.removeModel(node);\n\t\t});\n\t\tif (removed) {\n\t\t\tthis.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n\t\t}\n\t}\n\n\tgetLinks(): LinkModel[] {\n\t\treturn _.flatMap(this.getLinkLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n\n\tgetNodes(): NodeModel[] {\n\t\treturn _.flatMap(this.getNodeLayers(), (layer) => {\n\t\t\treturn _.values(layer.getModels());\n\t\t});\n\t}\n}\n","import { LinkModel } from '../link/LinkModel';\nimport { BaseModel, BaseModelGenerics, BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface LabelModelOptions extends BaseModelOptions {\n\toffsetX?: number;\n\toffsetY?: number;\n}\n\nexport interface LabelModelGenerics extends BaseModelGenerics {\n\tPARENT: LinkModel;\n\tOPTIONS: LabelModelOptions;\n}\n\nexport class LabelModel<G extends LabelModelGenerics = LabelModelGenerics> extends BaseModel<G> {\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\toffsetX: options.offsetX || 0,\n\t\t\toffsetY: options.offsetY || 0\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.offsetX = event.data.offsetX;\n\t\tthis.options.offsetY = event.data.offsetY;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\toffsetX: this.options.offsetX,\n\t\t\toffsetY: this.options.offsetY\n\t\t};\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@emotion/styled\");","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n\tengine: DiagramEngine;\n\tlabel: LabelModel;\n\tindex: number;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n\n\texport const Foreign = styled.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\n\tconstructor(props: LabelWidgetProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: SVGPathElement; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst link = this.props.label.getParent();\n\t\tconst lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (link.getLabels().length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < link.getRenderedPath().length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: link.getRenderedPath()[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = () => {\n\t\tconst found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\t\tif (!found) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = found;\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.ref.current.offsetWidth,\n\t\t\theight: this.ref.current.offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n\t\t};\n\n\t\tthis.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n\t};\n\n\trender() {\n\t\tconst canvas = this.props.engine.getCanvas();\n\n\t\treturn (\n\t\t\t<S.Foreign key={this.props.label.getID()} width={canvas?.offsetWidth} height={canvas?.offsetHeight}>\n\t\t\t\t<S.Label ref={this.ref}>\n\t\t\t\t\t{this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label })}\n\t\t\t\t</S.Label>\n\t\t\t</S.Foreign>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as _ from 'lodash';\nimport { LinkWidget } from '../link/LinkWidget';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface LinkLayerWidgetProps {\n\tlayer: LinkLayerModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Container = styled.div``;\n}\n\nexport class LinkLayerWidget extends React.Component<LinkLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{\n\t\t\t\t\t//only perform these actions when we have a diagram\n\t\t\t\t\t_.map(this.props.layer.getLinks(), (link) => {\n\t\t\t\t\t\treturn <LinkWidget key={link.getID()} link={link} diagramEngine={this.props.engine} />;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkModel } from './LinkModel';\nimport { PointModel } from './PointModel';\nimport * as _ from 'lodash';\nimport { LabelWidget } from '../label/LabelWidget';\nimport { BaseEntityEvent, BasePositionModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../port/PortModel';\n\nexport interface LinkProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface LinkState {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n}\n\nexport class LinkWidget extends React.Component<LinkProps, LinkState> {\n\tsourceListener: ListenerHandle;\n\ttargetListener: ListenerHandle;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsourcePort: null,\n\t\t\ttargetPort: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tif (this.sourceListener) {\n\t\t\tthis.sourceListener.deregister();\n\t\t}\n\t\tif (this.targetListener) {\n\t\t\tthis.targetListener.deregister();\n\t\t}\n\t}\n\n\tstatic getDerivedStateFromProps(nextProps: LinkProps, prevState: LinkState): LinkState {\n\t\treturn {\n\t\t\tsourcePort: nextProps.link.getSourcePort(),\n\t\t\ttargetPort: nextProps.link.getTargetPort()\n\t\t};\n\t}\n\n\tinstallTarget() {\n\t\tthis.targetListener && this.targetListener.deregister();\n\n\t\tif (!this.props.link.getTargetPort()) return;\n\t\tthis.targetListener = this.props.link.getTargetPort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tinstallSource() {\n\t\tthis.sourceListener && this.sourceListener.deregister();\n\n\t\tif (!this.props.link.getSourcePort()) return;\n\t\tthis.sourceListener = this.props.link.getSourcePort().registerListener({\n\t\t\treportInitialPosition: (event: BaseEntityEvent<BasePositionModel>) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<LinkProps>, prevState: Readonly<LinkState>, snapshot) {\n\t\tif (prevState.sourcePort !== this.state.sourcePort) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (prevState.targetPort !== this.state.targetPort) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n\t}\n\n\tcomponentDidMount(): void {\n\t\tif (this.props.link.getSourcePort()) {\n\t\t\tthis.installSource();\n\t\t}\n\t\tif (this.props.link.getTargetPort()) {\n\t\t\tthis.installTarget();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { link } = this.props;\n\n\t\t// only draw the link when we have reported positions\n\t\tif (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\t\tif (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//generate links\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.link} serialized={this.props.link.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-linkid={this.props.link.getID()}>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForLink(link)}\n\t\t\t\t\t\t\t{_.map(this.props.link.getLabels(), (labelModel, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<LabelWidget\n\t\t\t\t\t\t\t\t\t\tkey={labelModel.getID()}\n\t\t\t\t\t\t\t\t\t\tengine={this.props.diagramEngine}\n\t\t\t\t\t\t\t\t\t\tlabel={labelModel}\n\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LinkLayerModel } from './LinkLayerModel';\nimport { LinkLayerWidget } from './LinkLayerWidget';\n\nexport class LinkLayerFactory extends AbstractReactFactory<LinkLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-links');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): LinkLayerModel {\n\t\treturn new LinkLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<LinkLayerModel>): JSX.Element {\n\t\treturn <LinkLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"resize-observer-polyfill\");","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeModel } from './NodeModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@projectstorm/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface NodeProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Node = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class NodeWidget extends React.Component<NodeProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: NodeProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.ob.disconnect();\n\t\tthis.ob = null;\n\n\t\tthis.listener?.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<NodeProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.node !== prevProps.node) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.node.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateSize(width: number, height: number) {\n\t\tthis.props.node.updateDimensions({ width, height });\n\n\t\t//now mark the links as dirty\n\t\ttry {\n\t\t\t_.forEach(this.props.node.getPorts(), (port) => {\n\t\t\t\tport.updateCoords(this.props.diagramEngine.getPortCoords(port));\n\t\t\t});\n\t\t} catch (ex) {}\n\t}\n\n\tcomponentDidMount(): void {\n\t\t// @ts-ignore\n\t\tthis.ob = new ResizeObserver((entities) => {\n\t\t\tconst bounds = entities[0].contentRect;\n\t\t\tthis.updateSize(bounds.width, bounds.height);\n\t\t});\n\n\t\tconst b = this.ref.current.getBoundingClientRect();\n\t\tthis.updateSize(b.width, b.height);\n\t\tthis.ob.observe(this.ref.current);\n\t\tthis.installSelectionListener();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.node} serialized={this.props.node.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<S.Node\n\t\t\t\t\t\t\tclassName=\"node\"\n\t\t\t\t\t\t\tref={this.ref}\n\t\t\t\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttop: this.props.node.getY(),\n\t\t\t\t\t\t\t\tleft: this.props.node.getX()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForNode(this.props.node)}\n\t\t\t\t\t\t</S.Node>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import { NodeModel } from '../node/NodeModel';\nimport { LinkModel } from '../link/LinkModel';\nimport * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: NodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone: PortModel) {\n\t\tclone.links = {};\n\t\tclone.parent = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tgetBoundingBox(): Rectangle {\n\t\treturn Rectangle.fromPointAndSize(this.position, this.width, this.height);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { NodeModel } from '../node/NodeModel';\nimport { NodeWidget } from '../node/NodeWidget';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { DiagramEngine } from '../../DiagramEngine';\n\nexport interface NodeLayerWidgetProps {\n\tlayer: NodeLayerModel;\n\tengine: DiagramEngine;\n}\n\nexport class NodeLayerWidget extends React.Component<NodeLayerWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{_.map(this.props.layer.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn <NodeWidget key={node.getID()} diagramEngine={this.props.engine} node={node} />;\n\t\t\t\t})}\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateModelEvent, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeLayerModel } from './NodeLayerModel';\nimport { NodeLayerWidget } from './NodeLayerWidget';\n\nexport class NodeLayerFactory extends AbstractReactFactory<NodeLayerModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diagram-nodes');\n\t}\n\n\tgenerateModel(event: GenerateModelEvent): NodeLayerModel {\n\t\treturn new NodeLayerModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<NodeLayerModel>): JSX.Element {\n\t\treturn <NodeLayerWidget layer={event.model} engine={this.engine} />;\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { ListenerHandle, Toolkit } from '@projectstorm/react-canvas-core';\n\nexport interface PortProps {\n\tport: PortModel;\n\tengine: DiagramEngine;\n\tclassName?;\n\tstyle?;\n}\n\nexport class PortWidget extends React.Component<React.PropsWithChildren<PortProps>> {\n\tref: React.RefObject<HTMLDivElement>;\n\tengineListenerHandle: ListenerHandle;\n\n\tconstructor(props: PortProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\treport() {\n\t\tthis.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.engineListenerHandle && this.engineListenerHandle.deregister();\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<PortProps>, prevState, snapshot?: any): void {\n\t\tif (!this.props.port.reportedPosition) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tcomponentDidMount(): void {\n\t\tthis.engineListenerHandle = this.props.engine.registerListener({\n\t\t\tcanvasReady: () => {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t});\n\t\tif (this.props.engine.getCanvas()) {\n\t\t\tthis.report();\n\t\t}\n\t}\n\n\tgetExtraProps() {\n\t\tif (Toolkit.TESTING) {\n\t\t\tconst links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\t\t\treturn {\n\t\t\t\t'data-links': links\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={this.props.style}\n\t\t\t\tref={this.ref}\n\t\t\t\tclassName={`port ${this.props.className || ''}`}\n\t\t\t\tdata-name={this.props.port.getName()}\n\t\t\t\tdata-nodeid={this.props.port.getNode().getID()}\n\t\t\t\t{...this.getExtraProps()}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import {\n\tAbstractDisplacementState,\n\tAbstractDisplacementStateEvent,\n\tAction,\n\tActionEvent,\n\tInputType\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\nimport { DiagramEngine } from '../DiagramEngine';\n\nexport interface DragNewLinkStateOptions {\n\t/**\n\t * If enabled, the links will stay on the canvas if they dont connect to a port\n\t * when dragging finishes\n\t */\n\tallowLooseLinks?: boolean;\n\t/**\n\t * If enabled, then a link can still be drawn from the port even if it is locked\n\t */\n\tallowLinksFromLockedPorts?: boolean;\n}\n\nexport class DragNewLinkState extends AbstractDisplacementState<DiagramEngine> {\n\tport: PortModel;\n\tlink: LinkModel;\n\tconfig: DragNewLinkStateOptions;\n\n\tconstructor(options: DragNewLinkStateOptions = {}) {\n\t\tsuper({ name: 'drag-new-link' });\n\n\t\tthis.config = {\n\t\t\tallowLooseLinks: true,\n\t\t\tallowLinksFromLockedPorts: false,\n\t\t\t...options\n\t\t};\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent, PortModel>) => {\n\t\t\t\t\tthis.port = this.engine.getMouseElement(event.event) as PortModel;\n\t\t\t\t\tif (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link = this.port.createLinkModel();\n\n\t\t\t\t\t// if no link is given, just eject the state\n\t\t\t\t\tif (!this.link) {\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.link.setSelected(true);\n\t\t\t\t\tthis.link.setSourcePort(this.port);\n\t\t\t\t\tthis.engine.getModel().addLink(this.link);\n\t\t\t\t\tthis.port.reportPosition();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst model = this.engine.getMouseElement(event.event);\n\t\t\t\t\t// check to see if we connected to a new port\n\t\t\t\t\tif (model instanceof PortModel) {\n\t\t\t\t\t\tif (this.port.canLinkToPort(model)) {\n\t\t\t\t\t\t\tthis.link.setTargetPort(model);\n\t\t\t\t\t\t\tmodel.reportPosition();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.config.allowLooseLinks) {\n\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the link's far-end point position on mouse move.\n\t * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n\t * as the possible engine offset\n\t */\n\tfireMouseMoved(event: AbstractDisplacementStateEvent): any {\n\t\tconst portPos = this.port.getPosition();\n\t\tconst zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n\t\tconst engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n\t\tconst engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n\t\tconst initialXRelative = this.initialXRelative / zoomLevelPercentage;\n\t\tconst initialYRelative = this.initialYRelative / zoomLevelPercentage;\n\t\tconst linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n\t\tconst linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n\n\t\tthis.link.getLastPoint().setPosition(linkNextX, linkNextY);\n\t\tthis.engine.repaintCanvas();\n\t}\n}\n","import { Action, ActionEvent, InputType, MoveItemsState } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\nimport { PointModel } from '../entities/link/PointModel';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { PortModel } from '../entities/port/PortModel';\nimport { MouseEvent } from 'react';\nimport { LinkModel } from '../entities/link/LinkModel';\n\nexport class DragDiagramItemsState extends MoveItemsState<DiagramEngine> {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst item = this.engine.getMouseElement(event.event);\n\t\t\t\t\tif (item instanceof PortModel) {\n\t\t\t\t\t\t_.forEach(this.initialPositions, (position) => {\n\t\t\t\t\t\t\tif (position.item instanceof PointModel) {\n\t\t\t\t\t\t\t\tconst link = position.item.getParent() as LinkModel;\n\n\t\t\t\t\t\t\t\t// only care about the last links\n\t\t\t\t\t\t\t\tif (link.getLastPoint() !== position.item) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (link.getSourcePort().canLinkToPort(item)) {\n\t\t\t\t\t\t\t\t\tlink.setTargetPort(item);\n\t\t\t\t\t\t\t\t\titem.reportPosition();\n\t\t\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { MouseEvent, TouchEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../entities/port/PortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// touch drags the canvas\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.TOUCH_START,\n\t\t\t\tfire: (event: ActionEvent<TouchEvent>) => {\n\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { NodeModel } from './entities/node/NodeModel';\nimport { PortModel } from './entities/port/PortModel';\nimport { LinkModel } from './entities/link/LinkModel';\nimport { LabelModel } from './entities/label/LabelModel';\nimport { boundingBoxFromPolygons, Point, Rectangle } from '@projectstorm/geometry';\nimport { MouseEvent } from 'react';\nimport {\n\tAbstractModelFactory,\n\tAbstractReactFactory,\n\tBaseModel,\n\tCanvasEngine,\n\tCanvasEngineListener,\n\tCanvasEngineOptions,\n\tFactoryBank,\n\tToolkit\n} from '@projectstorm/react-canvas-core';\nimport { DiagramModel } from './models/DiagramModel';\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends CanvasEngine<CanvasEngineListener, DiagramModel> {\n\tprotected nodeFactories: FactoryBank<AbstractReactFactory<NodeModel, DiagramEngine>>;\n\tprotected linkFactories: FactoryBank<AbstractReactFactory<LinkModel, DiagramEngine>>;\n\tprotected portFactories: FactoryBank<AbstractModelFactory<PortModel, DiagramEngine>>;\n\tprotected labelFactories: FactoryBank<AbstractReactFactory<LabelModel, DiagramEngine>>;\n\n\tmaxNumberPointsPerLink: number;\n\n\tconstructor(options: CanvasEngineOptions = {}) {\n\t\tsuper(options);\n\t\tthis.maxNumberPointsPerLink = 1000;\n\n\t\t// create banks for the different factory types\n\t\tthis.nodeFactories = new FactoryBank();\n\t\tthis.linkFactories = new FactoryBank();\n\t\tthis.portFactories = new FactoryBank();\n\t\tthis.labelFactories = new FactoryBank();\n\n\t\tconst setup = (factory: FactoryBank) => {\n\t\t\tfactory.registerListener({\n\t\t\t\tfactoryAdded: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(this);\n\t\t\t\t},\n\t\t\t\tfactoryRemoved: (event) => {\n\t\t\t\t\tevent.factory.setDiagramEngine(null);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tsetup(this.nodeFactories);\n\t\tsetup(this.linkFactories);\n\t\tsetup(this.portFactories);\n\t\tsetup(this.labelFactories);\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event: MouseEvent): BaseModel {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.model;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, '.port[data-name]');\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, '.node[data-nodeid]') as HTMLElement;\n\t\t\treturn diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, '.point[data-id]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, '[data-linkid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getLink(element.getAttribute('data-linkid'));\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, '.node[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn diagramModel.getNode(element.getAttribute('data-nodeid'));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories() {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories() {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories() {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetFactoryForNode<F extends AbstractReactFactory<NodeModel, DiagramEngine>>(node: NodeModel | string) {\n\t\tif (typeof node === 'string') {\n\t\t\treturn this.nodeFactories.getFactory(node);\n\t\t}\n\t\treturn this.nodeFactories.getFactory(node.getType());\n\t}\n\n\tgetFactoryForLink<F extends AbstractReactFactory<LinkModel, DiagramEngine>>(link: LinkModel | string) {\n\t\tif (typeof link === 'string') {\n\t\t\treturn this.linkFactories.getFactory<F>(link);\n\t\t}\n\t\treturn this.linkFactories.getFactory<F>(link.getType());\n\t}\n\n\tgetFactoryForLabel<F extends AbstractReactFactory<LabelModel, DiagramEngine>>(label: LabelModel) {\n\t\tif (typeof label === 'string') {\n\t\t\treturn this.labelFactories.getFactory(label);\n\t\t}\n\t\treturn this.labelFactories.getFactory(label.getType());\n\t}\n\n\tgetFactoryForPort<F extends AbstractModelFactory<PortModel, DiagramEngine>>(port: PortModel) {\n\t\tif (typeof port === 'string') {\n\t\t\treturn this.portFactories.getFactory<F>(port);\n\t\t}\n\t\treturn this.portFactories.getFactory<F>(port.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element {\n\t\treturn this.getFactoryForLink(link).generateReactWidget({ model: link });\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element {\n\t\treturn this.getFactoryForNode(node).generateReactWidget({ model: node });\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t'Cannot find Node Port element with nodeID: [' +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t'] and name: [' +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t']'\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel): Point {\n\t\treturn this.getPortCoords(port).getOrigin();\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(port: PortModel, element?: HTMLDivElement): Rectangle {\n\t\tif (!this.canvas) {\n\t\t\tthrow new Error('Canvas needs to be set first');\n\t\t}\n\t\tif (!element) {\n\t\t\telement = this.getNodePortElement(port);\n\t\t}\n\t\tconst sourceRect = element.getBoundingClientRect();\n\t\tconst point = this.getRelativeMousePoint({\n\t\t\tclientX: sourceRect.left,\n\t\t\tclientY: sourceRect.top\n\t\t});\n\t\tconst zoom = this.model.getZoomLevel() / 100.0;\n\t\treturn Rectangle.fromPointAndSize(point, sourceRect.width / zoom, sourceRect.height / zoom);\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetBoundingNodesRect(nodes: NodeModel[]): Rectangle {\n\t\tif (nodes) {\n\t\t\tif (nodes.length === 0) {\n\t\t\t\treturn new Rectangle();\n\t\t\t}\n\t\t\treturn new Rectangle(boundingBoxFromPolygons(nodes.map((node) => node.getBoundingBox())));\n\t\t}\n\t}\n\n\tzoomToFitSelectedNodes(options: { margin?: number; maxZoom?: number }) {\n\t\tconst nodes: NodeModel[] = this.model\n\t\t\t.getSelectedEntities()\n\t\t\t.filter((entity) => entity instanceof NodeModel) as NodeModel[];\n\t\tthis.zoomToFitNodes({\n\t\t\tmargin: options.margin,\n\t\t\tmaxZoom: options.maxZoom,\n\t\t\tnodes: nodes.length > 0 ? nodes : null\n\t\t});\n\t}\n\n\tzoomToFitNodes(options: { margin?: number; nodes?: NodeModel[]; maxZoom?: number });\n\t/**\n\t * @deprecated\n\t */\n\tzoomToFitNodes(margin: number);\n\tzoomToFitNodes(options) {\n\t\tlet margin = options || 0;\n\t\tlet nodes: NodeModel[] = [];\n\t\tlet maxZoom: number | null = null;\n\t\tif (!!options && typeof options == 'object') {\n\t\t\tmargin = options.margin || 0;\n\t\t\tnodes = options.nodes || [];\n\t\t\tmaxZoom = options.maxZoom || null;\n\t\t}\n\n\t\t// no node selected\n\t\tif (nodes.length === 0) {\n\t\t\tnodes = this.model.getNodes();\n\t\t}\n\t\tconst nodesRect = this.getBoundingNodesRect(nodes);\n\t\tif (nodesRect) {\n\t\t\t// there is something we should zoom on\n\t\t\tlet canvasRect = this.canvas.getBoundingClientRect();\n\n\t\t\tconst calculate = (margin: number = 0) => {\n\t\t\t\t// work out zoom\n\t\t\t\tconst xFactor = this.canvas.clientWidth / (nodesRect.getWidth() + margin * 2);\n\t\t\t\tconst yFactor = this.canvas.clientHeight / (nodesRect.getHeight() + margin * 2);\n\n\t\t\t\tlet zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\t\t\t\tif (maxZoom && zoomFactor > maxZoom) {\n\t\t\t\t\tzoomFactor = maxZoom;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tzoom: zoomFactor,\n\t\t\t\t\tx:\n\t\t\t\t\t\tcanvasRect.width / 2 -\n\t\t\t\t\t\t((nodesRect.getWidth() + margin * 2) / 2 + nodesRect.getTopLeft().x) * zoomFactor +\n\t\t\t\t\t\tmargin,\n\t\t\t\t\ty:\n\t\t\t\t\t\tcanvasRect.height / 2 -\n\t\t\t\t\t\t((nodesRect.getHeight() + margin * 2) / 2 + nodesRect.getTopLeft().y) * zoomFactor +\n\t\t\t\t\t\tmargin\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tlet params = calculate(0);\n\t\t\tif (margin) {\n\t\t\t\tif (params.x < margin || params.y < margin) {\n\t\t\t\t\tparams = calculate(margin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// apply\n\t\t\tthis.model.setZoomLevel(params.zoom * 100);\n\t\t\tthis.model.setOffset(params.x, params.y);\n\t\t\tthis.repaintCanvas();\n\t\t}\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n}\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","PointModel","BasePositionModel","constructor","options","super","type","this","parent","link","isConnectedToPort","getPortForPoint","getLink","getParent","remove","removePoint","isLocked","LinkModel","BaseModel","points","sourcePort","targetPort","renderedPaths","labels","getBoundingBox","Rectangle","boundingBoxFromPoints","point","getPosition","getSelectionEntities","getTargetPort","getSourcePort","concat","length","deserialize","event","data","p","position","Point","x","y","label","labelOb","engine","getFactoryForLabel","generateModel","addLabel","target","getModel","then","model","setTargetPort","source","setSourcePort","getRenderedPath","setRenderedPaths","paths","serialize","getID","doClone","lookupTable","clone","setPoints","getPoints","clearPort","port","removeLink","isLastPoint","getPointIndex","indexOf","getPointModel","id","i","getFirstPoint","getLastPoint","getPointForPort","addLink","fireEvent","reportedPosition","setPosition","getCenter","index","addPoint","generatePoint","setParent","push","getLabels","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","NodeModel","ports","width","height","old","getX","getY","portOb","getFactoryForPort","registerModel","addPort","getLinks","getPortFromID","portID","links","getPort","name","getPorts","removePort","getName","updateDimensions","NodeLayerModel","LayerModel","isSvg","transformed","addModel","Error","registerListener","entityRemoved","removeNode","getChildModelFactoryBank","getNodeFactories","getNodes","getModels","LinkLayerModel","getLinkFactories","DiagramModel","CanvasModel","addLayer","layers","layer","activeNodeLayer","activeLinkLayer","getLinkLayers","getNodeLayers","getActiveNodeLayer","getActiveLinkLayer","getNode","node","addAll","models","addNode","isCreated","removeModel","LabelModel","offsetX","offsetY","S","Label","Foreign","LabelWidget","props","findPathAndRelativePositionToRenderLabel","lengths","map","path","getTotalLength","labelPosition","reduce","previousValue","currentValue","pathIndex","calculateLabelPosition","found","labelDimensions","ref","current","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","getOptions","style","transform","componentDidUpdate","window","requestAnimationFrame","componentDidMount","render","canvas","getCanvas","generateReactWidget","LinkWidget","state","componentWillUnmount","sourceListener","deregister","targetListener","static","nextProps","prevState","installTarget","reportInitialPosition","forceUpdate","installSource","prevProps","snapshot","firstPoint","lastPoint","PeformanceWidget","serialized","diagramEngine","generateWidgetForLink","labelModel","Container","LinkLayerWidget","LinkLayerFactory","AbstractReactFactory","PortModelAlignment","Node","NodeWidget","ob","disconnect","listener","installSelectionListener","selectionChanged","updateSize","updateCoords","getPortCoords","ex","entities","bounds","contentRect","b","getBoundingClientRect","observe","className","top","left","generateWidgetForNode","NodeLayerWidget","NodeLayerFactory","PortModel","alignment","parentNode","getMaximumLinks","maximumLinks","setMaximumLinks","createLinkModel","numberOfLinks","reportPosition","entity","coords","getWidth","getHeight","getTopLeft","canLinkToPort","PortWidget","report","engineListenerHandle","canvasReady","getExtraProps","Toolkit","join","children","DragNewLinkState","AbstractDisplacementState","config","allowLooseLinks","allowLinksFromLockedPorts","registerAction","Action","InputType","fire","getMouseElement","setSelected","eject","repaintCanvas","fireMouseMoved","portPos","zoomLevelPercentage","getZoomLevel","engineOffsetX","getOffsetX","engineOffsetY","getOffsetY","initialXRelative","initialYRelative","linkNextX","virtualDisplacementX","linkNextY","virtualDisplacementY","DragDiagramItemsState","MoveItemsState","item","initialPositions","DefaultDiagramState","State","childStates","SelectingState","dragCanvas","DragCanvasState","dragNewLink","dragItems","element","getActionEventBus","getModelForEvent","transitionWithEvent","DiagramEngine","CanvasEngine","maxNumberPointsPerLink","nodeFactories","FactoryBank","linkFactories","portFactories","labelFactories","setup","factoryAdded","setDiagramEngine","factoryRemoved","diagramModel","nodeElement","getAttribute","getLabelFactories","getPortFactories","getFactoryForNode","getFactory","getType","getFactoryForLink","getNodeElement","selector","querySelector","getNodePortElement","getPortCenter","getOrigin","sourceRect","getRelativeMousePoint","clientX","clientY","zoom","getNodeDimensions","nodeRect","getBoundingNodesRect","nodes","boundingBoxFromPolygons","zoomToFitSelectedNodes","getSelectedEntities","filter","zoomToFitNodes","margin","maxZoom","nodesRect","canvasRect","calculate","xFactor","clientWidth","yFactor","clientHeight","zoomFactor","params","setZoomLevel","setOffset","getMaxNumberPointsPerLink","setMaxNumberPointsPerLink","max"],"sourceRoot":""}